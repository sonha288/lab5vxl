
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000752c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08007640  08007640  00017640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b3c  08007b3c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007b3c  08007b3c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b3c  08007b3c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200001e0  08007d24  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08007d24  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156b7  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3f  00000000  00000000  000358c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c828  00000000  00000000  000386ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  00044f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe8  00000000  00000000  00045aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019445  00000000  00000000  00046a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e39  00000000  00000000  0005fed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ee7d  00000000  00000000  00073d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00102b8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003798  00000000  00000000  00102be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007624 	.word	0x08007624

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007624 	.word	0x08007624

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2iz>:
 8000eec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef4:	d30f      	bcc.n	8000f16 <__aeabi_f2iz+0x2a>
 8000ef6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d90d      	bls.n	8000f1c <__aeabi_f2iz+0x30>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f08:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	bf18      	it	ne
 8000f12:	4240      	negne	r0, r0
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f20:	d101      	bne.n	8000f26 <__aeabi_f2iz+0x3a>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d105      	bne.n	8000f32 <__aeabi_f2iz+0x46>
 8000f26:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f2a:	bf08      	it	eq
 8000f2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_d2lz>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	460c      	mov	r4, r1
 8000f3c:	4605      	mov	r5, r0
 8000f3e:	4621      	mov	r1, r4
 8000f40:	4628      	mov	r0, r5
 8000f42:	2200      	movs	r2, #0
 8000f44:	2300      	movs	r3, #0
 8000f46:	f7ff fded 	bl	8000b24 <__aeabi_dcmplt>
 8000f4a:	b928      	cbnz	r0, 8000f58 <__aeabi_d2lz+0x20>
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	4621      	mov	r1, r4
 8000f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f54:	f000 b80a 	b.w	8000f6c <__aeabi_d2ulz>
 8000f58:	4628      	mov	r0, r5
 8000f5a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000f5e:	f000 f805 	bl	8000f6c <__aeabi_d2ulz>
 8000f62:	4240      	negs	r0, r0
 8000f64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f68:	bd38      	pop	{r3, r4, r5, pc}
 8000f6a:	bf00      	nop

08000f6c <__aeabi_d2ulz>:
 8000f6c:	b5d0      	push	{r4, r6, r7, lr}
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <__aeabi_d2ulz+0x34>)
 8000f72:	4606      	mov	r6, r0
 8000f74:	460f      	mov	r7, r1
 8000f76:	f7ff fb63 	bl	8000640 <__aeabi_dmul>
 8000f7a:	f7ff fe39 	bl	8000bf0 <__aeabi_d2uiz>
 8000f7e:	4604      	mov	r4, r0
 8000f80:	f7ff fae4 	bl	800054c <__aeabi_ui2d>
 8000f84:	2200      	movs	r2, #0
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <__aeabi_d2ulz+0x38>)
 8000f88:	f7ff fb5a 	bl	8000640 <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4630      	mov	r0, r6
 8000f92:	4639      	mov	r1, r7
 8000f94:	f7ff f99c 	bl	80002d0 <__aeabi_dsub>
 8000f98:	f7ff fe2a 	bl	8000bf0 <__aeabi_d2uiz>
 8000f9c:	4621      	mov	r1, r4
 8000f9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000fa0:	3df00000 	.word	0x3df00000
 8000fa4:	41f00000 	.word	0x41f00000

08000fa8 <isCmdEqualToRST>:
uint8_t cmd_flag = INIT;
uint8_t cmd_data[MAX_CMD_SIZE];
uint8_t cmd_data_index = 0;

int isCmdEqualToRST(uint8_t str[]) {
	if (str[0] == 'R' && str[1] == 'S' && str[2] == 'T')
 8000fa8:	7803      	ldrb	r3, [r0, #0]
 8000faa:	2b52      	cmp	r3, #82	; 0x52
 8000fac:	d108      	bne.n	8000fc0 <isCmdEqualToRST+0x18>
 8000fae:	7843      	ldrb	r3, [r0, #1]
 8000fb0:	2b53      	cmp	r3, #83	; 0x53
 8000fb2:	d105      	bne.n	8000fc0 <isCmdEqualToRST+0x18>
 8000fb4:	7880      	ldrb	r0, [r0, #2]
 8000fb6:	f1a0 0354 	sub.w	r3, r0, #84	; 0x54
 8000fba:	4258      	negs	r0, r3
 8000fbc:	4158      	adcs	r0, r3
 8000fbe:	4770      	bx	lr
		return 1;
	else
		return 	0;
 8000fc0:	2000      	movs	r0, #0
}
 8000fc2:	4770      	bx	lr

08000fc4 <isCmdEqualToOK>:

int isCmdEqualToOK(uint8_t str[]) {
	if (str[0] == 'O' && str[1] == 'K')
 8000fc4:	7803      	ldrb	r3, [r0, #0]
 8000fc6:	2b4f      	cmp	r3, #79	; 0x4f
 8000fc8:	d105      	bne.n	8000fd6 <isCmdEqualToOK+0x12>
 8000fca:	7840      	ldrb	r0, [r0, #1]
 8000fcc:	f1a0 034b 	sub.w	r3, r0, #75	; 0x4b
 8000fd0:	4258      	negs	r0, r3
 8000fd2:	4158      	adcs	r0, r3
 8000fd4:	4770      	bx	lr
		return 1;
	else
		return 0;
 8000fd6:	2000      	movs	r0, #0
}
 8000fd8:	4770      	bx	lr
	...

08000fdc <cmd_parser_fsm>:

void cmd_parser_fsm() {
	switch (status1) {
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <cmd_parser_fsm+0x70>)
void cmd_parser_fsm() {
 8000fde:	b510      	push	{r4, lr}
	switch (status1) {
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	2a01      	cmp	r2, #1
 8000fe6:	d009      	beq.n	8000ffc <cmd_parser_fsm+0x20>
 8000fe8:	2a02      	cmp	r2, #2
 8000fea:	d014      	beq.n	8001016 <cmd_parser_fsm+0x3a>
 8000fec:	b92a      	cbnz	r2, 8000ffa <cmd_parser_fsm+0x1e>
	case INIT:
		if (buffer_byte == '!')
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <cmd_parser_fsm+0x74>)
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	2a21      	cmp	r2, #33	; 0x21
 8000ff4:	d101      	bne.n	8000ffa <cmd_parser_fsm+0x1e>
			status1 = READING;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
		status1 = INIT;
		break;
	default:
		break;
	}
}
 8000ffa:	bd10      	pop	{r4, pc}
		if (buffer_byte != '!' && buffer_byte != '#') {
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <cmd_parser_fsm+0x74>)
 8000ffe:	7811      	ldrb	r1, [r2, #0]
 8001000:	2921      	cmp	r1, #33	; 0x21
 8001002:	d0fa      	beq.n	8000ffa <cmd_parser_fsm+0x1e>
 8001004:	2923      	cmp	r1, #35	; 0x23
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <cmd_parser_fsm+0x78>)
 8001008:	d01b      	beq.n	8001042 <cmd_parser_fsm+0x66>
			cmd_data[cmd_data_index] = buffer_byte;
 800100a:	7813      	ldrb	r3, [r2, #0]
 800100c:	4812      	ldr	r0, [pc, #72]	; (8001058 <cmd_parser_fsm+0x7c>)
 800100e:	54c1      	strb	r1, [r0, r3]
			cmd_data_index++;
 8001010:	3301      	adds	r3, #1
			cmd_data_index = 0;
 8001012:	7013      	strb	r3, [r2, #0]
 8001014:	e7f1      	b.n	8000ffa <cmd_parser_fsm+0x1e>
		if (isCmdEqualToRST(cmd_data) == 1) {
 8001016:	4810      	ldr	r0, [pc, #64]	; (8001058 <cmd_parser_fsm+0x7c>)
 8001018:	f7ff ffc6 	bl	8000fa8 <isCmdEqualToRST>
 800101c:	2801      	cmp	r0, #1
 800101e:	d107      	bne.n	8001030 <cmd_parser_fsm+0x54>
			cmd_flag = RST;
 8001020:	2208      	movs	r2, #8
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <cmd_parser_fsm+0x80>)
 8001024:	701a      	strb	r2, [r3, #0]
			setTimer1(1);
 8001026:	f000 f9af 	bl	8001388 <setTimer1>
		status1 = INIT;
 800102a:	2300      	movs	r3, #0
 800102c:	6023      	str	r3, [r4, #0]
}
 800102e:	e7e4      	b.n	8000ffa <cmd_parser_fsm+0x1e>
		} else if (isCmdEqualToOK(cmd_data) == 1) {
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <cmd_parser_fsm+0x7c>)
 8001032:	f7ff ffc7 	bl	8000fc4 <isCmdEqualToOK>
 8001036:	2801      	cmp	r0, #1
			cmd_flag = OK;
 8001038:	bf02      	ittt	eq
 800103a:	2209      	moveq	r2, #9
 800103c:	4b07      	ldreq	r3, [pc, #28]	; (800105c <cmd_parser_fsm+0x80>)
 800103e:	701a      	strbeq	r2, [r3, #0]
 8001040:	e7f3      	b.n	800102a <cmd_parser_fsm+0x4e>
			status1 = STOP;
 8001042:	2102      	movs	r1, #2
 8001044:	6019      	str	r1, [r3, #0]
			cmd_data_index = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	e7e3      	b.n	8001012 <cmd_parser_fsm+0x36>
 800104a:	bf00      	nop
 800104c:	2000023c 	.word	0x2000023c
 8001050:	2000025c 	.word	0x2000025c
 8001054:	20000205 	.word	0x20000205
 8001058:	2000025d 	.word	0x2000025d
 800105c:	20000206 	.word	0x20000206

08001060 <uart_comms_fsm>:

void uart_comms_fsm() {
 8001060:	b570      	push	{r4, r5, r6, lr}
    static char last_packet[50];  // Lưu gói tin cuối cùng
    static float adc_stored_value = 0; // Lưu giá trị ADC trước đó
    static int adc_locked = 0; // Cờ khóa giá trị ADC
    char str[50];

    switch (cmd_flag) {
 8001062:	4c2a      	ldr	r4, [pc, #168]	; (800110c <uart_comms_fsm+0xac>)
 8001064:	7823      	ldrb	r3, [r4, #0]
 8001066:	2b08      	cmp	r3, #8
 8001068:	d002      	beq.n	8001070 <uart_comms_fsm+0x10>
 800106a:	2b09      	cmp	r3, #9
 800106c:	d042      	beq.n	80010f4 <uart_comms_fsm+0x94>
        break;

    default:
        break;
    }
}
 800106e:	bd70      	pop	{r4, r5, r6, pc}
        if (!adc_locked) {
 8001070:	4c27      	ldr	r4, [pc, #156]	; (8001110 <uart_comms_fsm+0xb0>)
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	b993      	cbnz	r3, 800109c <uart_comms_fsm+0x3c>
            adc_stored_value = HAL_ADC_GetValue(&hadc1) * 5.0 / 4096;
 8001076:	4827      	ldr	r0, [pc, #156]	; (8001114 <uart_comms_fsm+0xb4>)
 8001078:	f000 fb44 	bl	8001704 <HAL_ADC_GetValue>
 800107c:	f7ff fa66 	bl	800054c <__aeabi_ui2d>
 8001080:	2200      	movs	r2, #0
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <uart_comms_fsm+0xb8>)
 8001084:	f7ff fadc 	bl	8000640 <__aeabi_dmul>
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <uart_comms_fsm+0xbc>)
 800108a:	2200      	movs	r2, #0
 800108c:	f7ff fad8 	bl	8000640 <__aeabi_dmul>
 8001090:	f7ff fdce 	bl	8000c30 <__aeabi_d2f>
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <uart_comms_fsm+0xc0>)
 8001096:	6018      	str	r0, [r3, #0]
            adc_locked = 1;  // Khóa giá trị ADC
 8001098:	2301      	movs	r3, #1
 800109a:	6023      	str	r3, [r4, #0]
        if (timer1_flag == 1) {
 800109c:	4d21      	ldr	r5, [pc, #132]	; (8001124 <uart_comms_fsm+0xc4>)
 800109e:	682b      	ldr	r3, [r5, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d1e4      	bne.n	800106e <uart_comms_fsm+0xe>
            int int_part = (int)adc_stored_value;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <uart_comms_fsm+0xc0>)
 80010a6:	681e      	ldr	r6, [r3, #0]
 80010a8:	4630      	mov	r0, r6
 80010aa:	f7ff ff1f 	bl	8000eec <__aeabi_f2iz>
 80010ae:	4604      	mov	r4, r0
            int dec_part = (int)((adc_stored_value - int_part) * 100);
 80010b0:	f7ff fec8 	bl	8000e44 <__aeabi_i2f>
 80010b4:	4601      	mov	r1, r0
 80010b6:	4630      	mov	r0, r6
 80010b8:	f7ff fe0e 	bl	8000cd8 <__aeabi_fsub>
 80010bc:	491a      	ldr	r1, [pc, #104]	; (8001128 <uart_comms_fsm+0xc8>)
 80010be:	f7ff f84f 	bl	8000160 <__aeabi_fmul>
 80010c2:	f7ff ff13 	bl	8000eec <__aeabi_f2iz>
            sprintf(last_packet, "!ADC=%d.%02d#\r\n", int_part, dec_part);
 80010c6:	4622      	mov	r2, r4
            int dec_part = (int)((adc_stored_value - int_part) * 100);
 80010c8:	4603      	mov	r3, r0
            sprintf(last_packet, "!ADC=%d.%02d#\r\n", int_part, dec_part);
 80010ca:	4918      	ldr	r1, [pc, #96]	; (800112c <uart_comms_fsm+0xcc>)
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <uart_comms_fsm+0xd0>)
 80010ce:	f002 fd19 	bl	8003b04 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)last_packet, strlen(last_packet), 500);
 80010d2:	4817      	ldr	r0, [pc, #92]	; (8001130 <uart_comms_fsm+0xd0>)
 80010d4:	f7ff f83c 	bl	8000150 <strlen>
 80010d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010dc:	b282      	uxth	r2, r0
 80010de:	4914      	ldr	r1, [pc, #80]	; (8001130 <uart_comms_fsm+0xd0>)
 80010e0:	4814      	ldr	r0, [pc, #80]	; (8001134 <uart_comms_fsm+0xd4>)
 80010e2:	f001 fc3c 	bl	800295e <HAL_UART_Transmit>
            setTimer1(300);  // 3 giây
 80010e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010ea:	f000 f94d 	bl	8001388 <setTimer1>
            timer1_flag = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	602b      	str	r3, [r5, #0]
 80010f2:	e7bc      	b.n	800106e <uart_comms_fsm+0xe>
        adc_locked = 0;  // Mở khóa cho phép cập nhật giá trị ADC mới
 80010f4:	2500      	movs	r5, #0
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <uart_comms_fsm+0xb0>)
        HAL_UART_Transmit(&huart2, (uint8_t*)"STOP#\r\n", strlen("STOP#\r\n"), 500);
 80010f8:	2207      	movs	r2, #7
        adc_locked = 0;  // Mở khóa cho phép cập nhật giá trị ADC mới
 80010fa:	601d      	str	r5, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)"STOP#\r\n", strlen("STOP#\r\n"), 500);
 80010fc:	490e      	ldr	r1, [pc, #56]	; (8001138 <uart_comms_fsm+0xd8>)
 80010fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <uart_comms_fsm+0xd4>)
 8001104:	f001 fc2b 	bl	800295e <HAL_UART_Transmit>
        cmd_flag = INIT;  // Reset trạng thái FSM
 8001108:	7025      	strb	r5, [r4, #0]
}
 800110a:	e7b0      	b.n	800106e <uart_comms_fsm+0xe>
 800110c:	20000206 	.word	0x20000206
 8001110:	200001fc 	.word	0x200001fc
 8001114:	20000280 	.word	0x20000280
 8001118:	40140000 	.word	0x40140000
 800111c:	3f300000 	.word	0x3f300000
 8001120:	20000200 	.word	0x20000200
 8001124:	20000244 	.word	0x20000244
 8001128:	42c80000 	.word	0x42c80000
 800112c:	08007640 	.word	0x08007640
 8001130:	20000208 	.word	0x20000208
 8001134:	200002f8 	.word	0x200002f8
 8001138:	08007650 	.word	0x08007650

0800113c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	if (huart->Instance == USART2) {
 800113c:	6802      	ldr	r2, [r0, #0]
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_UART_RxCpltCallback+0x44>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001140:	b510      	push	{r4, lr}
	if (huart->Instance == USART2) {
 8001142:	429a      	cmp	r2, r3
 8001144:	d11b      	bne.n	800117e <HAL_UART_RxCpltCallback+0x42>
		HAL_UART_Transmit(&huart2, &buffer_byte, 1, 500);
 8001146:	4c0f      	ldr	r4, [pc, #60]	; (8001184 <HAL_UART_RxCpltCallback+0x48>)
 8001148:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800114c:	4621      	mov	r1, r4
 800114e:	2201      	movs	r2, #1
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <HAL_UART_RxCpltCallback+0x4c>)
 8001152:	f001 fc04 	bl	800295e <HAL_UART_Transmit>
		buffer[index_buffer] = buffer_byte;
 8001156:	4a0d      	ldr	r2, [pc, #52]	; (800118c <HAL_UART_RxCpltCallback+0x50>)
 8001158:	7820      	ldrb	r0, [r4, #0]
 800115a:	7813      	ldrb	r3, [r2, #0]
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <HAL_UART_RxCpltCallback+0x54>)
 800115e:	54c8      	strb	r0, [r1, r3]
		index_buffer++;
 8001160:	3301      	adds	r3, #1
 8001162:	b2db      	uxtb	r3, r3
		if (index_buffer == MAX_BUFFER_SIZE)
 8001164:	2b1e      	cmp	r3, #30
			index_buffer = 0;
 8001166:	bf08      	it	eq
 8001168:	2300      	moveq	r3, #0
 800116a:	7013      	strb	r3, [r2, #0]
		buffer_flag = 1;
 800116c:	2201      	movs	r2, #1
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_UART_RxCpltCallback+0x58>)
		HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 8001170:	4904      	ldr	r1, [pc, #16]	; (8001184 <HAL_UART_RxCpltCallback+0x48>)
		buffer_flag = 1;
 8001172:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <HAL_UART_RxCpltCallback+0x4c>)
	}
}
 8001176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 800117a:	f001 be0a 	b.w	8002d92 <HAL_UART_Receive_IT>
}
 800117e:	bd10      	pop	{r4, pc}
 8001180:	40004400 	.word	0x40004400
 8001184:	2000025c 	.word	0x2000025c
 8001188:	200002f8 	.word	0x200002f8
 800118c:	20000207 	.word	0x20000207
 8001190:	20000260 	.word	0x20000260
 8001194:	20000204 	.word	0x20000204

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b530      	push	{r4, r5, lr}
 800119a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119c:	2224      	movs	r2, #36	; 0x24
 800119e:	2100      	movs	r1, #0
 80011a0:	a80b      	add	r0, sp, #44	; 0x2c
 80011a2:	f001 fe31 	bl	8002e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a6:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a8:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011aa:	2100      	movs	r1, #0
 80011ac:	eb0d 0002 	add.w	r0, sp, r2
 80011b0:	f001 fe2a 	bl	8002e08 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b4:	2100      	movs	r1, #0
 80011b6:	462a      	mov	r2, r5
 80011b8:	a801      	add	r0, sp, #4
 80011ba:	f001 fe25 	bl	8002e08 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011be:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c8:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	f000 fe15 	bl	8001df8 <HAL_RCC_OscConfig>
 80011ce:	4601      	mov	r1, r0
 80011d0:	b108      	cbz	r0, 80011d6 <SystemClock_Config+0x3e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <SystemClock_Config+0x3c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011d8:	e9cd 0007 	strd	r0, r0, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011dc:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e2:	a805      	add	r0, sp, #20
 80011e4:	f000 ffca 	bl	800217c <HAL_RCC_ClockConfig>
 80011e8:	b108      	cbz	r0, 80011ee <SystemClock_Config+0x56>
 80011ea:	b672      	cpsid	i
  while (1)
 80011ec:	e7fe      	b.n	80011ec <SystemClock_Config+0x54>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80011ee:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011f2:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f4:	f001 f87e 	bl	80022f4 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	b108      	cbz	r0, 80011fe <SystemClock_Config+0x66>
 80011fa:	b672      	cpsid	i
  while (1)
 80011fc:	e7fe      	b.n	80011fc <SystemClock_Config+0x64>
}
 80011fe:	b015      	add	sp, #84	; 0x54
 8001200:	bd30      	pop	{r4, r5, pc}
	...

08001204 <main>:
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
  HAL_Init();
 8001208:	f000 fa58 	bl	80016bc <HAL_Init>
  SystemClock_Config();
 800120c:	f7ff ffc4 	bl	8001198 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	2210      	movs	r2, #16
 8001212:	2100      	movs	r1, #0
 8001214:	eb0d 0002 	add.w	r0, sp, r2
 8001218:	f001 fdf6 	bl	8002e08 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b4f      	ldr	r3, [pc, #316]	; (800135c <main+0x158>)
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800121e:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001222:	484f      	ldr	r0, [pc, #316]	; (8001360 <main+0x15c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	f042 0204 	orr.w	r2, r2, #4
 8001228:	619a      	str	r2, [r3, #24]
 800122a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001238:	f000 fdd0 	bl	8001ddc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2320      	movs	r3, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001246:	4846      	ldr	r0, [pc, #280]	; (8001360 <main+0x15c>)
 8001248:	a904      	add	r1, sp, #16
  hadc1.Instance = ADC1;
 800124a:	4c46      	ldr	r4, [pc, #280]	; (8001364 <main+0x160>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	e9cd 5306 	strd	r5, r3, [sp, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001250:	f000 fcee 	bl	8001c30 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 8001254:	4b44      	ldr	r3, [pc, #272]	; (8001368 <main+0x164>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001256:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 8001258:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8001262:	9506      	str	r5, [sp, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001264:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001266:	7327      	strb	r7, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001268:	7525      	strb	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800126a:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126c:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 800126e:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001270:	f000 fb8e 	bl	8001990 <HAL_ADC_Init>
 8001274:	b108      	cbz	r0, 800127a <main+0x76>
 8001276:	b672      	cpsid	i
  while (1)
 8001278:	e7fe      	b.n	8001278 <main+0x74>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127a:	e9cd 0704 	strd	r0, r7, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800127e:	9006      	str	r0, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001280:	a904      	add	r1, sp, #16
 8001282:	4620      	mov	r0, r4
 8001284:	f000 fa42 	bl	800170c <HAL_ADC_ConfigChannel>
 8001288:	4605      	mov	r5, r0
 800128a:	b108      	cbz	r0, 8001290 <main+0x8c>
 800128c:	b672      	cpsid	i
  while (1)
 800128e:	e7fe      	b.n	800128e <main+0x8a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001290:	2210      	movs	r2, #16
 8001292:	4601      	mov	r1, r0
 8001294:	eb0d 0002 	add.w	r0, sp, r2
 8001298:	f001 fdb6 	bl	8002e08 <memset>
  htim2.Init.Prescaler = 7999;
 800129c:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80012a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80012a4:	4e31      	ldr	r6, [pc, #196]	; (800136c <main+0x168>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a6:	e9cd 5502 	strd	r5, r5, [sp, #8]
  htim2.Init.Prescaler = 7999;
 80012aa:	e9c6 1300 	strd	r1, r3, [r6]
  htim2.Init.Period = 9;
 80012ae:	2309      	movs	r3, #9
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b0:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	e9c6 3503 	strd	r3, r5, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	60b5      	str	r5, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	61b5      	str	r5, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ba:	f001 f989 	bl	80025d0 <HAL_TIM_Base_Init>
 80012be:	b108      	cbz	r0, 80012c4 <main+0xc0>
 80012c0:	b672      	cpsid	i
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <main+0xbe>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c8:	4630      	mov	r0, r6
 80012ca:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ce:	f001 f9b5 	bl	800263c <HAL_TIM_ConfigClockSource>
 80012d2:	b108      	cbz	r0, 80012d8 <main+0xd4>
 80012d4:	b672      	cpsid	i
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <main+0xd2>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	e9cd 0002 	strd	r0, r0, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012dc:	a902      	add	r1, sp, #8
 80012de:	4630      	mov	r0, r6
 80012e0:	f001 fa48 	bl	8002774 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	b108      	cbz	r0, 80012ea <main+0xe6>
 80012e6:	b672      	cpsid	i
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <main+0xe4>
  huart2.Init.BaudRate = 9600;
 80012ea:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Instance = USART2;
 80012ee:	4d20      	ldr	r5, [pc, #128]	; (8001370 <main+0x16c>)
  huart2.Init.BaudRate = 9600;
 80012f0:	4a20      	ldr	r2, [pc, #128]	; (8001374 <main+0x170>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f2:	e9c5 0002 	strd	r0, r0, [r5, #8]
  huart2.Init.BaudRate = 9600;
 80012f6:	e9c5 2300 	strd	r2, r3, [r5]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012fa:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 80012fc:	6128      	str	r0, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	e9c5 3005 	strd	r3, r0, [r5, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001302:	61e8      	str	r0, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001304:	4628      	mov	r0, r5
 8001306:	f001 fafb 	bl	8002900 <HAL_UART_Init>
 800130a:	b108      	cbz	r0, 8001310 <main+0x10c>
 800130c:	b672      	cpsid	i
  while (1)
 800130e:	e7fe      	b.n	800130e <main+0x10a>
  HAL_TIM_Base_Start_IT(&htim2);
 8001310:	4630      	mov	r0, r6
 8001312:	f001 f867 	bl	80023e4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &buffer_byte, 1);
 8001316:	463a      	mov	r2, r7
 8001318:	4917      	ldr	r1, [pc, #92]	; (8001378 <main+0x174>)
 800131a:	4628      	mov	r0, r5
 800131c:	f001 fd39 	bl	8002d92 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 8001320:	4620      	mov	r0, r4
 8001322:	f000 faad 	bl	8001880 <HAL_ADC_Start>
  setTimer2(50);
 8001326:	2032      	movs	r0, #50	; 0x32
 8001328:	f000 f838 	bl	800139c <setTimer2>
	  if (timer2_flag == 1) {
 800132c:	4d13      	ldr	r5, [pc, #76]	; (800137c <main+0x178>)
	  			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800132e:	4e0c      	ldr	r6, [pc, #48]	; (8001360 <main+0x15c>)
	  		if (buffer_flag == 1) {
 8001330:	4c13      	ldr	r4, [pc, #76]	; (8001380 <main+0x17c>)
	  if (timer2_flag == 1) {
 8001332:	682b      	ldr	r3, [r5, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d106      	bne.n	8001346 <main+0x142>
	  			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001338:	4630      	mov	r0, r6
 800133a:	2120      	movs	r1, #32
 800133c:	f000 fd53 	bl	8001de6 <HAL_GPIO_TogglePin>
	  			setTimer2(50);
 8001340:	2032      	movs	r0, #50	; 0x32
 8001342:	f000 f82b 	bl	800139c <setTimer2>
	  		if (buffer_flag == 1) {
 8001346:	7823      	ldrb	r3, [r4, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d103      	bne.n	8001354 <main+0x150>
	  			cmd_parser_fsm();
 800134c:	f7ff fe46 	bl	8000fdc <cmd_parser_fsm>
	  			buffer_flag = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	7023      	strb	r3, [r4, #0]
	  		uart_comms_fsm();
 8001354:	f7ff fe84 	bl	8001060 <uart_comms_fsm>
	  if (timer2_flag == 1) {
 8001358:	e7eb      	b.n	8001332 <main+0x12e>
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	40010800 	.word	0x40010800
 8001364:	20000280 	.word	0x20000280
 8001368:	40012400 	.word	0x40012400
 800136c:	200002b0 	.word	0x200002b0
 8001370:	200002f8 	.word	0x200002f8
 8001374:	40004400 	.word	0x40004400
 8001378:	2000025c 	.word	0x2000025c
 800137c:	2000024c 	.word	0x2000024c
 8001380:	20000204 	.word	0x20000204

08001384 <HAL_TIM_PeriodElapsedCallback>:
	timerRun();
 8001384:	f000 b814 	b.w	80013b0 <timerRun>

08001388 <setTimer1>:
int timer2_counter = 0;
int timer2_flag = 0;

void setTimer1(int duration) {
	timer1_counter = duration;
	timer1_flag = 0;
 8001388:	2200      	movs	r2, #0
	timer1_counter = duration;
 800138a:	4b02      	ldr	r3, [pc, #8]	; (8001394 <setTimer1+0xc>)
 800138c:	6018      	str	r0, [r3, #0]
	timer1_flag = 0;
 800138e:	4b02      	ldr	r3, [pc, #8]	; (8001398 <setTimer1+0x10>)
 8001390:	601a      	str	r2, [r3, #0]
}
 8001392:	4770      	bx	lr
 8001394:	20000240 	.word	0x20000240
 8001398:	20000244 	.word	0x20000244

0800139c <setTimer2>:

void setTimer2(int duration) {
	timer2_counter = duration;
	timer2_flag = 0;
 800139c:	2200      	movs	r2, #0
	timer2_counter = duration;
 800139e:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <setTimer2+0xc>)
 80013a0:	6018      	str	r0, [r3, #0]
	timer2_flag = 0;
 80013a2:	4b02      	ldr	r3, [pc, #8]	; (80013ac <setTimer2+0x10>)
 80013a4:	601a      	str	r2, [r3, #0]
}
 80013a6:	4770      	bx	lr
 80013a8:	20000248 	.word	0x20000248
 80013ac:	2000024c 	.word	0x2000024c

080013b0 <timerRun>:

void timerRun() {
	if (timer1_counter > 0) {
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <timerRun+0x2c>)
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	dd05      	ble.n	80013c4 <timerRun+0x14>
		timer1_counter--;
 80013b8:	3b01      	subs	r3, #1
 80013ba:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) {
 80013bc:	b913      	cbnz	r3, 80013c4 <timerRun+0x14>
			timer1_flag = 1;
 80013be:	2201      	movs	r2, #1
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <timerRun+0x30>)
 80013c2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <timerRun+0x34>)
 80013c6:	6813      	ldr	r3, [r2, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dd05      	ble.n	80013d8 <timerRun+0x28>
		timer2_counter--;
 80013cc:	3b01      	subs	r3, #1
 80013ce:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) {
 80013d0:	b913      	cbnz	r3, 80013d8 <timerRun+0x28>
			timer2_flag = 1;
 80013d2:	2201      	movs	r2, #1
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <timerRun+0x38>)
 80013d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000240 	.word	0x20000240
 80013e0:	20000244 	.word	0x20000244
 80013e4:	20000248 	.word	0x20000248
 80013e8:	2000024c 	.word	0x2000024c

080013ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_MspInit+0x3c>)
{
 80013ee:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f0:	699a      	ldr	r2, [r3, #24]
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	619a      	str	r2, [r3, #24]
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	f002 0201 	and.w	r2, r2, #1
 80013fe:	9200      	str	r2, [sp, #0]
 8001400:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	69da      	ldr	r2, [r3, #28]
 8001404:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001408:	61da      	str	r2, [r3, #28]
 800140a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001416:	6853      	ldr	r3, [r2, #4]
 8001418:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800141c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	b002      	add	sp, #8
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	40010000 	.word	0x40010000

08001430 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001430:	b510      	push	{r4, lr}
 8001432:	4604      	mov	r4, r0
 8001434:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	2210      	movs	r2, #16
 8001438:	2100      	movs	r1, #0
 800143a:	a802      	add	r0, sp, #8
 800143c:	f001 fce4 	bl	8002e08 <memset>
  if(hadc->Instance==ADC1)
 8001440:	6822      	ldr	r2, [r4, #0]
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_ADC_MspInit+0x54>)
 8001444:	429a      	cmp	r2, r3
 8001446:	d11b      	bne.n	8001480 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001448:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800144c:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	480e      	ldr	r0, [pc, #56]	; (8001488 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001454:	619a      	str	r2, [r3, #24]
 8001456:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800145a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800145e:	9200      	str	r2, [sp, #0]
 8001460:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	699a      	ldr	r2, [r3, #24]
 8001464:	f042 0204 	orr.w	r2, r2, #4
 8001468:	619a      	str	r2, [r3, #24]
 800146a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001476:	2303      	movs	r3, #3
 8001478:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f000 fbd8 	bl	8001c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001480:	b006      	add	sp, #24
 8001482:	bd10      	pop	{r4, pc}
 8001484:	40012400 	.word	0x40012400
 8001488:	40010800 	.word	0x40010800

0800148c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800148c:	6803      	ldr	r3, [r0, #0]
{
 800148e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001494:	d115      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001496:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800149a:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800149c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a4:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a8:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014b2:	f000 fafd 	bl	8001ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014b6:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014b8:	b003      	add	sp, #12
 80014ba:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014be:	f000 bb29 	b.w	8001b14 <HAL_NVIC_EnableIRQ>
}
 80014c2:	b003      	add	sp, #12
 80014c4:	f85d fb04 	ldr.w	pc, [sp], #4

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b510      	push	{r4, lr}
 80014ca:	4604      	mov	r4, r0
 80014cc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	2210      	movs	r2, #16
 80014d0:	2100      	movs	r1, #0
 80014d2:	a802      	add	r0, sp, #8
 80014d4:	f001 fc98 	bl	8002e08 <memset>
  if(huart->Instance==USART2)
 80014d8:	6822      	ldr	r2, [r4, #0]
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_UART_MspInit+0x7c>)
 80014dc:	429a      	cmp	r2, r3
 80014de:	d12f      	bne.n	8001540 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80014e4:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	4818      	ldr	r0, [pc, #96]	; (8001548 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014ec:	61da      	str	r2, [r3, #28]
 80014ee:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	f042 0204 	orr.w	r2, r2, #4
 8001502:	619a      	str	r2, [r3, #24]
 8001504:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f000 fb89 	bl	8001c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151e:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_UART_MspInit+0x80>)
 8001522:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152c:	f000 fb80 	bl	8001c30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001530:	2026      	movs	r0, #38	; 0x26
 8001532:	4622      	mov	r2, r4
 8001534:	4621      	mov	r1, r4
 8001536:	f000 fabb 	bl	8001ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800153a:	2026      	movs	r0, #38	; 0x26
 800153c:	f000 faea 	bl	8001b14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001540:	b006      	add	sp, #24
 8001542:	bd10      	pop	{r4, pc}
 8001544:	40004400 	.word	0x40004400
 8001548:	40010800 	.word	0x40010800

0800154c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler>

0800154e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler>

08001550 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler>

08001552 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler>

08001554 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler>

08001556 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155c:	f000 b8c0 	b.w	80016e0 <HAL_IncTick>

08001560 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001560:	4801      	ldr	r0, [pc, #4]	; (8001568 <TIM2_IRQHandler+0x8>)
 8001562:	f000 bf69 	b.w	8002438 <HAL_TIM_IRQHandler>
 8001566:	bf00      	nop
 8001568:	200002b0 	.word	0x200002b0

0800156c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800156c:	4801      	ldr	r0, [pc, #4]	; (8001574 <USART2_IRQHandler+0x8>)
 800156e:	f001 baad 	b.w	8002acc <HAL_UART_IRQHandler>
 8001572:	bf00      	nop
 8001574:	200002f8 	.word	0x200002f8

08001578 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001578:	2001      	movs	r0, #1
 800157a:	4770      	bx	lr

0800157c <_kill>:

int _kill(int pid, int sig)
{
 800157c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800157e:	f001 fc19 	bl	8002db4 <__errno>
 8001582:	2316      	movs	r3, #22
 8001584:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001586:	f04f 30ff 	mov.w	r0, #4294967295
 800158a:	bd08      	pop	{r3, pc}

0800158c <_exit>:

void _exit (int status)
{
 800158c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800158e:	f001 fc11 	bl	8002db4 <__errno>
 8001592:	2316      	movs	r3, #22
 8001594:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001596:	e7fe      	b.n	8001596 <_exit+0xa>

08001598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	460e      	mov	r6, r1
 800159c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	2500      	movs	r5, #0
 80015a0:	42a5      	cmp	r5, r4
 80015a2:	db01      	blt.n	80015a8 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80015a4:	4620      	mov	r0, r4
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80015a8:	f3af 8000 	nop.w
 80015ac:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	3501      	adds	r5, #1
 80015b0:	e7f6      	b.n	80015a0 <_read+0x8>

080015b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b2:	b570      	push	{r4, r5, r6, lr}
 80015b4:	460e      	mov	r6, r1
 80015b6:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b8:	2500      	movs	r5, #0
 80015ba:	42a5      	cmp	r5, r4
 80015bc:	db01      	blt.n	80015c2 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80015be:	4620      	mov	r0, r4
 80015c0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80015c2:	5d70      	ldrb	r0, [r6, r5]
 80015c4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	3501      	adds	r5, #1
 80015ca:	e7f6      	b.n	80015ba <_write+0x8>

080015cc <_close>:

int _close(int file)
{
	return -1;
}
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	4770      	bx	lr

080015d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80015d6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80015d8:	604b      	str	r3, [r1, #4]
}
 80015da:	4770      	bx	lr

080015dc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80015dc:	2001      	movs	r0, #1
 80015de:	4770      	bx	lr

080015e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80015e0:	2000      	movs	r0, #0
 80015e2:	4770      	bx	lr

080015e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <_sbrk+0x30>)
{
 80015e6:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80015e8:	6819      	ldr	r1, [r3, #0]
{
 80015ea:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80015ec:	b909      	cbnz	r1, 80015f2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80015ee:	490a      	ldr	r1, [pc, #40]	; (8001618 <_sbrk+0x34>)
 80015f0:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	4909      	ldr	r1, [pc, #36]	; (800161c <_sbrk+0x38>)
 80015f6:	4c0a      	ldr	r4, [pc, #40]	; (8001620 <_sbrk+0x3c>)
 80015f8:	4402      	add	r2, r0
 80015fa:	1b09      	subs	r1, r1, r4
 80015fc:	428a      	cmp	r2, r1
 80015fe:	d906      	bls.n	800160e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001600:	f001 fbd8 	bl	8002db4 <__errno>
 8001604:	230c      	movs	r3, #12
 8001606:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001608:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800160c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800160e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001610:	e7fc      	b.n	800160c <_sbrk+0x28>
 8001612:	bf00      	nop
 8001614:	20000250 	.word	0x20000250
 8001618:	20000358 	.word	0x20000358
 800161c:	20002800 	.word	0x20002800
 8001620:	00000400 	.word	0x00000400

08001624 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	4770      	bx	lr
	...

08001628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001628:	f7ff fffc 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800162e:	490c      	ldr	r1, [pc, #48]	; (8001660 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001630:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001644:	4c09      	ldr	r4, [pc, #36]	; (800166c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001652:	f001 fbb5 	bl	8002dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001656:	f7ff fdd5 	bl	8001204 <main>
  bx lr
 800165a:	4770      	bx	lr
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001664:	08007b44 	.word	0x08007b44
  ldr r2, =_sbss
 8001668:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800166c:	20000354 	.word	0x20000354

08001670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>
	...

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_InitTick+0x3c>)
{
 8001678:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800167a:	7818      	ldrb	r0, [r3, #0]
 800167c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001680:	fbb3 f3f0 	udiv	r3, r3, r0
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_InitTick+0x40>)
 8001686:	6810      	ldr	r0, [r2, #0]
 8001688:	fbb0 f0f3 	udiv	r0, r0, r3
 800168c:	f000 fa50 	bl	8001b30 <HAL_SYSTICK_Config>
 8001690:	4604      	mov	r4, r0
 8001692:	b958      	cbnz	r0, 80016ac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001694:	2d0f      	cmp	r5, #15
 8001696:	d809      	bhi.n	80016ac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	4602      	mov	r2, r0
 800169a:	4629      	mov	r1, r5
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 fa06 	bl	8001ab0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4620      	mov	r0, r4
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <HAL_InitTick+0x44>)
 80016a8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80016aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
 80016ae:	e7fc      	b.n	80016aa <HAL_InitTick+0x36>
 80016b0:	20000004 	.word	0x20000004
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000008 	.word	0x20000008

080016bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x20>)
{
 80016be:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ca:	f000 f9df 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ce:	200f      	movs	r0, #15
 80016d0:	f7ff ffd0 	bl	8001674 <HAL_InitTick>
  HAL_MspInit();
 80016d4:	f7ff fe8a 	bl	80013ec <HAL_MspInit>
}
 80016d8:	2000      	movs	r0, #0
 80016da:	bd08      	pop	{r3, pc}
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <HAL_IncTick+0x10>)
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_IncTick+0x14>)
 80016e4:	6811      	ldr	r1, [r2, #0]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	440b      	add	r3, r1
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000340 	.word	0x20000340
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016f8:	4b01      	ldr	r3, [pc, #4]	; (8001700 <HAL_GetTick+0x8>)
 80016fa:	6818      	ldr	r0, [r3, #0]
}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000340 	.word	0x20000340

08001704 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001704:	6803      	ldr	r3, [r0, #0]
 8001706:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001708:	4770      	bx	lr
	...

0800170c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800170c:	2300      	movs	r3, #0
{ 
 800170e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001710:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001712:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8001716:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001718:	2b01      	cmp	r3, #1
 800171a:	d06c      	beq.n	80017f6 <HAL_ADC_ConfigChannel+0xea>
 800171c:	2301      	movs	r3, #1
 800171e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001722:	684d      	ldr	r5, [r1, #4]
 8001724:	6802      	ldr	r2, [r0, #0]
 8001726:	2d06      	cmp	r5, #6
 8001728:	6808      	ldr	r0, [r1, #0]
 800172a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800172e:	d822      	bhi.n	8001776 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001730:	261f      	movs	r6, #31
 8001732:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001734:	3b05      	subs	r3, #5
 8001736:	409e      	lsls	r6, r3
 8001738:	ea25 0506 	bic.w	r5, r5, r6
 800173c:	fa00 f303 	lsl.w	r3, r0, r3
 8001740:	432b      	orrs	r3, r5
 8001742:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001744:	2809      	cmp	r0, #9
 8001746:	688b      	ldr	r3, [r1, #8]
 8001748:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 800174c:	f04f 0107 	mov.w	r1, #7
 8001750:	d929      	bls.n	80017a6 <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001752:	68d6      	ldr	r6, [r2, #12]
 8001754:	3d1e      	subs	r5, #30
 8001756:	40a9      	lsls	r1, r5
 8001758:	ea26 0101 	bic.w	r1, r6, r1
 800175c:	40ab      	lsls	r3, r5
 800175e:	430b      	orrs	r3, r1
 8001760:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001762:	f1a0 0310 	sub.w	r3, r0, #16
 8001766:	2b01      	cmp	r3, #1
 8001768:	d925      	bls.n	80017b6 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176c:	2300      	movs	r3, #0
 800176e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001772:	b002      	add	sp, #8
 8001774:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8001776:	2d0c      	cmp	r5, #12
 8001778:	f04f 051f 	mov.w	r5, #31
 800177c:	d809      	bhi.n	8001792 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800177e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001780:	3b23      	subs	r3, #35	; 0x23
 8001782:	409d      	lsls	r5, r3
 8001784:	ea26 0505 	bic.w	r5, r6, r5
 8001788:	fa00 f303 	lsl.w	r3, r0, r3
 800178c:	432b      	orrs	r3, r5
 800178e:	6313      	str	r3, [r2, #48]	; 0x30
 8001790:	e7d8      	b.n	8001744 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001792:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8001794:	3b41      	subs	r3, #65	; 0x41
 8001796:	409d      	lsls	r5, r3
 8001798:	ea26 0505 	bic.w	r5, r6, r5
 800179c:	fa00 f303 	lsl.w	r3, r0, r3
 80017a0:	432b      	orrs	r3, r5
 80017a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80017a4:	e7ce      	b.n	8001744 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017a6:	6910      	ldr	r0, [r2, #16]
 80017a8:	40a9      	lsls	r1, r5
 80017aa:	ea20 0101 	bic.w	r1, r0, r1
 80017ae:	40ab      	lsls	r3, r5
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6113      	str	r3, [r2, #16]
 80017b4:	e7d9      	b.n	800176a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_ADC_ConfigChannel+0xf0>)
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d116      	bne.n	80017ea <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017bc:	6893      	ldr	r3, [r2, #8]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	d4d3      	bmi.n	800176a <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017c2:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017c4:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017ca:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017cc:	d1cd      	bne.n	800176a <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_ADC_ConfigChannel+0xf4>)
 80017d0:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <HAL_ADC_ConfigChannel+0xf8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80017d8:	230a      	movs	r3, #10
 80017da:	4353      	muls	r3, r2
            wait_loop_index--;
 80017dc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80017de:	9b01      	ldr	r3, [sp, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0c2      	beq.n	800176a <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80017e4:	9b01      	ldr	r3, [sp, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	e7f8      	b.n	80017dc <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80017ec:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ee:	f043 0320 	orr.w	r3, r3, #32
 80017f2:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80017f4:	e7ba      	b.n	800176c <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80017f6:	2002      	movs	r0, #2
 80017f8:	e7bb      	b.n	8001772 <HAL_ADC_ConfigChannel+0x66>
 80017fa:	bf00      	nop
 80017fc:	40012400 	.word	0x40012400
 8001800:	20000000 	.word	0x20000000
 8001804:	000f4240 	.word	0x000f4240

08001808 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001808:	2300      	movs	r3, #0
{
 800180a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 800180c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800180e:	6803      	ldr	r3, [r0, #0]
{
 8001810:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	07d2      	lsls	r2, r2, #31
 8001816:	d502      	bpl.n	800181e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001818:	2000      	movs	r0, #0
}
 800181a:	b003      	add	sp, #12
 800181c:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <ADC_Enable+0x70>)
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <ADC_Enable+0x74>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001830:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001832:	9b01      	ldr	r3, [sp, #4]
 8001834:	b9e3      	cbnz	r3, 8001870 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8001836:	f7ff ff5f 	bl	80016f8 <HAL_GetTick>
 800183a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	07db      	lsls	r3, r3, #31
 8001842:	d4e9      	bmi.n	8001818 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001844:	f7ff ff58 	bl	80016f8 <HAL_GetTick>
 8001848:	1b40      	subs	r0, r0, r5
 800184a:	2802      	cmp	r0, #2
 800184c:	d9f6      	bls.n	800183c <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f013 0301 	ands.w	r3, r3, #1
 8001856:	d1f1      	bne.n	800183c <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001858:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800185a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185c:	f042 0210 	orr.w	r2, r2, #16
 8001860:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001862:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8001864:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800186e:	e7d4      	b.n	800181a <ADC_Enable+0x12>
      wait_loop_index--;
 8001870:	9b01      	ldr	r3, [sp, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	e7dc      	b.n	8001830 <ADC_Enable+0x28>
 8001876:	bf00      	nop
 8001878:	20000000 	.word	0x20000000
 800187c:	000f4240 	.word	0x000f4240

08001880 <HAL_ADC_Start>:
{
 8001880:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001882:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001886:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001888:	2b01      	cmp	r3, #1
 800188a:	d054      	beq.n	8001936 <HAL_ADC_Start+0xb6>
 800188c:	2301      	movs	r3, #1
 800188e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001892:	f7ff ffb9 	bl	8001808 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001896:	2800      	cmp	r0, #0
 8001898:	d149      	bne.n	800192e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800189a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800189e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018aa:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d104      	bne.n	80018bc <HAL_ADC_Start+0x3c>
 80018b2:	4923      	ldr	r1, [pc, #140]	; (8001940 <HAL_ADC_Start+0xc0>)
 80018b4:	684a      	ldr	r2, [r1, #4]
 80018b6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80018ba:	d12e      	bne.n	800191a <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018be:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80018c2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018c4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018c6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018c8:	bf41      	itttt	mi
 80018ca:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80018cc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80018d0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80018d4:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018dc:	bf1c      	itt	ne
 80018de:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80018e0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018ec:	f06f 0202 	mvn.w	r2, #2
 80018f0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80018f8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80018fc:	d113      	bne.n	8001926 <HAL_ADC_Start+0xa6>
 80018fe:	4a0f      	ldr	r2, [pc, #60]	; (800193c <HAL_ADC_Start+0xbc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d105      	bne.n	8001910 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001904:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001908:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800190a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800190e:	d10a      	bne.n	8001926 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001916:	609a      	str	r2, [r3, #8]
}
 8001918:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800191a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800191c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001920:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001922:	684a      	ldr	r2, [r1, #4]
 8001924:	e7cf      	b.n	80018c6 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800192c:	e7f3      	b.n	8001916 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800192e:	2300      	movs	r3, #0
 8001930:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001934:	e7f0      	b.n	8001918 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8001936:	2002      	movs	r0, #2
 8001938:	e7ee      	b.n	8001918 <HAL_ADC_Start+0x98>
 800193a:	bf00      	nop
 800193c:	40012800 	.word	0x40012800
 8001940:	40012400 	.word	0x40012400

08001944 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001944:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001946:	6803      	ldr	r3, [r0, #0]
{
 8001948:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	07d1      	lsls	r1, r2, #31
 800194e:	d401      	bmi.n	8001954 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001950:	2000      	movs	r0, #0
}
 8001952:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800195c:	f7ff fecc 	bl	80016f8 <HAL_GetTick>
 8001960:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	07db      	lsls	r3, r3, #31
 8001968:	d5f2      	bpl.n	8001950 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800196a:	f7ff fec5 	bl	80016f8 <HAL_GetTick>
 800196e:	1b40      	subs	r0, r0, r5
 8001970:	2802      	cmp	r0, #2
 8001972:	d9f6      	bls.n	8001962 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	07da      	lsls	r2, r3, #31
 800197a:	d5f2      	bpl.n	8001962 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800198e:	e7e0      	b.n	8001952 <ADC_ConversionStop_Disable+0xe>

08001990 <HAL_ADC_Init>:
{
 8001990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001992:	4604      	mov	r4, r0
 8001994:	2800      	cmp	r0, #0
 8001996:	d06e      	beq.n	8001a76 <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001998:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800199a:	b923      	cbnz	r3, 80019a6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800199c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800199e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80019a2:	f7ff fd45 	bl	8001430 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019a6:	4620      	mov	r0, r4
 80019a8:	f7ff ffcc 	bl	8001944 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80019ae:	f013 0310 	ands.w	r3, r3, #16
 80019b2:	d162      	bne.n	8001a7a <HAL_ADC_Init+0xea>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d160      	bne.n	8001a7a <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 80019b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019ba:	69e5      	ldr	r5, [r4, #28]
 80019bc:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80019be:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80019c2:	f022 0202 	bic.w	r2, r2, #2
 80019c6:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019ca:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019cc:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80019ce:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019d0:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019d2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019d6:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019da:	d037      	beq.n	8001a4c <HAL_ADC_Init+0xbc>
 80019dc:	2d01      	cmp	r5, #1
 80019de:	bf14      	ite	ne
 80019e0:	2700      	movne	r7, #0
 80019e2:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019e6:	7d26      	ldrb	r6, [r4, #20]
 80019e8:	2e01      	cmp	r6, #1
 80019ea:	d106      	bne.n	80019fa <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019ec:	bb82      	cbnz	r2, 8001a50 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019ee:	69a2      	ldr	r2, [r4, #24]
 80019f0:	3a01      	subs	r2, #1
 80019f2:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 80019f6:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80019fa:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019fc:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001a00:	6856      	ldr	r6, [r2, #4]
 8001a02:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001a06:	ea46 0607 	orr.w	r6, r6, r7
 8001a0a:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001a0c:	6897      	ldr	r7, [r2, #8]
 8001a0e:	4e1d      	ldr	r6, [pc, #116]	; (8001a84 <HAL_ADC_Init+0xf4>)
 8001a10:	ea06 0607 	and.w	r6, r6, r7
 8001a14:	ea46 0601 	orr.w	r6, r6, r1
 8001a18:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a1a:	d001      	beq.n	8001a20 <HAL_ADC_Init+0x90>
 8001a1c:	2d01      	cmp	r5, #1
 8001a1e:	d102      	bne.n	8001a26 <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a20:	6923      	ldr	r3, [r4, #16]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001a26:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001a28:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001a2c:	432b      	orrs	r3, r5
 8001a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a30:	6892      	ldr	r2, [r2, #8]
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_ADC_Init+0xf8>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	4299      	cmp	r1, r3
 8001a38:	d113      	bne.n	8001a62 <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a40:	f023 0303 	bic.w	r3, r3, #3
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a4c:	462f      	mov	r7, r5
 8001a4e:	e7ca      	b.n	80019e6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a52:	f042 0220 	orr.w	r2, r2, #32
 8001a56:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001a60:	e7cb      	b.n	80019fa <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8001a62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a64:	f023 0312 	bic.w	r3, r3, #18
 8001a68:	f043 0310 	orr.w	r3, r3, #16
 8001a6c:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001a76:	2001      	movs	r0, #1
 8001a78:	e7e7      	b.n	8001a4a <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001a82:	e7f8      	b.n	8001a76 <HAL_ADC_Init+0xe6>
 8001a84:	ffe1f7fd 	.word	0xffe1f7fd
 8001a88:	ff1f0efe 	.word	0xff1f0efe

08001a8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4907      	ldr	r1, [pc, #28]	; (8001aac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a8e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001aa8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b530      	push	{r4, r5, lr}
 8001ab4:	68dc      	ldr	r4, [r3, #12]
 8001ab6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	bf28      	it	cs
 8001ac4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001acc:	bf98      	it	ls
 8001ace:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad4:	bf88      	it	hi
 8001ad6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	ea21 0303 	bic.w	r3, r1, r3
 8001adc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ade:	fa05 f404 	lsl.w	r4, r5, r4
 8001ae2:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	bfac      	ite	ge
 8001aee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	4a07      	ldrlt	r2, [pc, #28]	; (8001b10 <HAL_NVIC_SetPriority+0x60>)
 8001af4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001af8:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	bfab      	itete	ge
 8001afc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b0a:	bd30      	pop	{r4, r5, pc}
 8001b0c:	e000ed00 	.word	0xe000ed00
 8001b10:	e000ed14 	.word	0xe000ed14

08001b14 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b14:	2800      	cmp	r0, #0
 8001b16:	db08      	blt.n	8001b2a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b18:	2301      	movs	r3, #1
 8001b1a:	0942      	lsrs	r2, r0, #5
 8001b1c:	f000 001f 	and.w	r0, r0, #31
 8001b20:	fa03 f000 	lsl.w	r0, r3, r0
 8001b24:	4b01      	ldr	r3, [pc, #4]	; (8001b2c <HAL_NVIC_EnableIRQ+0x18>)
 8001b26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	3801      	subs	r0, #1
 8001b32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b36:	d20a      	bcs.n	8001b4e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b4e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d006      	beq.n	8001b72 <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b64:	2304      	movs	r3, #4
 8001b66:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
 8001b70:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b72:	6803      	ldr	r3, [r0, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b74:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	f022 020e 	bic.w	r2, r2, #14
 8001b7c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	f022 0201 	bic.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b86:	2201      	movs	r2, #1
 8001b88:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	604b      	str	r3, [r1, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b90:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001b92:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8001b96:	f880 3020 	strb.w	r3, [r0, #32]
  
  return status; 
 8001b9a:	4618      	mov	r0, r3
}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ba0:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ba2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001baa:	2304      	movs	r3, #4
 8001bac:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bae:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001bb0:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb2:	6803      	ldr	r3, [r0, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f022 020e 	bic.w	r2, r2, #14
 8001bba:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bc4:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <HAL_DMA_Abort_IT+0x88>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d01f      	beq.n	8001c0a <HAL_DMA_Abort_IT+0x6a>
 8001bca:	3214      	adds	r2, #20
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d01e      	beq.n	8001c0e <HAL_DMA_Abort_IT+0x6e>
 8001bd0:	3214      	adds	r2, #20
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01d      	beq.n	8001c12 <HAL_DMA_Abort_IT+0x72>
 8001bd6:	3214      	adds	r2, #20
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <HAL_DMA_Abort_IT+0x78>
 8001bdc:	3214      	adds	r2, #20
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01d      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x7e>
 8001be2:	3214      	adds	r2, #20
 8001be4:	4293      	cmp	r3, r2
 8001be6:	bf0c      	ite	eq
 8001be8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001bec:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8001bf2:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bf4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001bfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001bfe:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001c02:	b17b      	cbz	r3, 8001c24 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8001c04:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c06:	4620      	mov	r0, r4
 8001c08:	e7d2      	b.n	8001bb0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e7f0      	b.n	8001bf0 <HAL_DMA_Abort_IT+0x50>
 8001c0e:	2310      	movs	r3, #16
 8001c10:	e7ee      	b.n	8001bf0 <HAL_DMA_Abort_IT+0x50>
 8001c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c16:	e7eb      	b.n	8001bf0 <HAL_DMA_Abort_IT+0x50>
 8001c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1c:	e7e8      	b.n	8001bf0 <HAL_DMA_Abort_IT+0x50>
 8001c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c22:	e7e5      	b.n	8001bf0 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8001c24:	4618      	mov	r0, r3
 8001c26:	e7c3      	b.n	8001bb0 <HAL_DMA_Abort_IT+0x10>
 8001c28:	40020008 	.word	0x40020008
 8001c2c:	40020000 	.word	0x40020000

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c34:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001c36:	4616      	mov	r6, r2
 8001c38:	4b60      	ldr	r3, [pc, #384]	; (8001dbc <HAL_GPIO_Init+0x18c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c3a:	f8df c194 	ldr.w	ip, [pc, #404]	; 8001dd0 <HAL_GPIO_Init+0x1a0>
 8001c3e:	f8df e194 	ldr.w	lr, [pc, #404]	; 8001dd4 <HAL_GPIO_Init+0x1a4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c42:	680d      	ldr	r5, [r1, #0]
 8001c44:	fa35 f406 	lsrs.w	r4, r5, r6
 8001c48:	d102      	bne.n	8001c50 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001c4a:	b003      	add	sp, #12
 8001c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001c50:	f04f 0801 	mov.w	r8, #1
 8001c54:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c58:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8001c5c:	ea38 0505 	bics.w	r5, r8, r5
 8001c60:	d178      	bne.n	8001d54 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001c62:	684d      	ldr	r5, [r1, #4]
 8001c64:	2d03      	cmp	r5, #3
 8001c66:	d807      	bhi.n	8001c78 <HAL_GPIO_Init+0x48>
 8001c68:	3d01      	subs	r5, #1
 8001c6a:	2d02      	cmp	r5, #2
 8001c6c:	f200 8082 	bhi.w	8001d74 <HAL_GPIO_Init+0x144>
 8001c70:	e8df f005 	tbb	[pc, r5]
 8001c74:	9691      	.short	0x9691
 8001c76:	9c          	.byte	0x9c
 8001c77:	00          	.byte	0x00
 8001c78:	2d12      	cmp	r5, #18
 8001c7a:	f000 8094 	beq.w	8001da6 <HAL_GPIO_Init+0x176>
 8001c7e:	d86b      	bhi.n	8001d58 <HAL_GPIO_Init+0x128>
 8001c80:	2d11      	cmp	r5, #17
 8001c82:	f000 808a 	beq.w	8001d9a <HAL_GPIO_Init+0x16a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c86:	2cff      	cmp	r4, #255	; 0xff
 8001c88:	bf98      	it	ls
 8001c8a:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c8c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c90:	bf88      	it	hi
 8001c92:	f100 0a04 	addhi.w	sl, r0, #4
 8001c96:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c9a:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c9e:	bf88      	it	hi
 8001ca0:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ca2:	fa09 fb05 	lsl.w	fp, r9, r5
 8001ca6:	ea28 080b 	bic.w	r8, r8, fp
 8001caa:	fa02 f505 	lsl.w	r5, r2, r5
 8001cae:	ea48 0505 	orr.w	r5, r8, r5
 8001cb2:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb6:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001cba:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001cbe:	d049      	beq.n	8001d54 <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc0:	4f3f      	ldr	r7, [pc, #252]	; (8001dc0 <HAL_GPIO_Init+0x190>)
 8001cc2:	f026 0803 	bic.w	r8, r6, #3
 8001cc6:	69bd      	ldr	r5, [r7, #24]
 8001cc8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001ccc:	f045 0501 	orr.w	r5, r5, #1
 8001cd0:	61bd      	str	r5, [r7, #24]
 8001cd2:	69bd      	ldr	r5, [r7, #24]
 8001cd4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8001cd8:	f005 0501 	and.w	r5, r5, #1
 8001cdc:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cde:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ce4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001ce8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cec:	fa09 f90b 	lsl.w	r9, r9, fp
 8001cf0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf4:	4d33      	ldr	r5, [pc, #204]	; (8001dc4 <HAL_GPIO_Init+0x194>)
 8001cf6:	42a8      	cmp	r0, r5
 8001cf8:	d05c      	beq.n	8001db4 <HAL_GPIO_Init+0x184>
 8001cfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cfe:	42a8      	cmp	r0, r5
 8001d00:	d05a      	beq.n	8001db8 <HAL_GPIO_Init+0x188>
 8001d02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d06:	42a8      	cmp	r0, r5
 8001d08:	bf0c      	ite	eq
 8001d0a:	2502      	moveq	r5, #2
 8001d0c:	2503      	movne	r5, #3
 8001d0e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001d12:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001d16:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d1a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d1c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d20:	bf14      	ite	ne
 8001d22:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d24:	43a5      	biceq	r5, r4
 8001d26:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d28:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d2a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d2e:	bf14      	ite	ne
 8001d30:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d32:	43a5      	biceq	r5, r4
 8001d34:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001d36:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d38:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001d3c:	bf14      	ite	ne
 8001d3e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d40:	43a5      	biceq	r5, r4
 8001d42:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001d44:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d46:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001d4a:	bf14      	ite	ne
 8001d4c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d4e:	ea25 0404 	biceq.w	r4, r5, r4
 8001d52:	601c      	str	r4, [r3, #0]
	position++;
 8001d54:	3601      	adds	r6, #1
 8001d56:	e774      	b.n	8001c42 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001d58:	4f1b      	ldr	r7, [pc, #108]	; (8001dc8 <HAL_GPIO_Init+0x198>)
 8001d5a:	42bd      	cmp	r5, r7
 8001d5c:	d00a      	beq.n	8001d74 <HAL_GPIO_Init+0x144>
 8001d5e:	d815      	bhi.n	8001d8c <HAL_GPIO_Init+0x15c>
 8001d60:	4575      	cmp	r5, lr
 8001d62:	d007      	beq.n	8001d74 <HAL_GPIO_Init+0x144>
 8001d64:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001dd8 <HAL_GPIO_Init+0x1a8>
 8001d68:	454d      	cmp	r5, r9
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x144>
 8001d6c:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001d70:	454d      	cmp	r5, r9
 8001d72:	d188      	bne.n	8001c86 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d74:	688a      	ldr	r2, [r1, #8]
 8001d76:	b1da      	cbz	r2, 8001db0 <HAL_GPIO_Init+0x180>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d78:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001d7a:	bf08      	it	eq
 8001d7c:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d80:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001d84:	bf18      	it	ne
 8001d86:	f8c0 8014 	strne.w	r8, [r0, #20]
 8001d8a:	e77c      	b.n	8001c86 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001d8c:	4f0f      	ldr	r7, [pc, #60]	; (8001dcc <HAL_GPIO_Init+0x19c>)
 8001d8e:	42bd      	cmp	r5, r7
 8001d90:	d0f0      	beq.n	8001d74 <HAL_GPIO_Init+0x144>
 8001d92:	4565      	cmp	r5, ip
 8001d94:	e7ed      	b.n	8001d72 <HAL_GPIO_Init+0x142>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d96:	68ca      	ldr	r2, [r1, #12]
          break;
 8001d98:	e775      	b.n	8001c86 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d9a:	68ca      	ldr	r2, [r1, #12]
 8001d9c:	3204      	adds	r2, #4
          break;
 8001d9e:	e772      	b.n	8001c86 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001da0:	68ca      	ldr	r2, [r1, #12]
 8001da2:	3208      	adds	r2, #8
          break;
 8001da4:	e76f      	b.n	8001c86 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da6:	68ca      	ldr	r2, [r1, #12]
 8001da8:	320c      	adds	r2, #12
          break;
 8001daa:	e76c      	b.n	8001c86 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001dac:	2200      	movs	r2, #0
 8001dae:	e76a      	b.n	8001c86 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db0:	2204      	movs	r2, #4
 8001db2:	e768      	b.n	8001c86 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db4:	2500      	movs	r5, #0
 8001db6:	e7aa      	b.n	8001d0e <HAL_GPIO_Init+0xde>
 8001db8:	2501      	movs	r5, #1
 8001dba:	e7a8      	b.n	8001d0e <HAL_GPIO_Init+0xde>
 8001dbc:	40010400 	.word	0x40010400
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	10220000 	.word	0x10220000
 8001dcc:	10310000 	.word	0x10310000
 8001dd0:	10320000 	.word	0x10320000
 8001dd4:	10120000 	.word	0x10120000
 8001dd8:	10210000 	.word	0x10210000

08001ddc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ddc:	b10a      	cbz	r2, 8001de2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dde:	6101      	str	r1, [r0, #16]
  }
}
 8001de0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001de2:	0409      	lsls	r1, r1, #16
 8001de4:	e7fb      	b.n	8001dde <HAL_GPIO_WritePin+0x2>

08001de6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001de6:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de8:	ea01 0203 	and.w	r2, r1, r3
 8001dec:	ea21 0103 	bic.w	r1, r1, r3
 8001df0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001df4:	6101      	str	r1, [r0, #16]
}
 8001df6:	4770      	bx	lr

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	b338      	cbz	r0, 8001e50 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e00:	6803      	ldr	r3, [r0, #0]
 8001e02:	07db      	lsls	r3, r3, #31
 8001e04:	d410      	bmi.n	8001e28 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e06:	682b      	ldr	r3, [r5, #0]
 8001e08:	079f      	lsls	r7, r3, #30
 8001e0a:	d45e      	bmi.n	8001eca <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0c:	682b      	ldr	r3, [r5, #0]
 8001e0e:	0719      	lsls	r1, r3, #28
 8001e10:	f100 8095 	bmi.w	8001f3e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	075a      	lsls	r2, r3, #29
 8001e18:	f100 80bf 	bmi.w	8001f9a <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1c:	69e8      	ldr	r0, [r5, #28]
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	f040 812c 	bne.w	800207c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001e24:	2000      	movs	r0, #0
 8001e26:	e029      	b.n	8001e7c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e28:	4c8f      	ldr	r4, [pc, #572]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	6863      	ldr	r3, [r4, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d007      	beq.n	8001e44 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e34:	6863      	ldr	r3, [r4, #4]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d10a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5c>
 8001e3e:	6863      	ldr	r3, [r4, #4]
 8001e40:	03de      	lsls	r6, r3, #15
 8001e42:	d507      	bpl.n	8001e54 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	039c      	lsls	r4, r3, #14
 8001e48:	d5dd      	bpl.n	8001e06 <HAL_RCC_OscConfig+0xe>
 8001e4a:	686b      	ldr	r3, [r5, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1da      	bne.n	8001e06 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8001e50:	2001      	movs	r0, #1
 8001e52:	e013      	b.n	8001e7c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	686b      	ldr	r3, [r5, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5a:	d112      	bne.n	8001e82 <HAL_RCC_OscConfig+0x8a>
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e64:	f7ff fc48 	bl	80016f8 <HAL_GetTick>
 8001e68:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	0398      	lsls	r0, r3, #14
 8001e6e:	d4ca      	bmi.n	8001e06 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff fc42 	bl	80016f8 <HAL_GetTick>
 8001e74:	1b80      	subs	r0, r0, r6
 8001e76:	2864      	cmp	r0, #100	; 0x64
 8001e78:	d9f7      	bls.n	8001e6a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001e7a:	2003      	movs	r0, #3
}
 8001e7c:	b002      	add	sp, #8
 8001e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e82:	b99b      	cbnz	r3, 8001eac <HAL_RCC_OscConfig+0xb4>
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8a:	6023      	str	r3, [r4, #0]
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e94:	f7ff fc30 	bl	80016f8 <HAL_GetTick>
 8001e98:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	0399      	lsls	r1, r3, #14
 8001e9e:	d5b2      	bpl.n	8001e06 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff fc2a 	bl	80016f8 <HAL_GetTick>
 8001ea4:	1b80      	subs	r0, r0, r6
 8001ea6:	2864      	cmp	r0, #100	; 0x64
 8001ea8:	d9f7      	bls.n	8001e9a <HAL_RCC_OscConfig+0xa2>
 8001eaa:	e7e6      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	d103      	bne.n	8001ebc <HAL_RCC_OscConfig+0xc4>
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb8:	6023      	str	r3, [r4, #0]
 8001eba:	e7cf      	b.n	8001e5c <HAL_RCC_OscConfig+0x64>
 8001ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec0:	6023      	str	r3, [r4, #0]
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec8:	e7cb      	b.n	8001e62 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eca:	4c67      	ldr	r4, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001ecc:	6863      	ldr	r3, [r4, #4]
 8001ece:	f013 0f0c 	tst.w	r3, #12
 8001ed2:	d007      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ed4:	6863      	ldr	r3, [r4, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d110      	bne.n	8001f00 <HAL_RCC_OscConfig+0x108>
 8001ede:	6863      	ldr	r3, [r4, #4]
 8001ee0:	03da      	lsls	r2, r3, #15
 8001ee2:	d40d      	bmi.n	8001f00 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	079b      	lsls	r3, r3, #30
 8001ee8:	d502      	bpl.n	8001ef0 <HAL_RCC_OscConfig+0xf8>
 8001eea:	692b      	ldr	r3, [r5, #16]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d1af      	bne.n	8001e50 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	696a      	ldr	r2, [r5, #20]
 8001ef4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ef8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001efc:	6023      	str	r3, [r4, #0]
 8001efe:	e785      	b.n	8001e0c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f00:	692a      	ldr	r2, [r5, #16]
 8001f02:	4b5a      	ldr	r3, [pc, #360]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8001f04:	b16a      	cbz	r2, 8001f22 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f0a:	f7ff fbf5 	bl	80016f8 <HAL_GetTick>
 8001f0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	079f      	lsls	r7, r3, #30
 8001f14:	d4ec      	bmi.n	8001ef0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7ff fbef 	bl	80016f8 <HAL_GetTick>
 8001f1a:	1b80      	subs	r0, r0, r6
 8001f1c:	2802      	cmp	r0, #2
 8001f1e:	d9f7      	bls.n	8001f10 <HAL_RCC_OscConfig+0x118>
 8001f20:	e7ab      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001f22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f24:	f7ff fbe8 	bl	80016f8 <HAL_GetTick>
 8001f28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	0798      	lsls	r0, r3, #30
 8001f2e:	f57f af6d 	bpl.w	8001e0c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f32:	f7ff fbe1 	bl	80016f8 <HAL_GetTick>
 8001f36:	1b80      	subs	r0, r0, r6
 8001f38:	2802      	cmp	r0, #2
 8001f3a:	d9f6      	bls.n	8001f2a <HAL_RCC_OscConfig+0x132>
 8001f3c:	e79d      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3e:	69aa      	ldr	r2, [r5, #24]
 8001f40:	4e49      	ldr	r6, [pc, #292]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f42:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <HAL_RCC_OscConfig+0x278>)
 8001f44:	b1da      	cbz	r2, 8001f7e <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fbd5 	bl	80016f8 <HAL_GetTick>
 8001f4e:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001f52:	079b      	lsls	r3, r3, #30
 8001f54:	d50d      	bpl.n	8001f72 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f56:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f5a:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_OscConfig+0x27c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f62:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001f64:	bf00      	nop
  }
  while (Delay --);
 8001f66:	9b01      	ldr	r3, [sp, #4]
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	9201      	str	r2, [sp, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f9      	bne.n	8001f64 <HAL_RCC_OscConfig+0x16c>
 8001f70:	e750      	b.n	8001e14 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff fbc1 	bl	80016f8 <HAL_GetTick>
 8001f76:	1b00      	subs	r0, r0, r4
 8001f78:	2802      	cmp	r0, #2
 8001f7a:	d9e9      	bls.n	8001f50 <HAL_RCC_OscConfig+0x158>
 8001f7c:	e77d      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001f7e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f80:	f7ff fbba 	bl	80016f8 <HAL_GetTick>
 8001f84:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f86:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001f88:	079f      	lsls	r7, r3, #30
 8001f8a:	f57f af43 	bpl.w	8001e14 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fbb3 	bl	80016f8 <HAL_GetTick>
 8001f92:	1b00      	subs	r0, r0, r4
 8001f94:	2802      	cmp	r0, #2
 8001f96:	d9f6      	bls.n	8001f86 <HAL_RCC_OscConfig+0x18e>
 8001f98:	e76f      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4c33      	ldr	r4, [pc, #204]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	69e3      	ldr	r3, [r4, #28]
 8001f9e:	00d8      	lsls	r0, r3, #3
 8001fa0:	d424      	bmi.n	8001fec <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8001fa2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	69e3      	ldr	r3, [r4, #28]
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001faa:	61e3      	str	r3, [r4, #28]
 8001fac:	69e3      	ldr	r3, [r4, #28]
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb6:	4e30      	ldr	r6, [pc, #192]	; (8002078 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	6833      	ldr	r3, [r6, #0]
 8001fba:	05d9      	lsls	r1, r3, #23
 8001fbc:	d518      	bpl.n	8001ff0 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbe:	68eb      	ldr	r3, [r5, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d126      	bne.n	8002012 <HAL_RCC_OscConfig+0x21a>
 8001fc4:	6a23      	ldr	r3, [r4, #32]
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001fcc:	f7ff fb94 	bl	80016f8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001fd4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd6:	6a23      	ldr	r3, [r4, #32]
 8001fd8:	079b      	lsls	r3, r3, #30
 8001fda:	d53f      	bpl.n	800205c <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8001fdc:	2f00      	cmp	r7, #0
 8001fde:	f43f af1d 	beq.w	8001e1c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	69e3      	ldr	r3, [r4, #28]
 8001fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	61e3      	str	r3, [r4, #28]
 8001fea:	e717      	b.n	8001e1c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001fec:	2700      	movs	r7, #0
 8001fee:	e7e2      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff0:	6833      	ldr	r3, [r6, #0]
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ff8:	f7ff fb7e 	bl	80016f8 <HAL_GetTick>
 8001ffc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	6833      	ldr	r3, [r6, #0]
 8002000:	05da      	lsls	r2, r3, #23
 8002002:	d4dc      	bmi.n	8001fbe <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002004:	f7ff fb78 	bl	80016f8 <HAL_GetTick>
 8002008:	eba0 0008 	sub.w	r0, r0, r8
 800200c:	2864      	cmp	r0, #100	; 0x64
 800200e:	d9f6      	bls.n	8001ffe <HAL_RCC_OscConfig+0x206>
 8002010:	e733      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002012:	b9ab      	cbnz	r3, 8002040 <HAL_RCC_OscConfig+0x248>
 8002014:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6223      	str	r3, [r4, #32]
 8002020:	6a23      	ldr	r3, [r4, #32]
 8002022:	f023 0304 	bic.w	r3, r3, #4
 8002026:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002028:	f7ff fb66 	bl	80016f8 <HAL_GetTick>
 800202c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202e:	6a23      	ldr	r3, [r4, #32]
 8002030:	0798      	lsls	r0, r3, #30
 8002032:	d5d3      	bpl.n	8001fdc <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002034:	f7ff fb60 	bl	80016f8 <HAL_GetTick>
 8002038:	1b80      	subs	r0, r0, r6
 800203a:	4540      	cmp	r0, r8
 800203c:	d9f7      	bls.n	800202e <HAL_RCC_OscConfig+0x236>
 800203e:	e71c      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002040:	2b05      	cmp	r3, #5
 8002042:	6a23      	ldr	r3, [r4, #32]
 8002044:	d103      	bne.n	800204e <HAL_RCC_OscConfig+0x256>
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6223      	str	r3, [r4, #32]
 800204c:	e7ba      	b.n	8001fc4 <HAL_RCC_OscConfig+0x1cc>
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	6223      	str	r3, [r4, #32]
 8002054:	6a23      	ldr	r3, [r4, #32]
 8002056:	f023 0304 	bic.w	r3, r3, #4
 800205a:	e7b6      	b.n	8001fca <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205c:	f7ff fb4c 	bl	80016f8 <HAL_GetTick>
 8002060:	1b80      	subs	r0, r0, r6
 8002062:	4540      	cmp	r0, r8
 8002064:	d9b7      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1de>
 8002066:	e708      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
 8002068:	40021000 	.word	0x40021000
 800206c:	42420000 	.word	0x42420000
 8002070:	42420480 	.word	0x42420480
 8002074:	20000000 	.word	0x20000000
 8002078:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCC_OscConfig+0x330>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	461c      	mov	r4, r3
 8002082:	f002 020c 	and.w	r2, r2, #12
 8002086:	2a08      	cmp	r2, #8
 8002088:	d03d      	beq.n	8002106 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208a:	2300      	movs	r3, #0
 800208c:	4e27      	ldr	r6, [pc, #156]	; (800212c <HAL_RCC_OscConfig+0x334>)
 800208e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002090:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002092:	d12b      	bne.n	80020ec <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002094:	f7ff fb30 	bl	80016f8 <HAL_GetTick>
 8002098:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	0199      	lsls	r1, r3, #6
 800209e:	d41f      	bmi.n	80020e0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a0:	6a2b      	ldr	r3, [r5, #32]
 80020a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a8:	6862      	ldr	r2, [r4, #4]
 80020aa:	68a9      	ldr	r1, [r5, #8]
 80020ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80020b0:	430a      	orrs	r2, r1
 80020b2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80020b6:	6862      	ldr	r2, [r4, #4]
 80020b8:	430b      	orrs	r3, r1
 80020ba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80020be:	4313      	orrs	r3, r2
 80020c0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80020c2:	2301      	movs	r3, #1
 80020c4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80020c6:	f7ff fb17 	bl	80016f8 <HAL_GetTick>
 80020ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	019a      	lsls	r2, r3, #6
 80020d0:	f53f aea8 	bmi.w	8001e24 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff fb10 	bl	80016f8 <HAL_GetTick>
 80020d8:	1b40      	subs	r0, r0, r5
 80020da:	2802      	cmp	r0, #2
 80020dc:	d9f6      	bls.n	80020cc <HAL_RCC_OscConfig+0x2d4>
 80020de:	e6cc      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff fb0a 	bl	80016f8 <HAL_GetTick>
 80020e4:	1bc0      	subs	r0, r0, r7
 80020e6:	2802      	cmp	r0, #2
 80020e8:	d9d7      	bls.n	800209a <HAL_RCC_OscConfig+0x2a2>
 80020ea:	e6c6      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80020ec:	f7ff fb04 	bl	80016f8 <HAL_GetTick>
 80020f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	019b      	lsls	r3, r3, #6
 80020f6:	f57f ae95 	bpl.w	8001e24 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fa:	f7ff fafd 	bl	80016f8 <HAL_GetTick>
 80020fe:	1b40      	subs	r0, r0, r5
 8002100:	2802      	cmp	r0, #2
 8002102:	d9f6      	bls.n	80020f2 <HAL_RCC_OscConfig+0x2fa>
 8002104:	e6b9      	b.n	8001e7a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002106:	2801      	cmp	r0, #1
 8002108:	f43f aeb8 	beq.w	8001e7c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 800210c:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	6a2a      	ldr	r2, [r5, #32]
 8002110:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002114:	4291      	cmp	r1, r2
 8002116:	f47f ae9b 	bne.w	8001e50 <HAL_RCC_OscConfig+0x58>
 800211a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800211c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002120:	4293      	cmp	r3, r2
 8002122:	f43f ae7f 	beq.w	8001e24 <HAL_RCC_OscConfig+0x2c>
 8002126:	e693      	b.n	8001e50 <HAL_RCC_OscConfig+0x58>
 8002128:	40021000 	.word	0x40021000
 800212c:	42420060 	.word	0x42420060

08002130 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002130:	490d      	ldr	r1, [pc, #52]	; (8002168 <HAL_RCC_GetSysClockFreq+0x38>)
 8002132:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002134:	f003 020c 	and.w	r2, r3, #12
 8002138:	2a08      	cmp	r2, #8
 800213a:	d112      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800213c:	480b      	ldr	r0, [pc, #44]	; (800216c <HAL_RCC_GetSysClockFreq+0x3c>)
 800213e:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002142:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002144:	5c82      	ldrb	r2, [r0, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002146:	d509      	bpl.n	800215c <HAL_RCC_GetSysClockFreq+0x2c>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002148:	4809      	ldr	r0, [pc, #36]	; (8002170 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800214a:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800214c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800214e:	4a09      	ldr	r2, [pc, #36]	; (8002174 <HAL_RCC_GetSysClockFreq+0x44>)
 8002150:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002154:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002156:	fbb0 f0f3 	udiv	r0, r0, r3
 800215a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800215c:	4806      	ldr	r0, [pc, #24]	; (8002178 <HAL_RCC_GetSysClockFreq+0x48>)
 800215e:	4350      	muls	r0, r2
 8002160:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002162:	4803      	ldr	r0, [pc, #12]	; (8002170 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	08007670 	.word	0x08007670
 8002170:	007a1200 	.word	0x007a1200
 8002174:	08007680 	.word	0x08007680
 8002178:	003d0900 	.word	0x003d0900

0800217c <HAL_RCC_ClockConfig>:
{
 800217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002180:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002182:	4604      	mov	r4, r0
 8002184:	b910      	cbnz	r0, 800218c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002186:	2001      	movs	r0, #1
}
 8002188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4a44      	ldr	r2, [pc, #272]	; (80022a0 <HAL_RCC_ClockConfig+0x124>)
 800218e:	6813      	ldr	r3, [r2, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	428b      	cmp	r3, r1
 8002196:	d328      	bcc.n	80021ea <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002198:	6821      	ldr	r1, [r4, #0]
 800219a:	078e      	lsls	r6, r1, #30
 800219c:	d430      	bmi.n	8002200 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219e:	07ca      	lsls	r2, r1, #31
 80021a0:	d443      	bmi.n	800222a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a2:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_RCC_ClockConfig+0x124>)
 80021a4:	6813      	ldr	r3, [r2, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	42ab      	cmp	r3, r5
 80021ac:	d865      	bhi.n	800227a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ae:	6822      	ldr	r2, [r4, #0]
 80021b0:	4d3c      	ldr	r5, [pc, #240]	; (80022a4 <HAL_RCC_ClockConfig+0x128>)
 80021b2:	f012 0f04 	tst.w	r2, #4
 80021b6:	d16c      	bne.n	8002292 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	0713      	lsls	r3, r2, #28
 80021ba:	d506      	bpl.n	80021ca <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021bc:	686b      	ldr	r3, [r5, #4]
 80021be:	6922      	ldr	r2, [r4, #16]
 80021c0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021c8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ca:	f7ff ffb1 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80021ce:	686b      	ldr	r3, [r5, #4]
 80021d0:	4a35      	ldr	r2, [pc, #212]	; (80022a8 <HAL_RCC_ClockConfig+0x12c>)
 80021d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	40d8      	lsrs	r0, r3
 80021da:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_RCC_ClockConfig+0x130>)
 80021dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCC_ClockConfig+0x134>)
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	f7ff fa47 	bl	8001674 <HAL_InitTick>
  return HAL_OK;
 80021e6:	2000      	movs	r0, #0
 80021e8:	e7ce      	b.n	8002188 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	f023 0307 	bic.w	r3, r3, #7
 80021f0:	430b      	orrs	r3, r1
 80021f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f4:	6813      	ldr	r3, [r2, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	428b      	cmp	r3, r1
 80021fc:	d1c3      	bne.n	8002186 <HAL_RCC_ClockConfig+0xa>
 80021fe:	e7cb      	b.n	8002198 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <HAL_RCC_ClockConfig+0x128>)
 8002202:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002206:	bf1e      	ittt	ne
 8002208:	685a      	ldrne	r2, [r3, #4]
 800220a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800220e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002212:	bf42      	ittt	mi
 8002214:	685a      	ldrmi	r2, [r3, #4]
 8002216:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800221a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	68a0      	ldr	r0, [r4, #8]
 8002220:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002224:	4302      	orrs	r2, r0
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	e7b9      	b.n	800219e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	6862      	ldr	r2, [r4, #4]
 800222c:	4e1d      	ldr	r6, [pc, #116]	; (80022a4 <HAL_RCC_ClockConfig+0x128>)
 800222e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002230:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002232:	d11a      	bne.n	800226a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002234:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002238:	d0a5      	beq.n	8002186 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002240:	f023 0303 	bic.w	r3, r3, #3
 8002244:	4313      	orrs	r3, r2
 8002246:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002248:	f7ff fa56 	bl	80016f8 <HAL_GetTick>
 800224c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	6873      	ldr	r3, [r6, #4]
 8002250:	6862      	ldr	r2, [r4, #4]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800225a:	d0a2      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225c:	f7ff fa4c 	bl	80016f8 <HAL_GetTick>
 8002260:	1bc0      	subs	r0, r0, r7
 8002262:	4540      	cmp	r0, r8
 8002264:	d9f3      	bls.n	800224e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002266:	2003      	movs	r0, #3
 8002268:	e78e      	b.n	8002188 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	2a02      	cmp	r2, #2
 800226c:	d102      	bne.n	8002274 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002272:	e7e1      	b.n	8002238 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	f013 0f02 	tst.w	r3, #2
 8002278:	e7de      	b.n	8002238 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	6813      	ldr	r3, [r2, #0]
 800227c:	f023 0307 	bic.w	r3, r3, #7
 8002280:	432b      	orrs	r3, r5
 8002282:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	42ab      	cmp	r3, r5
 800228c:	f47f af7b 	bne.w	8002186 <HAL_RCC_ClockConfig+0xa>
 8002290:	e78d      	b.n	80021ae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002292:	686b      	ldr	r3, [r5, #4]
 8002294:	68e1      	ldr	r1, [r4, #12]
 8002296:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800229a:	430b      	orrs	r3, r1
 800229c:	606b      	str	r3, [r5, #4]
 800229e:	e78b      	b.n	80021b8 <HAL_RCC_ClockConfig+0x3c>
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08007658 	.word	0x08007658
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000008 	.word	0x20000008

080022b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80022be:	5cd3      	ldrb	r3, [r2, r3]
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80022c2:	6810      	ldr	r0, [r2, #0]
}
 80022c4:	40d8      	lsrs	r0, r3
 80022c6:	4770      	bx	lr
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08007668 	.word	0x08007668
 80022d0:	20000000 	.word	0x20000000

080022d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80022de:	5cd3      	ldrb	r3, [r2, r3]
 80022e0:	4a03      	ldr	r2, [pc, #12]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80022e2:	6810      	ldr	r0, [r2, #0]
}
 80022e4:	40d8      	lsrs	r0, r3
 80022e6:	4770      	bx	lr
 80022e8:	40021000 	.word	0x40021000
 80022ec:	08007668 	.word	0x08007668
 80022f0:	20000000 	.word	0x20000000

080022f4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022f4:	6803      	ldr	r3, [r0, #0]
{
 80022f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022fa:	07d9      	lsls	r1, r3, #31
{
 80022fc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022fe:	d520      	bpl.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002300:	4c35      	ldr	r4, [pc, #212]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002302:	69e3      	ldr	r3, [r4, #28]
 8002304:	00da      	lsls	r2, r3, #3
 8002306:	d432      	bmi.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002308:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	69e3      	ldr	r3, [r4, #28]
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	61e3      	str	r3, [r4, #28]
 8002312:	69e3      	ldr	r3, [r4, #28]
 8002314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4e2f      	ldr	r6, [pc, #188]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800231e:	6833      	ldr	r3, [r6, #0]
 8002320:	05db      	lsls	r3, r3, #23
 8002322:	d526      	bpl.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002324:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002326:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800232a:	d136      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800232c:	6a23      	ldr	r3, [r4, #32]
 800232e:	686a      	ldr	r2, [r5, #4]
 8002330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002334:	4313      	orrs	r3, r2
 8002336:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002338:	b11f      	cbz	r7, 8002342 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233a:	69e3      	ldr	r3, [r4, #28]
 800233c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002340:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002342:	6828      	ldr	r0, [r5, #0]
 8002344:	0783      	lsls	r3, r0, #30
 8002346:	d506      	bpl.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002348:	4923      	ldr	r1, [pc, #140]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800234a:	68ab      	ldr	r3, [r5, #8]
 800234c:	684a      	ldr	r2, [r1, #4]
 800234e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002352:	431a      	orrs	r2, r3
 8002354:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002356:	f010 0010 	ands.w	r0, r0, #16
 800235a:	d01b      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800235c:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800235e:	68e9      	ldr	r1, [r5, #12]
 8002360:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002362:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002364:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002368:	430b      	orrs	r3, r1
 800236a:	6053      	str	r3, [r2, #4]
 800236c:	e012      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 800236e:	2700      	movs	r7, #0
 8002370:	e7d4      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002372:	6833      	ldr	r3, [r6, #0]
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800237a:	f7ff f9bd 	bl	80016f8 <HAL_GetTick>
 800237e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	6833      	ldr	r3, [r6, #0]
 8002382:	05d8      	lsls	r0, r3, #23
 8002384:	d4ce      	bmi.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002386:	f7ff f9b7 	bl	80016f8 <HAL_GetTick>
 800238a:	eba0 0008 	sub.w	r0, r0, r8
 800238e:	2864      	cmp	r0, #100	; 0x64
 8002390:	d9f6      	bls.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002392:	2003      	movs	r0, #3
}
 8002394:	b002      	add	sp, #8
 8002396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800239a:	686a      	ldr	r2, [r5, #4]
 800239c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d0c3      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80023a4:	2001      	movs	r0, #1
 80023a6:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023a8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80023aa:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ac:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023b2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80023b4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023b6:	07d9      	lsls	r1, r3, #31
 80023b8:	d5b8      	bpl.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80023ba:	f7ff f99d 	bl	80016f8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80023c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	6a23      	ldr	r3, [r4, #32]
 80023c6:	079a      	lsls	r2, r3, #30
 80023c8:	d4b0      	bmi.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7ff f995 	bl	80016f8 <HAL_GetTick>
 80023ce:	1b80      	subs	r0, r0, r6
 80023d0:	4540      	cmp	r0, r8
 80023d2:	d9f7      	bls.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80023d4:	e7dd      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42420440 	.word	0x42420440

080023e4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d11c      	bne.n	8002426 <HAL_TIM_Base_Start_IT+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	2302      	movs	r3, #2
 80023ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f2:	6803      	ldr	r3, [r0, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023fc:	4a0b      	ldr	r2, [pc, #44]	; (800242c <HAL_TIM_Base_Start_IT+0x48>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d006      	beq.n	8002410 <HAL_TIM_Base_Start_IT+0x2c>
 8002402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002406:	d003      	beq.n	8002410 <HAL_TIM_Base_Start_IT+0x2c>
 8002408:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800240c:	4293      	cmp	r3, r2
 800240e:	d104      	bne.n	800241a <HAL_TIM_Base_Start_IT+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002416:	2a06      	cmp	r2, #6
 8002418:	d003      	beq.n	8002422 <HAL_TIM_Base_Start_IT+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	f042 0201 	orr.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002422:	2000      	movs	r0, #0
}
 8002424:	4770      	bx	lr
    return HAL_ERROR;
 8002426:	2001      	movs	r0, #1
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40012c00 	.word	0x40012c00

08002430 <HAL_TIM_OC_DelayElapsedCallback>:
 8002430:	4770      	bx	lr

08002432 <HAL_TIM_IC_CaptureCallback>:
 8002432:	4770      	bx	lr

08002434 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002434:	4770      	bx	lr

08002436 <HAL_TIM_TriggerCallback>:
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 8002438:	6803      	ldr	r3, [r0, #0]
{
 800243a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800243c:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800243e:	691e      	ldr	r6, [r3, #16]
{
 8002440:	4604      	mov	r4, r0

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002442:	07b1      	lsls	r1, r6, #30
 8002444:	d50d      	bpl.n	8002462 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002446:	07aa      	lsls	r2, r5, #30
 8002448:	d50b      	bpl.n	8002462 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800244a:	f06f 0202 	mvn.w	r2, #2
 800244e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002450:	2201      	movs	r2, #1
 8002452:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	079b      	lsls	r3, r3, #30
 8002458:	d069      	beq.n	800252e <HAL_TIM_IRQHandler+0xf6>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800245a:	f7ff ffea 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	2300      	movs	r3, #0
 8002460:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002462:	0771      	lsls	r1, r6, #29
 8002464:	d510      	bpl.n	8002488 <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002466:	076a      	lsls	r2, r5, #29
 8002468:	d50e      	bpl.n	8002488 <HAL_TIM_IRQHandler+0x50>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800246a:	f06f 0204 	mvn.w	r2, #4
 800246e:	6823      	ldr	r3, [r4, #0]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002470:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002474:	2202      	movs	r2, #2
 8002476:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800247e:	d05c      	beq.n	800253a <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002480:	f7ff ffd7 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002484:	2300      	movs	r3, #0
 8002486:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002488:	0733      	lsls	r3, r6, #28
 800248a:	d50f      	bpl.n	80024ac <HAL_TIM_IRQHandler+0x74>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800248c:	0728      	lsls	r0, r5, #28
 800248e:	d50d      	bpl.n	80024ac <HAL_TIM_IRQHandler+0x74>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002490:	f06f 0208 	mvn.w	r2, #8
 8002494:	6823      	ldr	r3, [r4, #0]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249a:	2204      	movs	r2, #4
 800249c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	0799      	lsls	r1, r3, #30
 80024a2:	d050      	beq.n	8002546 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 80024a4:	f7ff ffc5 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a8:	2300      	movs	r3, #0
 80024aa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024ac:	06f2      	lsls	r2, r6, #27
 80024ae:	d510      	bpl.n	80024d2 <HAL_TIM_IRQHandler+0x9a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024b0:	06eb      	lsls	r3, r5, #27
 80024b2:	d50e      	bpl.n	80024d2 <HAL_TIM_IRQHandler+0x9a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024b4:	f06f 0210 	mvn.w	r2, #16
 80024b8:	6823      	ldr	r3, [r4, #0]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024be:	2208      	movs	r2, #8
 80024c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80024c8:	d043      	beq.n	8002552 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	f7ff ffb2 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	2300      	movs	r3, #0
 80024d0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024d2:	07f0      	lsls	r0, r6, #31
 80024d4:	d508      	bpl.n	80024e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024d6:	07e9      	lsls	r1, r5, #31
 80024d8:	d506      	bpl.n	80024e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024da:	f06f 0201 	mvn.w	r2, #1
 80024de:	6823      	ldr	r3, [r4, #0]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80024e4:	f7fe ff4e 	bl	8001384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024e8:	0632      	lsls	r2, r6, #24
 80024ea:	d508      	bpl.n	80024fe <HAL_TIM_IRQHandler+0xc6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024ec:	062b      	lsls	r3, r5, #24
 80024ee:	d506      	bpl.n	80024fe <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f4:	6823      	ldr	r3, [r4, #0]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80024fa:	f000 f966 	bl	80027ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024fe:	0670      	lsls	r0, r6, #25
 8002500:	d508      	bpl.n	8002514 <HAL_TIM_IRQHandler+0xdc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002502:	0669      	lsls	r1, r5, #25
 8002504:	d506      	bpl.n	8002514 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800250a:	6823      	ldr	r3, [r4, #0]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800250c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800250e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002510:	f7ff ff91 	bl	8002436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002514:	06b2      	lsls	r2, r6, #26
 8002516:	d522      	bpl.n	800255e <HAL_TIM_IRQHandler+0x126>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002518:	06ab      	lsls	r3, r5, #26
 800251a:	d520      	bpl.n	800255e <HAL_TIM_IRQHandler+0x126>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800251c:	f06f 0220 	mvn.w	r2, #32
 8002520:	6823      	ldr	r3, [r4, #0]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002522:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002528:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800252a:	f000 b94d 	b.w	80027c8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	f7ff ff7f 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff ff7e 	bl	8002434 <HAL_TIM_PWM_PulseFinishedCallback>
 8002538:	e791      	b.n	800245e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	f7ff ff79 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253e:	4620      	mov	r0, r4
 8002540:	f7ff ff78 	bl	8002434 <HAL_TIM_PWM_PulseFinishedCallback>
 8002544:	e79e      	b.n	8002484 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	f7ff ff73 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254a:	4620      	mov	r0, r4
 800254c:	f7ff ff72 	bl	8002434 <HAL_TIM_PWM_PulseFinishedCallback>
 8002550:	e7aa      	b.n	80024a8 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	f7ff ff6d 	bl	8002430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002556:	4620      	mov	r0, r4
 8002558:	f7ff ff6c 	bl	8002434 <HAL_TIM_PWM_PulseFinishedCallback>
 800255c:	e7b7      	b.n	80024ce <HAL_TIM_IRQHandler+0x96>
}
 800255e:	bd70      	pop	{r4, r5, r6, pc}

08002560 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002560:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <TIM_Base_SetConfig+0x68>)
{
 8002562:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002564:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8002566:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002568:	d005      	beq.n	8002576 <TIM_Base_SetConfig+0x16>
 800256a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800256e:	d002      	beq.n	8002576 <TIM_Base_SetConfig+0x16>
 8002570:	4c16      	ldr	r4, [pc, #88]	; (80025cc <TIM_Base_SetConfig+0x6c>)
 8002572:	42a0      	cmp	r0, r4
 8002574:	d110      	bne.n	8002598 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002576:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800257c:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800257e:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002582:	d005      	beq.n	8002590 <TIM_Base_SetConfig+0x30>
 8002584:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002588:	d002      	beq.n	8002590 <TIM_Base_SetConfig+0x30>
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <TIM_Base_SetConfig+0x6c>)
 800258c:	4290      	cmp	r0, r2
 800258e:	d103      	bne.n	8002598 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002590:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002596:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002598:	694a      	ldr	r2, [r1, #20]
 800259a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800259e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80025a0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025a2:	688b      	ldr	r3, [r1, #8]
 80025a4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a6:	680b      	ldr	r3, [r1, #0]
 80025a8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <TIM_Base_SetConfig+0x68>)
 80025ac:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025ae:	bf04      	itt	eq
 80025b0:	690b      	ldreq	r3, [r1, #16]
 80025b2:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b4:	2301      	movs	r3, #1
 80025b6:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025b8:	6903      	ldr	r3, [r0, #16]
 80025ba:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025bc:	bf42      	ittt	mi
 80025be:	6903      	ldrmi	r3, [r0, #16]
 80025c0:	f023 0301 	bicmi.w	r3, r3, #1
 80025c4:	6103      	strmi	r3, [r0, #16]
  }
}
 80025c6:	bd10      	pop	{r4, pc}
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40000400 	.word	0x40000400

080025d0 <HAL_TIM_Base_Init>:
{
 80025d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80025d2:	4604      	mov	r4, r0
 80025d4:	b330      	cbz	r0, 8002624 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80025d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80025da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025de:	b91b      	cbnz	r3, 80025e8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80025e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80025e4:	f7fe ff52 	bl	800148c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80025e8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ea:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f0:	1d21      	adds	r1, r4, #4
 80025f2:	f7ff ffb5 	bl	8002560 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f6:	2301      	movs	r3, #1
  return HAL_OK;
 80025f8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002602:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002606:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800260a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002616:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800261a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800261e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002622:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
 8002626:	e7fc      	b.n	8002622 <HAL_TIM_Base_Init+0x52>

08002628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002628:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800262a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800262c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800262e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002632:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002636:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002638:	6082      	str	r2, [r0, #8]
}
 800263a:	bd10      	pop	{r4, pc}

0800263c <HAL_TIM_ConfigClockSource>:
{
 800263c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800263e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002642:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002644:	2b01      	cmp	r3, #1
 8002646:	f04f 0302 	mov.w	r3, #2
 800264a:	f000 8091 	beq.w	8002770 <HAL_TIM_ConfigClockSource+0x134>
 800264e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002650:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002654:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002658:	6800      	ldr	r0, [r0, #0]
 800265a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800265c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002660:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002664:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002666:	680b      	ldr	r3, [r1, #0]
 8002668:	2b60      	cmp	r3, #96	; 0x60
 800266a:	d052      	beq.n	8002712 <HAL_TIM_ConfigClockSource+0xd6>
 800266c:	d833      	bhi.n	80026d6 <HAL_TIM_ConfigClockSource+0x9a>
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d067      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x106>
 8002672:	d816      	bhi.n	80026a2 <HAL_TIM_ConfigClockSource+0x66>
 8002674:	2b20      	cmp	r3, #32
 8002676:	d00d      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x58>
 8002678:	d80a      	bhi.n	8002690 <HAL_TIM_ConfigClockSource+0x54>
 800267a:	f033 0110 	bics.w	r1, r3, #16
 800267e:	d009      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8002680:	2301      	movs	r3, #1
 8002682:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002686:	2300      	movs	r3, #0
 8002688:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800268c:	4610      	mov	r0, r2
 800268e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002690:	2b30      	cmp	r3, #48	; 0x30
 8002692:	d1f5      	bne.n	8002680 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8002694:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002696:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800269a:	4313      	orrs	r3, r2
 800269c:	f043 0307 	orr.w	r3, r3, #7
 80026a0:	e017      	b.n	80026d2 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80026a2:	2b50      	cmp	r3, #80	; 0x50
 80026a4:	d1ec      	bne.n	8002680 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a6:	684a      	ldr	r2, [r1, #4]
 80026a8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80026aa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ac:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ae:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026b2:	f025 0501 	bic.w	r5, r5, #1
 80026b6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80026ba:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026c0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80026c4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80026c6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80026c8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026ce:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80026d2:	6083      	str	r3, [r0, #8]
 80026d4:	e011      	b.n	80026fa <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026da:	d00e      	beq.n	80026fa <HAL_TIM_ConfigClockSource+0xbe>
 80026dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e0:	d00d      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xc2>
 80026e2:	2b70      	cmp	r3, #112	; 0x70
 80026e4:	d1cc      	bne.n	8002680 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80026e6:	68cb      	ldr	r3, [r1, #12]
 80026e8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80026ec:	f7ff ff9c 	bl	8002628 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026f0:	6822      	ldr	r2, [r4, #0]
 80026f2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026f8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026fa:	2200      	movs	r2, #0
 80026fc:	e7c0      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	68cb      	ldr	r3, [r1, #12]
 8002700:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002704:	f7ff ff90 	bl	8002628 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002708:	6822      	ldr	r2, [r4, #0]
 800270a:	6893      	ldr	r3, [r2, #8]
 800270c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002710:	e7f2      	b.n	80026f8 <HAL_TIM_ConfigClockSource+0xbc>
  tmpccer = TIMx->CCER;
 8002712:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002714:	684d      	ldr	r5, [r1, #4]
 8002716:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002718:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800271a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800271e:	f021 0110 	bic.w	r1, r1, #16
 8002722:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002724:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002726:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800272a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800272e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002732:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002734:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002736:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800273c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002740:	e7c7      	b.n	80026d2 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002742:	684a      	ldr	r2, [r1, #4]
 8002744:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002746:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002748:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800274a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800274e:	f025 0501 	bic.w	r5, r5, #1
 8002752:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002754:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002756:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800275c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002760:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002762:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002764:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800276a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800276e:	e7b0      	b.n	80026d2 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8002770:	461a      	mov	r2, r3
 8002772:	e78b      	b.n	800268c <HAL_TIM_ConfigClockSource+0x50>

08002774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002774:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002776:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 800277a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800277c:	2a01      	cmp	r2, #1
 800277e:	f04f 0002 	mov.w	r0, #2
 8002782:	d01e      	beq.n	80027c2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002784:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002786:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800278a:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800278c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800278e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002792:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002794:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002796:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002798:	4c0a      	ldr	r4, [pc, #40]	; (80027c4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800279a:	42a2      	cmp	r2, r4
 800279c:	d006      	beq.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0x38>
 800279e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80027a2:	d003      	beq.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0x38>
 80027a4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80027a8:	42a2      	cmp	r2, r4
 80027aa:	d104      	bne.n	80027b6 <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027ac:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027ae:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027b2:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027b4:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027b6:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 80027b8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80027be:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 80027c2:	bd30      	pop	{r4, r5, pc}
 80027c4:	40012c00 	.word	0x40012c00

080027c8 <HAL_TIMEx_CommutCallback>:
 80027c8:	4770      	bx	lr

080027ca <HAL_TIMEx_BreakCallback>:
 80027ca:	4770      	bx	lr

080027cc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027cc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ce:	f102 030c 	add.w	r3, r2, #12
 80027d2:	e853 3f00 	ldrex	r3, [r3]
 80027d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027da:	320c      	adds	r2, #12
 80027dc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80027e0:	6802      	ldr	r2, [r0, #0]
 80027e2:	2900      	cmp	r1, #0
 80027e4:	d1f2      	bne.n	80027cc <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e6:	f102 0314 	add.w	r3, r2, #20
 80027ea:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	f102 0c14 	add.w	ip, r2, #20
 80027f6:	e84c 3100 	strex	r1, r3, [ip]
 80027fa:	2900      	cmp	r1, #0
 80027fc:	d1f3      	bne.n	80027e6 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002800:	2b01      	cmp	r3, #1
 8002802:	d10b      	bne.n	800281c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	f102 030c 	add.w	r3, r2, #12
 8002808:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800280c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002810:	f102 0c0c 	add.w	ip, r2, #12
 8002814:	e84c 3100 	strex	r1, r3, [ip]
 8002818:	2900      	cmp	r1, #0
 800281a:	d1f3      	bne.n	8002804 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800281c:	2320      	movs	r3, #32
 800281e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002822:	2300      	movs	r3, #0
 8002824:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002826:	4770      	bx	lr

08002828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002828:	b510      	push	{r4, lr}
 800282a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800282c:	6803      	ldr	r3, [r0, #0]
 800282e:	68c1      	ldr	r1, [r0, #12]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002836:	430a      	orrs	r2, r1
 8002838:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800283a:	6882      	ldr	r2, [r0, #8]
 800283c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800283e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002840:	4302      	orrs	r2, r0
 8002842:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002844:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002848:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800284c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800284e:	430a      	orrs	r2, r1
 8002850:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	69a1      	ldr	r1, [r4, #24]
 8002856:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800285a:	430a      	orrs	r2, r1
 800285c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800285e:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <UART_SetConfig+0x70>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d115      	bne.n	8002890 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002864:	f7ff fd36 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002868:	2319      	movs	r3, #25
 800286a:	4343      	muls	r3, r0
 800286c:	6862      	ldr	r2, [r4, #4]
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	fbb3 f3f2 	udiv	r3, r3, r2
 8002876:	2264      	movs	r2, #100	; 0x64
 8002878:	fbb3 f1f2 	udiv	r1, r3, r2
 800287c:	fb02 3311 	mls	r3, r2, r1, r3
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	3332      	adds	r3, #50	; 0x32
 8002884:	fbb3 f3f2 	udiv	r3, r3, r2
 8002888:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800288c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 800288e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002890:	f7ff fd10 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 8002894:	e7e8      	b.n	8002868 <UART_SetConfig+0x40>
 8002896:	bf00      	nop
 8002898:	40013800 	.word	0x40013800

0800289c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800289c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800289e:	4604      	mov	r4, r0
 80028a0:	460d      	mov	r5, r1
 80028a2:	4617      	mov	r7, r2
 80028a4:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a6:	6822      	ldr	r2, [r4, #0]
 80028a8:	6813      	ldr	r3, [r2, #0]
 80028aa:	ea35 0303 	bics.w	r3, r5, r3
 80028ae:	d101      	bne.n	80028b4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80028b0:	2000      	movs	r0, #0
 80028b2:	e021      	b.n	80028f8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80028b4:	1c70      	adds	r0, r6, #1
 80028b6:	d0f7      	beq.n	80028a8 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b8:	f7fe ff1e 	bl	80016f8 <HAL_GetTick>
 80028bc:	1bc0      	subs	r0, r0, r7
 80028be:	4286      	cmp	r6, r0
 80028c0:	d31c      	bcc.n	80028fc <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 80028c2:	b1de      	cbz	r6, 80028fc <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	0751      	lsls	r1, r2, #29
 80028ca:	d5ec      	bpl.n	80028a6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80028cc:	2d80      	cmp	r5, #128	; 0x80
 80028ce:	d0ea      	beq.n	80028a6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80028d0:	2d40      	cmp	r5, #64	; 0x40
 80028d2:	d0e8      	beq.n	80028a6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	0712      	lsls	r2, r2, #28
 80028d8:	d5e5      	bpl.n	80028a6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028da:	2500      	movs	r5, #0
 80028dc:	9501      	str	r5, [sp, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 80028e0:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028e2:	9201      	str	r2, [sp, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80028ea:	f7ff ff6f 	bl	80027cc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028ee:	2308      	movs	r3, #8
          return HAL_ERROR;
 80028f0:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028f2:	6463      	str	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(huart);
 80028f4:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
}
 80028f8:	b003      	add	sp, #12
 80028fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80028fc:	2003      	movs	r0, #3
 80028fe:	e7fb      	b.n	80028f8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08002900 <HAL_UART_Init>:
{
 8002900:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002902:	4604      	mov	r4, r0
 8002904:	b348      	cbz	r0, 800295a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002906:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800290a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800290e:	b91b      	cbnz	r3, 8002918 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002910:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8002914:	f7fe fdd8 	bl	80014c8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002918:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800291a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800291c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8002920:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002922:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002928:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800292a:	f7ff ff7d 	bl	8002828 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002940:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002948:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800294a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294c:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800294e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002952:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002956:	6360      	str	r0, [r4, #52]	; 0x34
}
 8002958:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800295a:	2001      	movs	r0, #1
 800295c:	e7fc      	b.n	8002958 <HAL_UART_Init+0x58>

0800295e <HAL_UART_Transmit>:
{
 800295e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002962:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002964:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002968:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800296a:	2b20      	cmp	r3, #32
{
 800296c:	460e      	mov	r6, r1
 800296e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002970:	d13f      	bne.n	80029f2 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8002972:	2900      	cmp	r1, #0
 8002974:	d03f      	beq.n	80029f6 <HAL_UART_Transmit+0x98>
 8002976:	2a00      	cmp	r2, #0
 8002978:	d03d      	beq.n	80029f6 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800297a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297c:	2500      	movs	r5, #0
 800297e:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002980:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8002984:	f7fe feb8 	bl	80016f8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002988:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800298a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8002990:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002992:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002994:	d103      	bne.n	800299e <HAL_UART_Transmit+0x40>
 8002996:	6923      	ldr	r3, [r4, #16]
 8002998:	b90b      	cbnz	r3, 800299e <HAL_UART_Transmit+0x40>
 800299a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800299c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800299e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	b95b      	cbnz	r3, 80029bc <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029a4:	464b      	mov	r3, r9
 80029a6:	4642      	mov	r2, r8
 80029a8:	2140      	movs	r1, #64	; 0x40
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff ff76 	bl	800289c <UART_WaitOnFlagUntilTimeout.constprop.0>
 80029b0:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 80029b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b6:	b958      	cbnz	r0, 80029d0 <HAL_UART_Transmit+0x72>
}
 80029b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029bc:	464b      	mov	r3, r9
 80029be:	4642      	mov	r2, r8
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff ff6a 	bl	800289c <UART_WaitOnFlagUntilTimeout.constprop.0>
 80029c8:	b120      	cbz	r0, 80029d4 <HAL_UART_Transmit+0x76>
        huart->gState = HAL_UART_STATE_READY;
 80029ca:	2320      	movs	r3, #32
 80029cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      return HAL_TIMEOUT;
 80029d0:	2003      	movs	r0, #3
 80029d2:	e7f1      	b.n	80029b8 <HAL_UART_Transmit+0x5a>
      if (pdata8bits == NULL)
 80029d4:	6822      	ldr	r2, [r4, #0]
 80029d6:	b94e      	cbnz	r6, 80029ec <HAL_UART_Transmit+0x8e>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80029dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029e0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80029e2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80029e4:	3901      	subs	r1, #1
 80029e6:	b289      	uxth	r1, r1
 80029e8:	84e1      	strh	r1, [r4, #38]	; 0x26
 80029ea:	e7d8      	b.n	800299e <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ec:	f816 3b01 	ldrb.w	r3, [r6], #1
 80029f0:	e7f6      	b.n	80029e0 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80029f2:	2002      	movs	r0, #2
 80029f4:	e7e0      	b.n	80029b8 <HAL_UART_Transmit+0x5a>
      return  HAL_ERROR;
 80029f6:	2001      	movs	r0, #1
 80029f8:	e7de      	b.n	80029b8 <HAL_UART_Transmit+0x5a>

080029fa <HAL_UART_TxCpltCallback>:
 80029fa:	4770      	bx	lr

080029fc <HAL_UART_ErrorCallback>:
 80029fc:	4770      	bx	lr

080029fe <UART_DMAAbortOnError>:
{
 80029fe:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002a00:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a02:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002a04:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a06:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002a08:	f7ff fff8 	bl	80029fc <HAL_UART_ErrorCallback>
}
 8002a0c:	bd08      	pop	{r3, pc}

08002a0e <HAL_UARTEx_RxEventCallback>:
}
 8002a0e:	4770      	bx	lr

08002a10 <UART_Receive_IT>:
{
 8002a10:	b513      	push	{r0, r1, r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a12:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002a16:	2b22      	cmp	r3, #34	; 0x22
 8002a18:	d154      	bne.n	8002ac4 <UART_Receive_IT+0xb4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a1a:	6881      	ldr	r1, [r0, #8]
 8002a1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002a1e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002a22:	6802      	ldr	r2, [r0, #0]
 8002a24:	d13e      	bne.n	8002aa4 <UART_Receive_IT+0x94>
 8002a26:	6901      	ldr	r1, [r0, #16]
 8002a28:	2900      	cmp	r1, #0
 8002a2a:	d13e      	bne.n	8002aaa <UART_Receive_IT+0x9a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a2c:	6852      	ldr	r2, [r2, #4]
 8002a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a32:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8002a36:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8002a38:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002a3a:	3c01      	subs	r4, #1
 8002a3c:	b2a4      	uxth	r4, r4
 8002a3e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002a40:	2c00      	cmp	r4, #0
 8002a42:	d12d      	bne.n	8002aa0 <UART_Receive_IT+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a44:	6803      	ldr	r3, [r0, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	f022 0220 	bic.w	r2, r2, #32
 8002a4c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a54:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002a5e:	2320      	movs	r3, #32
 8002a60:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a64:	6344      	str	r4, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a66:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	6803      	ldr	r3, [r0, #0]
 8002a6c:	d127      	bne.n	8002abe <UART_Receive_IT+0xae>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6e:	6304      	str	r4, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	f103 020c 	add.w	r2, r3, #12
 8002a74:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a78:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7c:	f103 040c 	add.w	r4, r3, #12
 8002a80:	e844 2100 	strex	r1, r2, [r4]
 8002a84:	2900      	cmp	r1, #0
 8002a86:	d1f3      	bne.n	8002a70 <UART_Receive_IT+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	06d2      	lsls	r2, r2, #27
 8002a8c:	d505      	bpl.n	8002a9a <UART_Receive_IT+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a8e:	9101      	str	r1, [sp, #4]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	9201      	str	r2, [sp, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a9a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002a9c:	f7ff ffb7 	bl	8002a0e <HAL_UARTEx_RxEventCallback>
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	e010      	b.n	8002ac6 <UART_Receive_IT+0xb6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002aa4:	b939      	cbnz	r1, 8002ab6 <UART_Receive_IT+0xa6>
 8002aa6:	6901      	ldr	r1, [r0, #16]
 8002aa8:	b929      	cbnz	r1, 8002ab6 <UART_Receive_IT+0xa6>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aaa:	6852      	ldr	r2, [r2, #4]
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8002ab0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	e7bf      	b.n	8002a36 <UART_Receive_IT+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ab6:	6852      	ldr	r2, [r2, #4]
 8002ab8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002abc:	e7f7      	b.n	8002aae <UART_Receive_IT+0x9e>
        HAL_UART_RxCpltCallback(huart);
 8002abe:	f7fe fb3d 	bl	800113c <HAL_UART_RxCpltCallback>
 8002ac2:	e7ed      	b.n	8002aa0 <UART_Receive_IT+0x90>
    return HAL_BUSY;
 8002ac4:	2002      	movs	r0, #2
}
 8002ac6:	b002      	add	sp, #8
 8002ac8:	bd10      	pop	{r4, pc}
	...

08002acc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002acc:	6803      	ldr	r3, [r0, #0]
{
 8002ace:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ad0:	681a      	ldr	r2, [r3, #0]
{
 8002ad2:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002ad4:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ad8:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ada:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002adc:	d108      	bne.n	8002af0 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ade:	0695      	lsls	r5, r2, #26
 8002ae0:	d568      	bpl.n	8002bb4 <HAL_UART_IRQHandler+0xe8>
 8002ae2:	068d      	lsls	r5, r1, #26
 8002ae4:	d566      	bpl.n	8002bb4 <HAL_UART_IRQHandler+0xe8>
}
 8002ae6:	b003      	add	sp, #12
 8002ae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 8002aec:	f7ff bf90 	b.w	8002a10 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002af0:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002af4:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8002af8:	4305      	orrs	r5, r0
 8002afa:	d05b      	beq.n	8002bb4 <HAL_UART_IRQHandler+0xe8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002afc:	07d5      	lsls	r5, r2, #31
 8002afe:	d505      	bpl.n	8002b0c <HAL_UART_IRQHandler+0x40>
 8002b00:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b02:	bf42      	ittt	mi
 8002b04:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8002b06:	f043 0301 	orrmi.w	r3, r3, #1
 8002b0a:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b0c:	0755      	lsls	r5, r2, #29
 8002b0e:	d504      	bpl.n	8002b1a <HAL_UART_IRQHandler+0x4e>
 8002b10:	b118      	cbz	r0, 8002b1a <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b1a:	0793      	lsls	r3, r2, #30
 8002b1c:	d504      	bpl.n	8002b28 <HAL_UART_IRQHandler+0x5c>
 8002b1e:	b118      	cbz	r0, 8002b28 <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b28:	0715      	lsls	r5, r2, #28
 8002b2a:	d507      	bpl.n	8002b3c <HAL_UART_IRQHandler+0x70>
 8002b2c:	f001 0320 	and.w	r3, r1, #32
 8002b30:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b32:	bf1e      	ittt	ne
 8002b34:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8002b36:	f043 0308 	orrne.w	r3, r3, #8
 8002b3a:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d032      	beq.n	8002ba8 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b42:	0690      	lsls	r0, r2, #26
 8002b44:	d504      	bpl.n	8002b50 <HAL_UART_IRQHandler+0x84>
 8002b46:	068a      	lsls	r2, r1, #26
 8002b48:	d502      	bpl.n	8002b50 <HAL_UART_IRQHandler+0x84>
        UART_Receive_IT(huart);
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f7ff ff60 	bl	8002a10 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b50:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002b52:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b54:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b56:	6c65      	ldr	r5, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b5c:	f005 0508 	and.w	r5, r5, #8
 8002b60:	431d      	orrs	r5, r3
 8002b62:	d023      	beq.n	8002bac <HAL_UART_IRQHandler+0xe0>
        UART_EndRxTransfer(huart);
 8002b64:	f7ff fe32 	bl	80027cc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	6822      	ldr	r2, [r4, #0]
 8002b6a:	6953      	ldr	r3, [r2, #20]
 8002b6c:	065b      	lsls	r3, r3, #25
 8002b6e:	d518      	bpl.n	8002ba2 <HAL_UART_IRQHandler+0xd6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b70:	f102 0314 	add.w	r3, r2, #20
 8002b74:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7c:	f102 0014 	add.w	r0, r2, #20
 8002b80:	e840 3100 	strex	r1, r3, [r0]
 8002b84:	2900      	cmp	r1, #0
 8002b86:	d1f3      	bne.n	8002b70 <HAL_UART_IRQHandler+0xa4>
          if (huart->hdmarx != NULL)
 8002b88:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002b8a:	b150      	cbz	r0, 8002ba2 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b8c:	4b73      	ldr	r3, [pc, #460]	; (8002d5c <HAL_UART_IRQHandler+0x290>)
 8002b8e:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b90:	f7ff f806 	bl	8001ba0 <HAL_DMA_Abort_IT>
 8002b94:	b140      	cbz	r0, 8002ba8 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b96:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002b98:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8002b9a:	b003      	add	sp, #12
 8002b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ba0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7ff ff2a 	bl	80029fc <HAL_UART_ErrorCallback>
}
 8002ba8:	b003      	add	sp, #12
 8002baa:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002bac:	f7ff ff26 	bl	80029fc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb0:	6465      	str	r5, [r4, #68]	; 0x44
 8002bb2:	e7f9      	b.n	8002ba8 <HAL_UART_IRQHandler+0xdc>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002bb6:	2801      	cmp	r0, #1
 8002bb8:	f040 8094 	bne.w	8002ce4 <HAL_UART_IRQHandler+0x218>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bbc:	06d5      	lsls	r5, r2, #27
 8002bbe:	f140 8091 	bpl.w	8002ce4 <HAL_UART_IRQHandler+0x218>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bc2:	06c8      	lsls	r0, r1, #27
 8002bc4:	f140 808e 	bpl.w	8002ce4 <HAL_UART_IRQHandler+0x218>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	9201      	str	r2, [sp, #4]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	9201      	str	r2, [sp, #4]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	9201      	str	r2, [sp, #4]
 8002bd4:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	0655      	lsls	r5, r2, #25
 8002bda:	d54d      	bpl.n	8002c78 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bdc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002bde:	680a      	ldr	r2, [r1, #0]
 8002be0:	6852      	ldr	r2, [r2, #4]
 8002be2:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8002be4:	2a00      	cmp	r2, #0
 8002be6:	d0df      	beq.n	8002ba8 <HAL_UART_IRQHandler+0xdc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002be8:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8002bea:	4290      	cmp	r0, r2
 8002bec:	d9dc      	bls.n	8002ba8 <HAL_UART_IRQHandler+0xdc>
        huart->RxXferCount = nb_remaining_rx_data;
 8002bee:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bf0:	698a      	ldr	r2, [r1, #24]
 8002bf2:	2a20      	cmp	r2, #32
 8002bf4:	d036      	beq.n	8002c64 <HAL_UART_IRQHandler+0x198>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf6:	f103 020c 	add.w	r2, r3, #12
 8002bfa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	f103 000c 	add.w	r0, r3, #12
 8002c06:	e840 2100 	strex	r1, r2, [r0]
 8002c0a:	2900      	cmp	r1, #0
 8002c0c:	d1f3      	bne.n	8002bf6 <HAL_UART_IRQHandler+0x12a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0e:	f103 0214 	add.w	r2, r3, #20
 8002c12:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c16:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1a:	f103 0014 	add.w	r0, r3, #20
 8002c1e:	e840 2100 	strex	r1, r2, [r0]
 8002c22:	2900      	cmp	r1, #0
 8002c24:	d1f3      	bne.n	8002c0e <HAL_UART_IRQHandler+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c26:	f103 0214 	add.w	r2, r3, #20
 8002c2a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c32:	f103 0014 	add.w	r0, r3, #20
 8002c36:	e840 2100 	strex	r1, r2, [r0]
 8002c3a:	2900      	cmp	r1, #0
 8002c3c:	d1f3      	bne.n	8002c26 <HAL_UART_IRQHandler+0x15a>
          huart->RxState = HAL_UART_STATE_READY;
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c44:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c46:	f103 020c 	add.w	r2, r3, #12
 8002c4a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c4e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	f103 000c 	add.w	r0, r3, #12
 8002c56:	e840 2100 	strex	r1, r2, [r0]
 8002c5a:	2900      	cmp	r1, #0
 8002c5c:	d1f3      	bne.n	8002c46 <HAL_UART_IRQHandler+0x17a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c5e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c60:	f7fe ff7c 	bl	8001b5c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c64:	2302      	movs	r3, #2
 8002c66:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c68:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002c6a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002c6c:	1ac9      	subs	r1, r1, r3
 8002c6e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c70:	4620      	mov	r0, r4
 8002c72:	f7ff fecc 	bl	8002a0e <HAL_UARTEx_RxEventCallback>
 8002c76:	e797      	b.n	8002ba8 <HAL_UART_IRQHandler+0xdc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c78:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8002c7a:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8002c7c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8002c7e:	b289      	uxth	r1, r1
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d091      	beq.n	8002ba8 <HAL_UART_IRQHandler+0xdc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c84:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002c86:	1a89      	subs	r1, r1, r2
 8002c88:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002c8a:	2900      	cmp	r1, #0
 8002c8c:	d08c      	beq.n	8002ba8 <HAL_UART_IRQHandler+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8e:	f103 020c 	add.w	r2, r3, #12
 8002c92:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	f103 050c 	add.w	r5, r3, #12
 8002c9e:	e845 2000 	strex	r0, r2, [r5]
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d1f3      	bne.n	8002c8e <HAL_UART_IRQHandler+0x1c2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	f103 0214 	add.w	r2, r3, #20
 8002caa:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb2:	f103 0514 	add.w	r5, r3, #20
 8002cb6:	e845 2000 	strex	r0, r2, [r5]
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d1f3      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x1da>
        huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc4:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc6:	f103 020c 	add.w	r2, r3, #12
 8002cca:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cce:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	f103 050c 	add.w	r5, r3, #12
 8002cd6:	e845 2000 	strex	r0, r2, [r5]
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d1f3      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x1fa>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8002ce2:	e7c5      	b.n	8002c70 <HAL_UART_IRQHandler+0x1a4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ce4:	0610      	lsls	r0, r2, #24
 8002ce6:	d528      	bpl.n	8002d3a <HAL_UART_IRQHandler+0x26e>
 8002ce8:	060d      	lsls	r5, r1, #24
 8002cea:	d526      	bpl.n	8002d3a <HAL_UART_IRQHandler+0x26e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cec:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002cf0:	2a21      	cmp	r2, #33	; 0x21
 8002cf2:	f47f af59 	bne.w	8002ba8 <HAL_UART_IRQHandler+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf6:	68a1      	ldr	r1, [r4, #8]
 8002cf8:	6a22      	ldr	r2, [r4, #32]
 8002cfa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002cfe:	d117      	bne.n	8002d30 <HAL_UART_IRQHandler+0x264>
 8002d00:	6921      	ldr	r1, [r4, #16]
 8002d02:	b9a9      	cbnz	r1, 8002d30 <HAL_UART_IRQHandler+0x264>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d04:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002d08:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002d0c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d0e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002d10:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002d12:	3a01      	subs	r2, #1
 8002d14:	b292      	uxth	r2, r2
 8002d16:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002d18:	2a00      	cmp	r2, #0
 8002d1a:	f47f af45 	bne.w	8002ba8 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d24:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	e73b      	b.n	8002ba8 <HAL_UART_IRQHandler+0xdc>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d30:	1c51      	adds	r1, r2, #1
 8002d32:	6221      	str	r1, [r4, #32]
 8002d34:	7812      	ldrb	r2, [r2, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	e7ea      	b.n	8002d10 <HAL_UART_IRQHandler+0x244>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d3a:	0650      	lsls	r0, r2, #25
 8002d3c:	f57f af34 	bpl.w	8002ba8 <HAL_UART_IRQHandler+0xdc>
 8002d40:	064a      	lsls	r2, r1, #25
 8002d42:	f57f af31 	bpl.w	8002ba8 <HAL_UART_IRQHandler+0xdc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d46:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002d48:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002d50:	2320      	movs	r3, #32
 8002d52:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8002d56:	f7ff fe50 	bl	80029fa <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002d5a:	e725      	b.n	8002ba8 <HAL_UART_IRQHandler+0xdc>
 8002d5c:	080029ff 	.word	0x080029ff

08002d60 <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d60:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 8002d62:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d64:	6443      	str	r3, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d66:	2322      	movs	r3, #34	; 0x22
  huart->RxXferSize = Size;
 8002d68:	8582      	strh	r2, [r0, #44]	; 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d6a:	6902      	ldr	r2, [r0, #16]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d6c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->pRxBuffPtr = pData;
 8002d70:	6281      	str	r1, [r0, #40]	; 0x28
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d72:	6803      	ldr	r3, [r0, #0]
 8002d74:	b11a      	cbz	r2, 8002d7e <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d7e:	695a      	ldr	r2, [r3, #20]
}
 8002d80:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	f042 0220 	orr.w	r2, r2, #32
 8002d8e:	60da      	str	r2, [r3, #12]
}
 8002d90:	4770      	bx	lr

08002d92 <HAL_UART_Receive_IT>:
{
 8002d92:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d94:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8002d98:	2e20      	cmp	r6, #32
 8002d9a:	d106      	bne.n	8002daa <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 8002d9c:	b141      	cbz	r1, 8002db0 <HAL_UART_Receive_IT+0x1e>
 8002d9e:	b13a      	cbz	r2, 8002db0 <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da0:	2400      	movs	r4, #0
 8002da2:	6304      	str	r4, [r0, #48]	; 0x30
}
 8002da4:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8002da6:	f7ff bfdb 	b.w	8002d60 <UART_Start_Receive_IT>
    return HAL_BUSY;
 8002daa:	2002      	movs	r0, #2
}
 8002dac:	bc70      	pop	{r4, r5, r6}
 8002dae:	4770      	bx	lr
      return HAL_ERROR;
 8002db0:	2001      	movs	r0, #1
 8002db2:	e7fb      	b.n	8002dac <HAL_UART_Receive_IT+0x1a>

08002db4 <__errno>:
 8002db4:	4b01      	ldr	r3, [pc, #4]	; (8002dbc <__errno+0x8>)
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	2000000c 	.word	0x2000000c

08002dc0 <__libc_init_array>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	2600      	movs	r6, #0
 8002dc4:	4d0c      	ldr	r5, [pc, #48]	; (8002df8 <__libc_init_array+0x38>)
 8002dc6:	4c0d      	ldr	r4, [pc, #52]	; (8002dfc <__libc_init_array+0x3c>)
 8002dc8:	1b64      	subs	r4, r4, r5
 8002dca:	10a4      	asrs	r4, r4, #2
 8002dcc:	42a6      	cmp	r6, r4
 8002dce:	d109      	bne.n	8002de4 <__libc_init_array+0x24>
 8002dd0:	f004 fc28 	bl	8007624 <_init>
 8002dd4:	2600      	movs	r6, #0
 8002dd6:	4d0a      	ldr	r5, [pc, #40]	; (8002e00 <__libc_init_array+0x40>)
 8002dd8:	4c0a      	ldr	r4, [pc, #40]	; (8002e04 <__libc_init_array+0x44>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	42a6      	cmp	r6, r4
 8002de0:	d105      	bne.n	8002dee <__libc_init_array+0x2e>
 8002de2:	bd70      	pop	{r4, r5, r6, pc}
 8002de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de8:	4798      	blx	r3
 8002dea:	3601      	adds	r6, #1
 8002dec:	e7ee      	b.n	8002dcc <__libc_init_array+0xc>
 8002dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df2:	4798      	blx	r3
 8002df4:	3601      	adds	r6, #1
 8002df6:	e7f2      	b.n	8002dde <__libc_init_array+0x1e>
 8002df8:	08007b3c 	.word	0x08007b3c
 8002dfc:	08007b3c 	.word	0x08007b3c
 8002e00:	08007b3c 	.word	0x08007b3c
 8002e04:	08007b40 	.word	0x08007b40

08002e08 <memset>:
 8002e08:	4603      	mov	r3, r0
 8002e0a:	4402      	add	r2, r0
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <memset+0xa>
 8002e10:	4770      	bx	lr
 8002e12:	f803 1b01 	strb.w	r1, [r3], #1
 8002e16:	e7f9      	b.n	8002e0c <memset+0x4>

08002e18 <__cvt>:
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e1e:	461f      	mov	r7, r3
 8002e20:	bfbb      	ittet	lt
 8002e22:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002e26:	461f      	movlt	r7, r3
 8002e28:	2300      	movge	r3, #0
 8002e2a:	232d      	movlt	r3, #45	; 0x2d
 8002e2c:	b088      	sub	sp, #32
 8002e2e:	4614      	mov	r4, r2
 8002e30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002e32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002e34:	7013      	strb	r3, [r2, #0]
 8002e36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002e38:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002e3c:	f023 0820 	bic.w	r8, r3, #32
 8002e40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002e44:	d005      	beq.n	8002e52 <__cvt+0x3a>
 8002e46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002e4a:	d100      	bne.n	8002e4e <__cvt+0x36>
 8002e4c:	3501      	adds	r5, #1
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e000      	b.n	8002e54 <__cvt+0x3c>
 8002e52:	2303      	movs	r3, #3
 8002e54:	aa07      	add	r2, sp, #28
 8002e56:	9204      	str	r2, [sp, #16]
 8002e58:	aa06      	add	r2, sp, #24
 8002e5a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002e5e:	e9cd 3500 	strd	r3, r5, [sp]
 8002e62:	4622      	mov	r2, r4
 8002e64:	463b      	mov	r3, r7
 8002e66:	f001 fd9f 	bl	80049a8 <_dtoa_r>
 8002e6a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002e6e:	4606      	mov	r6, r0
 8002e70:	d102      	bne.n	8002e78 <__cvt+0x60>
 8002e72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e74:	07db      	lsls	r3, r3, #31
 8002e76:	d522      	bpl.n	8002ebe <__cvt+0xa6>
 8002e78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002e7c:	eb06 0905 	add.w	r9, r6, r5
 8002e80:	d110      	bne.n	8002ea4 <__cvt+0x8c>
 8002e82:	7833      	ldrb	r3, [r6, #0]
 8002e84:	2b30      	cmp	r3, #48	; 0x30
 8002e86:	d10a      	bne.n	8002e9e <__cvt+0x86>
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4639      	mov	r1, r7
 8002e90:	f7fd fe3e 	bl	8000b10 <__aeabi_dcmpeq>
 8002e94:	b918      	cbnz	r0, 8002e9e <__cvt+0x86>
 8002e96:	f1c5 0501 	rsb	r5, r5, #1
 8002e9a:	f8ca 5000 	str.w	r5, [sl]
 8002e9e:	f8da 3000 	ldr.w	r3, [sl]
 8002ea2:	4499      	add	r9, r3
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	4639      	mov	r1, r7
 8002eac:	f7fd fe30 	bl	8000b10 <__aeabi_dcmpeq>
 8002eb0:	b108      	cbz	r0, 8002eb6 <__cvt+0x9e>
 8002eb2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002eb6:	2230      	movs	r2, #48	; 0x30
 8002eb8:	9b07      	ldr	r3, [sp, #28]
 8002eba:	454b      	cmp	r3, r9
 8002ebc:	d307      	bcc.n	8002ece <__cvt+0xb6>
 8002ebe:	4630      	mov	r0, r6
 8002ec0:	9b07      	ldr	r3, [sp, #28]
 8002ec2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002ec4:	1b9b      	subs	r3, r3, r6
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	b008      	add	sp, #32
 8002eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ece:	1c59      	adds	r1, r3, #1
 8002ed0:	9107      	str	r1, [sp, #28]
 8002ed2:	701a      	strb	r2, [r3, #0]
 8002ed4:	e7f0      	b.n	8002eb8 <__cvt+0xa0>

08002ed6 <__exponent>:
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eda:	2900      	cmp	r1, #0
 8002edc:	f803 2b02 	strb.w	r2, [r3], #2
 8002ee0:	bfb6      	itet	lt
 8002ee2:	222d      	movlt	r2, #45	; 0x2d
 8002ee4:	222b      	movge	r2, #43	; 0x2b
 8002ee6:	4249      	neglt	r1, r1
 8002ee8:	2909      	cmp	r1, #9
 8002eea:	7042      	strb	r2, [r0, #1]
 8002eec:	dd2b      	ble.n	8002f46 <__exponent+0x70>
 8002eee:	f10d 0407 	add.w	r4, sp, #7
 8002ef2:	46a4      	mov	ip, r4
 8002ef4:	270a      	movs	r7, #10
 8002ef6:	fb91 f6f7 	sdiv	r6, r1, r7
 8002efa:	460a      	mov	r2, r1
 8002efc:	46a6      	mov	lr, r4
 8002efe:	fb07 1516 	mls	r5, r7, r6, r1
 8002f02:	2a63      	cmp	r2, #99	; 0x63
 8002f04:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002f08:	4631      	mov	r1, r6
 8002f0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8002f0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002f12:	dcf0      	bgt.n	8002ef6 <__exponent+0x20>
 8002f14:	3130      	adds	r1, #48	; 0x30
 8002f16:	f1ae 0502 	sub.w	r5, lr, #2
 8002f1a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	1c44      	adds	r4, r0, #1
 8002f22:	4561      	cmp	r1, ip
 8002f24:	d30a      	bcc.n	8002f3c <__exponent+0x66>
 8002f26:	f10d 0209 	add.w	r2, sp, #9
 8002f2a:	eba2 020e 	sub.w	r2, r2, lr
 8002f2e:	4565      	cmp	r5, ip
 8002f30:	bf88      	it	hi
 8002f32:	2200      	movhi	r2, #0
 8002f34:	4413      	add	r3, r2
 8002f36:	1a18      	subs	r0, r3, r0
 8002f38:	b003      	add	sp, #12
 8002f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f40:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002f44:	e7ed      	b.n	8002f22 <__exponent+0x4c>
 8002f46:	2330      	movs	r3, #48	; 0x30
 8002f48:	3130      	adds	r1, #48	; 0x30
 8002f4a:	7083      	strb	r3, [r0, #2]
 8002f4c:	70c1      	strb	r1, [r0, #3]
 8002f4e:	1d03      	adds	r3, r0, #4
 8002f50:	e7f1      	b.n	8002f36 <__exponent+0x60>
	...

08002f54 <_printf_float>:
 8002f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f58:	b091      	sub	sp, #68	; 0x44
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002f60:	4616      	mov	r6, r2
 8002f62:	461f      	mov	r7, r3
 8002f64:	4605      	mov	r5, r0
 8002f66:	f002 fe73 	bl	8005c50 <_localeconv_r>
 8002f6a:	6803      	ldr	r3, [r0, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f70:	f7fd f8ee 	bl	8000150 <strlen>
 8002f74:	2300      	movs	r3, #0
 8002f76:	930e      	str	r3, [sp, #56]	; 0x38
 8002f78:	f8d8 3000 	ldr.w	r3, [r8]
 8002f7c:	900a      	str	r0, [sp, #40]	; 0x28
 8002f7e:	3307      	adds	r3, #7
 8002f80:	f023 0307 	bic.w	r3, r3, #7
 8002f84:	f103 0208 	add.w	r2, r3, #8
 8002f88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002f8c:	f8d4 b000 	ldr.w	fp, [r4]
 8002f90:	f8c8 2000 	str.w	r2, [r8]
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002f9c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002fa0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002fa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8002faa:	4640      	mov	r0, r8
 8002fac:	4b9c      	ldr	r3, [pc, #624]	; (8003220 <_printf_float+0x2cc>)
 8002fae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002fb0:	f7fd fde0 	bl	8000b74 <__aeabi_dcmpun>
 8002fb4:	bb70      	cbnz	r0, 8003014 <_printf_float+0xc0>
 8002fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fba:	4640      	mov	r0, r8
 8002fbc:	4b98      	ldr	r3, [pc, #608]	; (8003220 <_printf_float+0x2cc>)
 8002fbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002fc0:	f7fd fdba 	bl	8000b38 <__aeabi_dcmple>
 8002fc4:	bb30      	cbnz	r0, 8003014 <_printf_float+0xc0>
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2300      	movs	r3, #0
 8002fca:	4640      	mov	r0, r8
 8002fcc:	4651      	mov	r1, sl
 8002fce:	f7fd fda9 	bl	8000b24 <__aeabi_dcmplt>
 8002fd2:	b110      	cbz	r0, 8002fda <_printf_float+0x86>
 8002fd4:	232d      	movs	r3, #45	; 0x2d
 8002fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fda:	4b92      	ldr	r3, [pc, #584]	; (8003224 <_printf_float+0x2d0>)
 8002fdc:	4892      	ldr	r0, [pc, #584]	; (8003228 <_printf_float+0x2d4>)
 8002fde:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002fe2:	bf94      	ite	ls
 8002fe4:	4698      	movls	r8, r3
 8002fe6:	4680      	movhi	r8, r0
 8002fe8:	2303      	movs	r3, #3
 8002fea:	f04f 0a00 	mov.w	sl, #0
 8002fee:	6123      	str	r3, [r4, #16]
 8002ff0:	f02b 0304 	bic.w	r3, fp, #4
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	4633      	mov	r3, r6
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	9700      	str	r7, [sp, #0]
 8002ffe:	aa0f      	add	r2, sp, #60	; 0x3c
 8003000:	f000 f9d4 	bl	80033ac <_printf_common>
 8003004:	3001      	adds	r0, #1
 8003006:	f040 8090 	bne.w	800312a <_printf_float+0x1d6>
 800300a:	f04f 30ff 	mov.w	r0, #4294967295
 800300e:	b011      	add	sp, #68	; 0x44
 8003010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003014:	4642      	mov	r2, r8
 8003016:	4653      	mov	r3, sl
 8003018:	4640      	mov	r0, r8
 800301a:	4651      	mov	r1, sl
 800301c:	f7fd fdaa 	bl	8000b74 <__aeabi_dcmpun>
 8003020:	b148      	cbz	r0, 8003036 <_printf_float+0xe2>
 8003022:	f1ba 0f00 	cmp.w	sl, #0
 8003026:	bfb8      	it	lt
 8003028:	232d      	movlt	r3, #45	; 0x2d
 800302a:	4880      	ldr	r0, [pc, #512]	; (800322c <_printf_float+0x2d8>)
 800302c:	bfb8      	it	lt
 800302e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003032:	4b7f      	ldr	r3, [pc, #508]	; (8003230 <_printf_float+0x2dc>)
 8003034:	e7d3      	b.n	8002fde <_printf_float+0x8a>
 8003036:	6863      	ldr	r3, [r4, #4]
 8003038:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	d142      	bne.n	80030c6 <_printf_float+0x172>
 8003040:	2306      	movs	r3, #6
 8003042:	6063      	str	r3, [r4, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	9206      	str	r2, [sp, #24]
 8003048:	aa0e      	add	r2, sp, #56	; 0x38
 800304a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800304e:	aa0d      	add	r2, sp, #52	; 0x34
 8003050:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003054:	9203      	str	r2, [sp, #12]
 8003056:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800305a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800305e:	6023      	str	r3, [r4, #0]
 8003060:	6863      	ldr	r3, [r4, #4]
 8003062:	4642      	mov	r2, r8
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	4628      	mov	r0, r5
 8003068:	4653      	mov	r3, sl
 800306a:	910b      	str	r1, [sp, #44]	; 0x2c
 800306c:	f7ff fed4 	bl	8002e18 <__cvt>
 8003070:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003072:	4680      	mov	r8, r0
 8003074:	2947      	cmp	r1, #71	; 0x47
 8003076:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003078:	d108      	bne.n	800308c <_printf_float+0x138>
 800307a:	1cc8      	adds	r0, r1, #3
 800307c:	db02      	blt.n	8003084 <_printf_float+0x130>
 800307e:	6863      	ldr	r3, [r4, #4]
 8003080:	4299      	cmp	r1, r3
 8003082:	dd40      	ble.n	8003106 <_printf_float+0x1b2>
 8003084:	f1a9 0902 	sub.w	r9, r9, #2
 8003088:	fa5f f989 	uxtb.w	r9, r9
 800308c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003090:	d81f      	bhi.n	80030d2 <_printf_float+0x17e>
 8003092:	464a      	mov	r2, r9
 8003094:	3901      	subs	r1, #1
 8003096:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800309a:	910d      	str	r1, [sp, #52]	; 0x34
 800309c:	f7ff ff1b 	bl	8002ed6 <__exponent>
 80030a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030a2:	4682      	mov	sl, r0
 80030a4:	1813      	adds	r3, r2, r0
 80030a6:	2a01      	cmp	r2, #1
 80030a8:	6123      	str	r3, [r4, #16]
 80030aa:	dc02      	bgt.n	80030b2 <_printf_float+0x15e>
 80030ac:	6822      	ldr	r2, [r4, #0]
 80030ae:	07d2      	lsls	r2, r2, #31
 80030b0:	d501      	bpl.n	80030b6 <_printf_float+0x162>
 80030b2:	3301      	adds	r3, #1
 80030b4:	6123      	str	r3, [r4, #16]
 80030b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d09b      	beq.n	8002ff6 <_printf_float+0xa2>
 80030be:	232d      	movs	r3, #45	; 0x2d
 80030c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030c4:	e797      	b.n	8002ff6 <_printf_float+0xa2>
 80030c6:	2947      	cmp	r1, #71	; 0x47
 80030c8:	d1bc      	bne.n	8003044 <_printf_float+0xf0>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ba      	bne.n	8003044 <_printf_float+0xf0>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e7b7      	b.n	8003042 <_printf_float+0xee>
 80030d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80030d6:	d118      	bne.n	800310a <_printf_float+0x1b6>
 80030d8:	2900      	cmp	r1, #0
 80030da:	6863      	ldr	r3, [r4, #4]
 80030dc:	dd0b      	ble.n	80030f6 <_printf_float+0x1a2>
 80030de:	6121      	str	r1, [r4, #16]
 80030e0:	b913      	cbnz	r3, 80030e8 <_printf_float+0x194>
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	07d0      	lsls	r0, r2, #31
 80030e6:	d502      	bpl.n	80030ee <_printf_float+0x19a>
 80030e8:	3301      	adds	r3, #1
 80030ea:	440b      	add	r3, r1
 80030ec:	6123      	str	r3, [r4, #16]
 80030ee:	f04f 0a00 	mov.w	sl, #0
 80030f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80030f4:	e7df      	b.n	80030b6 <_printf_float+0x162>
 80030f6:	b913      	cbnz	r3, 80030fe <_printf_float+0x1aa>
 80030f8:	6822      	ldr	r2, [r4, #0]
 80030fa:	07d2      	lsls	r2, r2, #31
 80030fc:	d501      	bpl.n	8003102 <_printf_float+0x1ae>
 80030fe:	3302      	adds	r3, #2
 8003100:	e7f4      	b.n	80030ec <_printf_float+0x198>
 8003102:	2301      	movs	r3, #1
 8003104:	e7f2      	b.n	80030ec <_printf_float+0x198>
 8003106:	f04f 0967 	mov.w	r9, #103	; 0x67
 800310a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800310c:	4299      	cmp	r1, r3
 800310e:	db05      	blt.n	800311c <_printf_float+0x1c8>
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	6121      	str	r1, [r4, #16]
 8003114:	07d8      	lsls	r0, r3, #31
 8003116:	d5ea      	bpl.n	80030ee <_printf_float+0x19a>
 8003118:	1c4b      	adds	r3, r1, #1
 800311a:	e7e7      	b.n	80030ec <_printf_float+0x198>
 800311c:	2900      	cmp	r1, #0
 800311e:	bfcc      	ite	gt
 8003120:	2201      	movgt	r2, #1
 8003122:	f1c1 0202 	rsble	r2, r1, #2
 8003126:	4413      	add	r3, r2
 8003128:	e7e0      	b.n	80030ec <_printf_float+0x198>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	055a      	lsls	r2, r3, #21
 800312e:	d407      	bmi.n	8003140 <_printf_float+0x1ec>
 8003130:	6923      	ldr	r3, [r4, #16]
 8003132:	4642      	mov	r2, r8
 8003134:	4631      	mov	r1, r6
 8003136:	4628      	mov	r0, r5
 8003138:	47b8      	blx	r7
 800313a:	3001      	adds	r0, #1
 800313c:	d12b      	bne.n	8003196 <_printf_float+0x242>
 800313e:	e764      	b.n	800300a <_printf_float+0xb6>
 8003140:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003144:	f240 80dd 	bls.w	8003302 <_printf_float+0x3ae>
 8003148:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800314c:	2200      	movs	r2, #0
 800314e:	2300      	movs	r3, #0
 8003150:	f7fd fcde 	bl	8000b10 <__aeabi_dcmpeq>
 8003154:	2800      	cmp	r0, #0
 8003156:	d033      	beq.n	80031c0 <_printf_float+0x26c>
 8003158:	2301      	movs	r3, #1
 800315a:	4631      	mov	r1, r6
 800315c:	4628      	mov	r0, r5
 800315e:	4a35      	ldr	r2, [pc, #212]	; (8003234 <_printf_float+0x2e0>)
 8003160:	47b8      	blx	r7
 8003162:	3001      	adds	r0, #1
 8003164:	f43f af51 	beq.w	800300a <_printf_float+0xb6>
 8003168:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800316c:	429a      	cmp	r2, r3
 800316e:	db02      	blt.n	8003176 <_printf_float+0x222>
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	07d8      	lsls	r0, r3, #31
 8003174:	d50f      	bpl.n	8003196 <_printf_float+0x242>
 8003176:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800317a:	4631      	mov	r1, r6
 800317c:	4628      	mov	r0, r5
 800317e:	47b8      	blx	r7
 8003180:	3001      	adds	r0, #1
 8003182:	f43f af42 	beq.w	800300a <_printf_float+0xb6>
 8003186:	f04f 0800 	mov.w	r8, #0
 800318a:	f104 091a 	add.w	r9, r4, #26
 800318e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003190:	3b01      	subs	r3, #1
 8003192:	4543      	cmp	r3, r8
 8003194:	dc09      	bgt.n	80031aa <_printf_float+0x256>
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	079b      	lsls	r3, r3, #30
 800319a:	f100 8102 	bmi.w	80033a2 <_printf_float+0x44e>
 800319e:	68e0      	ldr	r0, [r4, #12]
 80031a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031a2:	4298      	cmp	r0, r3
 80031a4:	bfb8      	it	lt
 80031a6:	4618      	movlt	r0, r3
 80031a8:	e731      	b.n	800300e <_printf_float+0xba>
 80031aa:	2301      	movs	r3, #1
 80031ac:	464a      	mov	r2, r9
 80031ae:	4631      	mov	r1, r6
 80031b0:	4628      	mov	r0, r5
 80031b2:	47b8      	blx	r7
 80031b4:	3001      	adds	r0, #1
 80031b6:	f43f af28 	beq.w	800300a <_printf_float+0xb6>
 80031ba:	f108 0801 	add.w	r8, r8, #1
 80031be:	e7e6      	b.n	800318e <_printf_float+0x23a>
 80031c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	dc38      	bgt.n	8003238 <_printf_float+0x2e4>
 80031c6:	2301      	movs	r3, #1
 80031c8:	4631      	mov	r1, r6
 80031ca:	4628      	mov	r0, r5
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <_printf_float+0x2e0>)
 80031ce:	47b8      	blx	r7
 80031d0:	3001      	adds	r0, #1
 80031d2:	f43f af1a 	beq.w	800300a <_printf_float+0xb6>
 80031d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031da:	4313      	orrs	r3, r2
 80031dc:	d102      	bne.n	80031e4 <_printf_float+0x290>
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	07d9      	lsls	r1, r3, #31
 80031e2:	d5d8      	bpl.n	8003196 <_printf_float+0x242>
 80031e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031e8:	4631      	mov	r1, r6
 80031ea:	4628      	mov	r0, r5
 80031ec:	47b8      	blx	r7
 80031ee:	3001      	adds	r0, #1
 80031f0:	f43f af0b 	beq.w	800300a <_printf_float+0xb6>
 80031f4:	f04f 0900 	mov.w	r9, #0
 80031f8:	f104 0a1a 	add.w	sl, r4, #26
 80031fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031fe:	425b      	negs	r3, r3
 8003200:	454b      	cmp	r3, r9
 8003202:	dc01      	bgt.n	8003208 <_printf_float+0x2b4>
 8003204:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003206:	e794      	b.n	8003132 <_printf_float+0x1de>
 8003208:	2301      	movs	r3, #1
 800320a:	4652      	mov	r2, sl
 800320c:	4631      	mov	r1, r6
 800320e:	4628      	mov	r0, r5
 8003210:	47b8      	blx	r7
 8003212:	3001      	adds	r0, #1
 8003214:	f43f aef9 	beq.w	800300a <_printf_float+0xb6>
 8003218:	f109 0901 	add.w	r9, r9, #1
 800321c:	e7ee      	b.n	80031fc <_printf_float+0x2a8>
 800321e:	bf00      	nop
 8003220:	7fefffff 	.word	0x7fefffff
 8003224:	08007688 	.word	0x08007688
 8003228:	0800768c 	.word	0x0800768c
 800322c:	08007694 	.word	0x08007694
 8003230:	08007690 	.word	0x08007690
 8003234:	08007698 	.word	0x08007698
 8003238:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800323a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800323c:	429a      	cmp	r2, r3
 800323e:	bfa8      	it	ge
 8003240:	461a      	movge	r2, r3
 8003242:	2a00      	cmp	r2, #0
 8003244:	4691      	mov	r9, r2
 8003246:	dc37      	bgt.n	80032b8 <_printf_float+0x364>
 8003248:	f04f 0b00 	mov.w	fp, #0
 800324c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003250:	f104 021a 	add.w	r2, r4, #26
 8003254:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003258:	ebaa 0309 	sub.w	r3, sl, r9
 800325c:	455b      	cmp	r3, fp
 800325e:	dc33      	bgt.n	80032c8 <_printf_float+0x374>
 8003260:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003264:	429a      	cmp	r2, r3
 8003266:	db3b      	blt.n	80032e0 <_printf_float+0x38c>
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	07da      	lsls	r2, r3, #31
 800326c:	d438      	bmi.n	80032e0 <_printf_float+0x38c>
 800326e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003270:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003272:	eba2 030a 	sub.w	r3, r2, sl
 8003276:	eba2 0901 	sub.w	r9, r2, r1
 800327a:	4599      	cmp	r9, r3
 800327c:	bfa8      	it	ge
 800327e:	4699      	movge	r9, r3
 8003280:	f1b9 0f00 	cmp.w	r9, #0
 8003284:	dc34      	bgt.n	80032f0 <_printf_float+0x39c>
 8003286:	f04f 0800 	mov.w	r8, #0
 800328a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800328e:	f104 0a1a 	add.w	sl, r4, #26
 8003292:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	eba3 0309 	sub.w	r3, r3, r9
 800329c:	4543      	cmp	r3, r8
 800329e:	f77f af7a 	ble.w	8003196 <_printf_float+0x242>
 80032a2:	2301      	movs	r3, #1
 80032a4:	4652      	mov	r2, sl
 80032a6:	4631      	mov	r1, r6
 80032a8:	4628      	mov	r0, r5
 80032aa:	47b8      	blx	r7
 80032ac:	3001      	adds	r0, #1
 80032ae:	f43f aeac 	beq.w	800300a <_printf_float+0xb6>
 80032b2:	f108 0801 	add.w	r8, r8, #1
 80032b6:	e7ec      	b.n	8003292 <_printf_float+0x33e>
 80032b8:	4613      	mov	r3, r2
 80032ba:	4631      	mov	r1, r6
 80032bc:	4642      	mov	r2, r8
 80032be:	4628      	mov	r0, r5
 80032c0:	47b8      	blx	r7
 80032c2:	3001      	adds	r0, #1
 80032c4:	d1c0      	bne.n	8003248 <_printf_float+0x2f4>
 80032c6:	e6a0      	b.n	800300a <_printf_float+0xb6>
 80032c8:	2301      	movs	r3, #1
 80032ca:	4631      	mov	r1, r6
 80032cc:	4628      	mov	r0, r5
 80032ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80032d0:	47b8      	blx	r7
 80032d2:	3001      	adds	r0, #1
 80032d4:	f43f ae99 	beq.w	800300a <_printf_float+0xb6>
 80032d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80032da:	f10b 0b01 	add.w	fp, fp, #1
 80032de:	e7b9      	b.n	8003254 <_printf_float+0x300>
 80032e0:	4631      	mov	r1, r6
 80032e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032e6:	4628      	mov	r0, r5
 80032e8:	47b8      	blx	r7
 80032ea:	3001      	adds	r0, #1
 80032ec:	d1bf      	bne.n	800326e <_printf_float+0x31a>
 80032ee:	e68c      	b.n	800300a <_printf_float+0xb6>
 80032f0:	464b      	mov	r3, r9
 80032f2:	4631      	mov	r1, r6
 80032f4:	4628      	mov	r0, r5
 80032f6:	eb08 020a 	add.w	r2, r8, sl
 80032fa:	47b8      	blx	r7
 80032fc:	3001      	adds	r0, #1
 80032fe:	d1c2      	bne.n	8003286 <_printf_float+0x332>
 8003300:	e683      	b.n	800300a <_printf_float+0xb6>
 8003302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003304:	2a01      	cmp	r2, #1
 8003306:	dc01      	bgt.n	800330c <_printf_float+0x3b8>
 8003308:	07db      	lsls	r3, r3, #31
 800330a:	d537      	bpl.n	800337c <_printf_float+0x428>
 800330c:	2301      	movs	r3, #1
 800330e:	4642      	mov	r2, r8
 8003310:	4631      	mov	r1, r6
 8003312:	4628      	mov	r0, r5
 8003314:	47b8      	blx	r7
 8003316:	3001      	adds	r0, #1
 8003318:	f43f ae77 	beq.w	800300a <_printf_float+0xb6>
 800331c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003320:	4631      	mov	r1, r6
 8003322:	4628      	mov	r0, r5
 8003324:	47b8      	blx	r7
 8003326:	3001      	adds	r0, #1
 8003328:	f43f ae6f 	beq.w	800300a <_printf_float+0xb6>
 800332c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003330:	2200      	movs	r2, #0
 8003332:	2300      	movs	r3, #0
 8003334:	f7fd fbec 	bl	8000b10 <__aeabi_dcmpeq>
 8003338:	b9d8      	cbnz	r0, 8003372 <_printf_float+0x41e>
 800333a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800333c:	f108 0201 	add.w	r2, r8, #1
 8003340:	3b01      	subs	r3, #1
 8003342:	4631      	mov	r1, r6
 8003344:	4628      	mov	r0, r5
 8003346:	47b8      	blx	r7
 8003348:	3001      	adds	r0, #1
 800334a:	d10e      	bne.n	800336a <_printf_float+0x416>
 800334c:	e65d      	b.n	800300a <_printf_float+0xb6>
 800334e:	2301      	movs	r3, #1
 8003350:	464a      	mov	r2, r9
 8003352:	4631      	mov	r1, r6
 8003354:	4628      	mov	r0, r5
 8003356:	47b8      	blx	r7
 8003358:	3001      	adds	r0, #1
 800335a:	f43f ae56 	beq.w	800300a <_printf_float+0xb6>
 800335e:	f108 0801 	add.w	r8, r8, #1
 8003362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003364:	3b01      	subs	r3, #1
 8003366:	4543      	cmp	r3, r8
 8003368:	dcf1      	bgt.n	800334e <_printf_float+0x3fa>
 800336a:	4653      	mov	r3, sl
 800336c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003370:	e6e0      	b.n	8003134 <_printf_float+0x1e0>
 8003372:	f04f 0800 	mov.w	r8, #0
 8003376:	f104 091a 	add.w	r9, r4, #26
 800337a:	e7f2      	b.n	8003362 <_printf_float+0x40e>
 800337c:	2301      	movs	r3, #1
 800337e:	4642      	mov	r2, r8
 8003380:	e7df      	b.n	8003342 <_printf_float+0x3ee>
 8003382:	2301      	movs	r3, #1
 8003384:	464a      	mov	r2, r9
 8003386:	4631      	mov	r1, r6
 8003388:	4628      	mov	r0, r5
 800338a:	47b8      	blx	r7
 800338c:	3001      	adds	r0, #1
 800338e:	f43f ae3c 	beq.w	800300a <_printf_float+0xb6>
 8003392:	f108 0801 	add.w	r8, r8, #1
 8003396:	68e3      	ldr	r3, [r4, #12]
 8003398:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800339a:	1a5b      	subs	r3, r3, r1
 800339c:	4543      	cmp	r3, r8
 800339e:	dcf0      	bgt.n	8003382 <_printf_float+0x42e>
 80033a0:	e6fd      	b.n	800319e <_printf_float+0x24a>
 80033a2:	f04f 0800 	mov.w	r8, #0
 80033a6:	f104 0919 	add.w	r9, r4, #25
 80033aa:	e7f4      	b.n	8003396 <_printf_float+0x442>

080033ac <_printf_common>:
 80033ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b0:	4616      	mov	r6, r2
 80033b2:	4699      	mov	r9, r3
 80033b4:	688a      	ldr	r2, [r1, #8]
 80033b6:	690b      	ldr	r3, [r1, #16]
 80033b8:	4607      	mov	r7, r0
 80033ba:	4293      	cmp	r3, r2
 80033bc:	bfb8      	it	lt
 80033be:	4613      	movlt	r3, r2
 80033c0:	6033      	str	r3, [r6, #0]
 80033c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033c6:	460c      	mov	r4, r1
 80033c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033cc:	b10a      	cbz	r2, 80033d2 <_printf_common+0x26>
 80033ce:	3301      	adds	r3, #1
 80033d0:	6033      	str	r3, [r6, #0]
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	0699      	lsls	r1, r3, #26
 80033d6:	bf42      	ittt	mi
 80033d8:	6833      	ldrmi	r3, [r6, #0]
 80033da:	3302      	addmi	r3, #2
 80033dc:	6033      	strmi	r3, [r6, #0]
 80033de:	6825      	ldr	r5, [r4, #0]
 80033e0:	f015 0506 	ands.w	r5, r5, #6
 80033e4:	d106      	bne.n	80033f4 <_printf_common+0x48>
 80033e6:	f104 0a19 	add.w	sl, r4, #25
 80033ea:	68e3      	ldr	r3, [r4, #12]
 80033ec:	6832      	ldr	r2, [r6, #0]
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	42ab      	cmp	r3, r5
 80033f2:	dc28      	bgt.n	8003446 <_printf_common+0x9a>
 80033f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033f8:	1e13      	subs	r3, r2, #0
 80033fa:	6822      	ldr	r2, [r4, #0]
 80033fc:	bf18      	it	ne
 80033fe:	2301      	movne	r3, #1
 8003400:	0692      	lsls	r2, r2, #26
 8003402:	d42d      	bmi.n	8003460 <_printf_common+0xb4>
 8003404:	4649      	mov	r1, r9
 8003406:	4638      	mov	r0, r7
 8003408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800340c:	47c0      	blx	r8
 800340e:	3001      	adds	r0, #1
 8003410:	d020      	beq.n	8003454 <_printf_common+0xa8>
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	68e5      	ldr	r5, [r4, #12]
 8003416:	f003 0306 	and.w	r3, r3, #6
 800341a:	2b04      	cmp	r3, #4
 800341c:	bf18      	it	ne
 800341e:	2500      	movne	r5, #0
 8003420:	6832      	ldr	r2, [r6, #0]
 8003422:	f04f 0600 	mov.w	r6, #0
 8003426:	68a3      	ldr	r3, [r4, #8]
 8003428:	bf08      	it	eq
 800342a:	1aad      	subeq	r5, r5, r2
 800342c:	6922      	ldr	r2, [r4, #16]
 800342e:	bf08      	it	eq
 8003430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003434:	4293      	cmp	r3, r2
 8003436:	bfc4      	itt	gt
 8003438:	1a9b      	subgt	r3, r3, r2
 800343a:	18ed      	addgt	r5, r5, r3
 800343c:	341a      	adds	r4, #26
 800343e:	42b5      	cmp	r5, r6
 8003440:	d11a      	bne.n	8003478 <_printf_common+0xcc>
 8003442:	2000      	movs	r0, #0
 8003444:	e008      	b.n	8003458 <_printf_common+0xac>
 8003446:	2301      	movs	r3, #1
 8003448:	4652      	mov	r2, sl
 800344a:	4649      	mov	r1, r9
 800344c:	4638      	mov	r0, r7
 800344e:	47c0      	blx	r8
 8003450:	3001      	adds	r0, #1
 8003452:	d103      	bne.n	800345c <_printf_common+0xb0>
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800345c:	3501      	adds	r5, #1
 800345e:	e7c4      	b.n	80033ea <_printf_common+0x3e>
 8003460:	2030      	movs	r0, #48	; 0x30
 8003462:	18e1      	adds	r1, r4, r3
 8003464:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800346e:	4422      	add	r2, r4
 8003470:	3302      	adds	r3, #2
 8003472:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003476:	e7c5      	b.n	8003404 <_printf_common+0x58>
 8003478:	2301      	movs	r3, #1
 800347a:	4622      	mov	r2, r4
 800347c:	4649      	mov	r1, r9
 800347e:	4638      	mov	r0, r7
 8003480:	47c0      	blx	r8
 8003482:	3001      	adds	r0, #1
 8003484:	d0e6      	beq.n	8003454 <_printf_common+0xa8>
 8003486:	3601      	adds	r6, #1
 8003488:	e7d9      	b.n	800343e <_printf_common+0x92>
	...

0800348c <_printf_i>:
 800348c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003490:	460c      	mov	r4, r1
 8003492:	7e27      	ldrb	r7, [r4, #24]
 8003494:	4691      	mov	r9, r2
 8003496:	2f78      	cmp	r7, #120	; 0x78
 8003498:	4680      	mov	r8, r0
 800349a:	469a      	mov	sl, r3
 800349c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800349e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034a2:	d807      	bhi.n	80034b4 <_printf_i+0x28>
 80034a4:	2f62      	cmp	r7, #98	; 0x62
 80034a6:	d80a      	bhi.n	80034be <_printf_i+0x32>
 80034a8:	2f00      	cmp	r7, #0
 80034aa:	f000 80d9 	beq.w	8003660 <_printf_i+0x1d4>
 80034ae:	2f58      	cmp	r7, #88	; 0x58
 80034b0:	f000 80a4 	beq.w	80035fc <_printf_i+0x170>
 80034b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80034b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034bc:	e03a      	b.n	8003534 <_printf_i+0xa8>
 80034be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034c2:	2b15      	cmp	r3, #21
 80034c4:	d8f6      	bhi.n	80034b4 <_printf_i+0x28>
 80034c6:	a001      	add	r0, pc, #4	; (adr r0, 80034cc <_printf_i+0x40>)
 80034c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80034cc:	08003525 	.word	0x08003525
 80034d0:	08003539 	.word	0x08003539
 80034d4:	080034b5 	.word	0x080034b5
 80034d8:	080034b5 	.word	0x080034b5
 80034dc:	080034b5 	.word	0x080034b5
 80034e0:	080034b5 	.word	0x080034b5
 80034e4:	08003539 	.word	0x08003539
 80034e8:	080034b5 	.word	0x080034b5
 80034ec:	080034b5 	.word	0x080034b5
 80034f0:	080034b5 	.word	0x080034b5
 80034f4:	080034b5 	.word	0x080034b5
 80034f8:	08003647 	.word	0x08003647
 80034fc:	08003569 	.word	0x08003569
 8003500:	08003629 	.word	0x08003629
 8003504:	080034b5 	.word	0x080034b5
 8003508:	080034b5 	.word	0x080034b5
 800350c:	08003669 	.word	0x08003669
 8003510:	080034b5 	.word	0x080034b5
 8003514:	08003569 	.word	0x08003569
 8003518:	080034b5 	.word	0x080034b5
 800351c:	080034b5 	.word	0x080034b5
 8003520:	08003631 	.word	0x08003631
 8003524:	680b      	ldr	r3, [r1, #0]
 8003526:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800352a:	1d1a      	adds	r2, r3, #4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	600a      	str	r2, [r1, #0]
 8003530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003534:	2301      	movs	r3, #1
 8003536:	e0a4      	b.n	8003682 <_printf_i+0x1f6>
 8003538:	6825      	ldr	r5, [r4, #0]
 800353a:	6808      	ldr	r0, [r1, #0]
 800353c:	062e      	lsls	r6, r5, #24
 800353e:	f100 0304 	add.w	r3, r0, #4
 8003542:	d50a      	bpl.n	800355a <_printf_i+0xce>
 8003544:	6805      	ldr	r5, [r0, #0]
 8003546:	600b      	str	r3, [r1, #0]
 8003548:	2d00      	cmp	r5, #0
 800354a:	da03      	bge.n	8003554 <_printf_i+0xc8>
 800354c:	232d      	movs	r3, #45	; 0x2d
 800354e:	426d      	negs	r5, r5
 8003550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003554:	230a      	movs	r3, #10
 8003556:	485e      	ldr	r0, [pc, #376]	; (80036d0 <_printf_i+0x244>)
 8003558:	e019      	b.n	800358e <_printf_i+0x102>
 800355a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800355e:	6805      	ldr	r5, [r0, #0]
 8003560:	600b      	str	r3, [r1, #0]
 8003562:	bf18      	it	ne
 8003564:	b22d      	sxthne	r5, r5
 8003566:	e7ef      	b.n	8003548 <_printf_i+0xbc>
 8003568:	680b      	ldr	r3, [r1, #0]
 800356a:	6825      	ldr	r5, [r4, #0]
 800356c:	1d18      	adds	r0, r3, #4
 800356e:	6008      	str	r0, [r1, #0]
 8003570:	0628      	lsls	r0, r5, #24
 8003572:	d501      	bpl.n	8003578 <_printf_i+0xec>
 8003574:	681d      	ldr	r5, [r3, #0]
 8003576:	e002      	b.n	800357e <_printf_i+0xf2>
 8003578:	0669      	lsls	r1, r5, #25
 800357a:	d5fb      	bpl.n	8003574 <_printf_i+0xe8>
 800357c:	881d      	ldrh	r5, [r3, #0]
 800357e:	2f6f      	cmp	r7, #111	; 0x6f
 8003580:	bf0c      	ite	eq
 8003582:	2308      	moveq	r3, #8
 8003584:	230a      	movne	r3, #10
 8003586:	4852      	ldr	r0, [pc, #328]	; (80036d0 <_printf_i+0x244>)
 8003588:	2100      	movs	r1, #0
 800358a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800358e:	6866      	ldr	r6, [r4, #4]
 8003590:	2e00      	cmp	r6, #0
 8003592:	bfa8      	it	ge
 8003594:	6821      	ldrge	r1, [r4, #0]
 8003596:	60a6      	str	r6, [r4, #8]
 8003598:	bfa4      	itt	ge
 800359a:	f021 0104 	bicge.w	r1, r1, #4
 800359e:	6021      	strge	r1, [r4, #0]
 80035a0:	b90d      	cbnz	r5, 80035a6 <_printf_i+0x11a>
 80035a2:	2e00      	cmp	r6, #0
 80035a4:	d04d      	beq.n	8003642 <_printf_i+0x1b6>
 80035a6:	4616      	mov	r6, r2
 80035a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80035ac:	fb03 5711 	mls	r7, r3, r1, r5
 80035b0:	5dc7      	ldrb	r7, [r0, r7]
 80035b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035b6:	462f      	mov	r7, r5
 80035b8:	42bb      	cmp	r3, r7
 80035ba:	460d      	mov	r5, r1
 80035bc:	d9f4      	bls.n	80035a8 <_printf_i+0x11c>
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d10b      	bne.n	80035da <_printf_i+0x14e>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	07df      	lsls	r7, r3, #31
 80035c6:	d508      	bpl.n	80035da <_printf_i+0x14e>
 80035c8:	6923      	ldr	r3, [r4, #16]
 80035ca:	6861      	ldr	r1, [r4, #4]
 80035cc:	4299      	cmp	r1, r3
 80035ce:	bfde      	ittt	le
 80035d0:	2330      	movle	r3, #48	; 0x30
 80035d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035da:	1b92      	subs	r2, r2, r6
 80035dc:	6122      	str	r2, [r4, #16]
 80035de:	464b      	mov	r3, r9
 80035e0:	4621      	mov	r1, r4
 80035e2:	4640      	mov	r0, r8
 80035e4:	f8cd a000 	str.w	sl, [sp]
 80035e8:	aa03      	add	r2, sp, #12
 80035ea:	f7ff fedf 	bl	80033ac <_printf_common>
 80035ee:	3001      	adds	r0, #1
 80035f0:	d14c      	bne.n	800368c <_printf_i+0x200>
 80035f2:	f04f 30ff 	mov.w	r0, #4294967295
 80035f6:	b004      	add	sp, #16
 80035f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fc:	4834      	ldr	r0, [pc, #208]	; (80036d0 <_printf_i+0x244>)
 80035fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003602:	680e      	ldr	r6, [r1, #0]
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	f856 5b04 	ldr.w	r5, [r6], #4
 800360a:	061f      	lsls	r7, r3, #24
 800360c:	600e      	str	r6, [r1, #0]
 800360e:	d514      	bpl.n	800363a <_printf_i+0x1ae>
 8003610:	07d9      	lsls	r1, r3, #31
 8003612:	bf44      	itt	mi
 8003614:	f043 0320 	orrmi.w	r3, r3, #32
 8003618:	6023      	strmi	r3, [r4, #0]
 800361a:	b91d      	cbnz	r5, 8003624 <_printf_i+0x198>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	f023 0320 	bic.w	r3, r3, #32
 8003622:	6023      	str	r3, [r4, #0]
 8003624:	2310      	movs	r3, #16
 8003626:	e7af      	b.n	8003588 <_printf_i+0xfc>
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	f043 0320 	orr.w	r3, r3, #32
 800362e:	6023      	str	r3, [r4, #0]
 8003630:	2378      	movs	r3, #120	; 0x78
 8003632:	4828      	ldr	r0, [pc, #160]	; (80036d4 <_printf_i+0x248>)
 8003634:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003638:	e7e3      	b.n	8003602 <_printf_i+0x176>
 800363a:	065e      	lsls	r6, r3, #25
 800363c:	bf48      	it	mi
 800363e:	b2ad      	uxthmi	r5, r5
 8003640:	e7e6      	b.n	8003610 <_printf_i+0x184>
 8003642:	4616      	mov	r6, r2
 8003644:	e7bb      	b.n	80035be <_printf_i+0x132>
 8003646:	680b      	ldr	r3, [r1, #0]
 8003648:	6826      	ldr	r6, [r4, #0]
 800364a:	1d1d      	adds	r5, r3, #4
 800364c:	6960      	ldr	r0, [r4, #20]
 800364e:	600d      	str	r5, [r1, #0]
 8003650:	0635      	lsls	r5, r6, #24
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	d501      	bpl.n	800365a <_printf_i+0x1ce>
 8003656:	6018      	str	r0, [r3, #0]
 8003658:	e002      	b.n	8003660 <_printf_i+0x1d4>
 800365a:	0671      	lsls	r1, r6, #25
 800365c:	d5fb      	bpl.n	8003656 <_printf_i+0x1ca>
 800365e:	8018      	strh	r0, [r3, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	4616      	mov	r6, r2
 8003664:	6123      	str	r3, [r4, #16]
 8003666:	e7ba      	b.n	80035de <_printf_i+0x152>
 8003668:	680b      	ldr	r3, [r1, #0]
 800366a:	1d1a      	adds	r2, r3, #4
 800366c:	600a      	str	r2, [r1, #0]
 800366e:	681e      	ldr	r6, [r3, #0]
 8003670:	2100      	movs	r1, #0
 8003672:	4630      	mov	r0, r6
 8003674:	6862      	ldr	r2, [r4, #4]
 8003676:	f002 fb09 	bl	8005c8c <memchr>
 800367a:	b108      	cbz	r0, 8003680 <_printf_i+0x1f4>
 800367c:	1b80      	subs	r0, r0, r6
 800367e:	6060      	str	r0, [r4, #4]
 8003680:	6863      	ldr	r3, [r4, #4]
 8003682:	6123      	str	r3, [r4, #16]
 8003684:	2300      	movs	r3, #0
 8003686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800368a:	e7a8      	b.n	80035de <_printf_i+0x152>
 800368c:	4632      	mov	r2, r6
 800368e:	4649      	mov	r1, r9
 8003690:	4640      	mov	r0, r8
 8003692:	6923      	ldr	r3, [r4, #16]
 8003694:	47d0      	blx	sl
 8003696:	3001      	adds	r0, #1
 8003698:	d0ab      	beq.n	80035f2 <_printf_i+0x166>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	079b      	lsls	r3, r3, #30
 800369e:	d413      	bmi.n	80036c8 <_printf_i+0x23c>
 80036a0:	68e0      	ldr	r0, [r4, #12]
 80036a2:	9b03      	ldr	r3, [sp, #12]
 80036a4:	4298      	cmp	r0, r3
 80036a6:	bfb8      	it	lt
 80036a8:	4618      	movlt	r0, r3
 80036aa:	e7a4      	b.n	80035f6 <_printf_i+0x16a>
 80036ac:	2301      	movs	r3, #1
 80036ae:	4632      	mov	r2, r6
 80036b0:	4649      	mov	r1, r9
 80036b2:	4640      	mov	r0, r8
 80036b4:	47d0      	blx	sl
 80036b6:	3001      	adds	r0, #1
 80036b8:	d09b      	beq.n	80035f2 <_printf_i+0x166>
 80036ba:	3501      	adds	r5, #1
 80036bc:	68e3      	ldr	r3, [r4, #12]
 80036be:	9903      	ldr	r1, [sp, #12]
 80036c0:	1a5b      	subs	r3, r3, r1
 80036c2:	42ab      	cmp	r3, r5
 80036c4:	dcf2      	bgt.n	80036ac <_printf_i+0x220>
 80036c6:	e7eb      	b.n	80036a0 <_printf_i+0x214>
 80036c8:	2500      	movs	r5, #0
 80036ca:	f104 0619 	add.w	r6, r4, #25
 80036ce:	e7f5      	b.n	80036bc <_printf_i+0x230>
 80036d0:	0800769a 	.word	0x0800769a
 80036d4:	080076ab 	.word	0x080076ab

080036d8 <_scanf_float>:
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	b087      	sub	sp, #28
 80036de:	9303      	str	r3, [sp, #12]
 80036e0:	688b      	ldr	r3, [r1, #8]
 80036e2:	4617      	mov	r7, r2
 80036e4:	1e5a      	subs	r2, r3, #1
 80036e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80036ea:	bf85      	ittet	hi
 80036ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80036f0:	195b      	addhi	r3, r3, r5
 80036f2:	2300      	movls	r3, #0
 80036f4:	9302      	strhi	r3, [sp, #8]
 80036f6:	bf88      	it	hi
 80036f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80036fc:	468b      	mov	fp, r1
 80036fe:	f04f 0500 	mov.w	r5, #0
 8003702:	bf8c      	ite	hi
 8003704:	608b      	strhi	r3, [r1, #8]
 8003706:	9302      	strls	r3, [sp, #8]
 8003708:	680b      	ldr	r3, [r1, #0]
 800370a:	4680      	mov	r8, r0
 800370c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003710:	f84b 3b1c 	str.w	r3, [fp], #28
 8003714:	460c      	mov	r4, r1
 8003716:	465e      	mov	r6, fp
 8003718:	46aa      	mov	sl, r5
 800371a:	46a9      	mov	r9, r5
 800371c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003720:	9501      	str	r5, [sp, #4]
 8003722:	68a2      	ldr	r2, [r4, #8]
 8003724:	b152      	cbz	r2, 800373c <_scanf_float+0x64>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b4e      	cmp	r3, #78	; 0x4e
 800372c:	d864      	bhi.n	80037f8 <_scanf_float+0x120>
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d83c      	bhi.n	80037ac <_scanf_float+0xd4>
 8003732:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003736:	b2c8      	uxtb	r0, r1
 8003738:	280e      	cmp	r0, #14
 800373a:	d93a      	bls.n	80037b2 <_scanf_float+0xda>
 800373c:	f1b9 0f00 	cmp.w	r9, #0
 8003740:	d003      	beq.n	800374a <_scanf_float+0x72>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800374e:	f1ba 0f01 	cmp.w	sl, #1
 8003752:	f200 8113 	bhi.w	800397c <_scanf_float+0x2a4>
 8003756:	455e      	cmp	r6, fp
 8003758:	f200 8105 	bhi.w	8003966 <_scanf_float+0x28e>
 800375c:	2501      	movs	r5, #1
 800375e:	4628      	mov	r0, r5
 8003760:	b007      	add	sp, #28
 8003762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003766:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800376a:	2a0d      	cmp	r2, #13
 800376c:	d8e6      	bhi.n	800373c <_scanf_float+0x64>
 800376e:	a101      	add	r1, pc, #4	; (adr r1, 8003774 <_scanf_float+0x9c>)
 8003770:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003774:	080038b3 	.word	0x080038b3
 8003778:	0800373d 	.word	0x0800373d
 800377c:	0800373d 	.word	0x0800373d
 8003780:	0800373d 	.word	0x0800373d
 8003784:	08003913 	.word	0x08003913
 8003788:	080038eb 	.word	0x080038eb
 800378c:	0800373d 	.word	0x0800373d
 8003790:	0800373d 	.word	0x0800373d
 8003794:	080038c1 	.word	0x080038c1
 8003798:	0800373d 	.word	0x0800373d
 800379c:	0800373d 	.word	0x0800373d
 80037a0:	0800373d 	.word	0x0800373d
 80037a4:	0800373d 	.word	0x0800373d
 80037a8:	08003879 	.word	0x08003879
 80037ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80037b0:	e7db      	b.n	800376a <_scanf_float+0x92>
 80037b2:	290e      	cmp	r1, #14
 80037b4:	d8c2      	bhi.n	800373c <_scanf_float+0x64>
 80037b6:	a001      	add	r0, pc, #4	; (adr r0, 80037bc <_scanf_float+0xe4>)
 80037b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80037bc:	0800386b 	.word	0x0800386b
 80037c0:	0800373d 	.word	0x0800373d
 80037c4:	0800386b 	.word	0x0800386b
 80037c8:	080038ff 	.word	0x080038ff
 80037cc:	0800373d 	.word	0x0800373d
 80037d0:	08003819 	.word	0x08003819
 80037d4:	08003855 	.word	0x08003855
 80037d8:	08003855 	.word	0x08003855
 80037dc:	08003855 	.word	0x08003855
 80037e0:	08003855 	.word	0x08003855
 80037e4:	08003855 	.word	0x08003855
 80037e8:	08003855 	.word	0x08003855
 80037ec:	08003855 	.word	0x08003855
 80037f0:	08003855 	.word	0x08003855
 80037f4:	08003855 	.word	0x08003855
 80037f8:	2b6e      	cmp	r3, #110	; 0x6e
 80037fa:	d809      	bhi.n	8003810 <_scanf_float+0x138>
 80037fc:	2b60      	cmp	r3, #96	; 0x60
 80037fe:	d8b2      	bhi.n	8003766 <_scanf_float+0x8e>
 8003800:	2b54      	cmp	r3, #84	; 0x54
 8003802:	d077      	beq.n	80038f4 <_scanf_float+0x21c>
 8003804:	2b59      	cmp	r3, #89	; 0x59
 8003806:	d199      	bne.n	800373c <_scanf_float+0x64>
 8003808:	2d07      	cmp	r5, #7
 800380a:	d197      	bne.n	800373c <_scanf_float+0x64>
 800380c:	2508      	movs	r5, #8
 800380e:	e029      	b.n	8003864 <_scanf_float+0x18c>
 8003810:	2b74      	cmp	r3, #116	; 0x74
 8003812:	d06f      	beq.n	80038f4 <_scanf_float+0x21c>
 8003814:	2b79      	cmp	r3, #121	; 0x79
 8003816:	e7f6      	b.n	8003806 <_scanf_float+0x12e>
 8003818:	6821      	ldr	r1, [r4, #0]
 800381a:	05c8      	lsls	r0, r1, #23
 800381c:	d51a      	bpl.n	8003854 <_scanf_float+0x17c>
 800381e:	9b02      	ldr	r3, [sp, #8]
 8003820:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003824:	6021      	str	r1, [r4, #0]
 8003826:	f109 0901 	add.w	r9, r9, #1
 800382a:	b11b      	cbz	r3, 8003834 <_scanf_float+0x15c>
 800382c:	3b01      	subs	r3, #1
 800382e:	3201      	adds	r2, #1
 8003830:	9302      	str	r3, [sp, #8]
 8003832:	60a2      	str	r2, [r4, #8]
 8003834:	68a3      	ldr	r3, [r4, #8]
 8003836:	3b01      	subs	r3, #1
 8003838:	60a3      	str	r3, [r4, #8]
 800383a:	6923      	ldr	r3, [r4, #16]
 800383c:	3301      	adds	r3, #1
 800383e:	6123      	str	r3, [r4, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3b01      	subs	r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	f340 8084 	ble.w	8003954 <_scanf_float+0x27c>
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	e766      	b.n	8003722 <_scanf_float+0x4a>
 8003854:	eb1a 0f05 	cmn.w	sl, r5
 8003858:	f47f af70 	bne.w	800373c <_scanf_float+0x64>
 800385c:	6822      	ldr	r2, [r4, #0]
 800385e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003862:	6022      	str	r2, [r4, #0]
 8003864:	f806 3b01 	strb.w	r3, [r6], #1
 8003868:	e7e4      	b.n	8003834 <_scanf_float+0x15c>
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	0610      	lsls	r0, r2, #24
 800386e:	f57f af65 	bpl.w	800373c <_scanf_float+0x64>
 8003872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003876:	e7f4      	b.n	8003862 <_scanf_float+0x18a>
 8003878:	f1ba 0f00 	cmp.w	sl, #0
 800387c:	d10e      	bne.n	800389c <_scanf_float+0x1c4>
 800387e:	f1b9 0f00 	cmp.w	r9, #0
 8003882:	d10e      	bne.n	80038a2 <_scanf_float+0x1ca>
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800388a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800388e:	d108      	bne.n	80038a2 <_scanf_float+0x1ca>
 8003890:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003894:	f04f 0a01 	mov.w	sl, #1
 8003898:	6022      	str	r2, [r4, #0]
 800389a:	e7e3      	b.n	8003864 <_scanf_float+0x18c>
 800389c:	f1ba 0f02 	cmp.w	sl, #2
 80038a0:	d055      	beq.n	800394e <_scanf_float+0x276>
 80038a2:	2d01      	cmp	r5, #1
 80038a4:	d002      	beq.n	80038ac <_scanf_float+0x1d4>
 80038a6:	2d04      	cmp	r5, #4
 80038a8:	f47f af48 	bne.w	800373c <_scanf_float+0x64>
 80038ac:	3501      	adds	r5, #1
 80038ae:	b2ed      	uxtb	r5, r5
 80038b0:	e7d8      	b.n	8003864 <_scanf_float+0x18c>
 80038b2:	f1ba 0f01 	cmp.w	sl, #1
 80038b6:	f47f af41 	bne.w	800373c <_scanf_float+0x64>
 80038ba:	f04f 0a02 	mov.w	sl, #2
 80038be:	e7d1      	b.n	8003864 <_scanf_float+0x18c>
 80038c0:	b97d      	cbnz	r5, 80038e2 <_scanf_float+0x20a>
 80038c2:	f1b9 0f00 	cmp.w	r9, #0
 80038c6:	f47f af3c 	bne.w	8003742 <_scanf_float+0x6a>
 80038ca:	6822      	ldr	r2, [r4, #0]
 80038cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80038d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80038d4:	f47f af39 	bne.w	800374a <_scanf_float+0x72>
 80038d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80038dc:	2501      	movs	r5, #1
 80038de:	6022      	str	r2, [r4, #0]
 80038e0:	e7c0      	b.n	8003864 <_scanf_float+0x18c>
 80038e2:	2d03      	cmp	r5, #3
 80038e4:	d0e2      	beq.n	80038ac <_scanf_float+0x1d4>
 80038e6:	2d05      	cmp	r5, #5
 80038e8:	e7de      	b.n	80038a8 <_scanf_float+0x1d0>
 80038ea:	2d02      	cmp	r5, #2
 80038ec:	f47f af26 	bne.w	800373c <_scanf_float+0x64>
 80038f0:	2503      	movs	r5, #3
 80038f2:	e7b7      	b.n	8003864 <_scanf_float+0x18c>
 80038f4:	2d06      	cmp	r5, #6
 80038f6:	f47f af21 	bne.w	800373c <_scanf_float+0x64>
 80038fa:	2507      	movs	r5, #7
 80038fc:	e7b2      	b.n	8003864 <_scanf_float+0x18c>
 80038fe:	6822      	ldr	r2, [r4, #0]
 8003900:	0591      	lsls	r1, r2, #22
 8003902:	f57f af1b 	bpl.w	800373c <_scanf_float+0x64>
 8003906:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800390a:	6022      	str	r2, [r4, #0]
 800390c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003910:	e7a8      	b.n	8003864 <_scanf_float+0x18c>
 8003912:	6822      	ldr	r2, [r4, #0]
 8003914:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003918:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800391c:	d006      	beq.n	800392c <_scanf_float+0x254>
 800391e:	0550      	lsls	r0, r2, #21
 8003920:	f57f af0c 	bpl.w	800373c <_scanf_float+0x64>
 8003924:	f1b9 0f00 	cmp.w	r9, #0
 8003928:	f43f af0f 	beq.w	800374a <_scanf_float+0x72>
 800392c:	0591      	lsls	r1, r2, #22
 800392e:	bf58      	it	pl
 8003930:	9901      	ldrpl	r1, [sp, #4]
 8003932:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003936:	bf58      	it	pl
 8003938:	eba9 0101 	subpl.w	r1, r9, r1
 800393c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003940:	f04f 0900 	mov.w	r9, #0
 8003944:	bf58      	it	pl
 8003946:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800394a:	6022      	str	r2, [r4, #0]
 800394c:	e78a      	b.n	8003864 <_scanf_float+0x18c>
 800394e:	f04f 0a03 	mov.w	sl, #3
 8003952:	e787      	b.n	8003864 <_scanf_float+0x18c>
 8003954:	4639      	mov	r1, r7
 8003956:	4640      	mov	r0, r8
 8003958:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800395c:	4798      	blx	r3
 800395e:	2800      	cmp	r0, #0
 8003960:	f43f aedf 	beq.w	8003722 <_scanf_float+0x4a>
 8003964:	e6ea      	b.n	800373c <_scanf_float+0x64>
 8003966:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800396a:	463a      	mov	r2, r7
 800396c:	4640      	mov	r0, r8
 800396e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003972:	4798      	blx	r3
 8003974:	6923      	ldr	r3, [r4, #16]
 8003976:	3b01      	subs	r3, #1
 8003978:	6123      	str	r3, [r4, #16]
 800397a:	e6ec      	b.n	8003756 <_scanf_float+0x7e>
 800397c:	1e6b      	subs	r3, r5, #1
 800397e:	2b06      	cmp	r3, #6
 8003980:	d825      	bhi.n	80039ce <_scanf_float+0x2f6>
 8003982:	2d02      	cmp	r5, #2
 8003984:	d836      	bhi.n	80039f4 <_scanf_float+0x31c>
 8003986:	455e      	cmp	r6, fp
 8003988:	f67f aee8 	bls.w	800375c <_scanf_float+0x84>
 800398c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003990:	463a      	mov	r2, r7
 8003992:	4640      	mov	r0, r8
 8003994:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003998:	4798      	blx	r3
 800399a:	6923      	ldr	r3, [r4, #16]
 800399c:	3b01      	subs	r3, #1
 800399e:	6123      	str	r3, [r4, #16]
 80039a0:	e7f1      	b.n	8003986 <_scanf_float+0x2ae>
 80039a2:	9802      	ldr	r0, [sp, #8]
 80039a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80039ac:	463a      	mov	r2, r7
 80039ae:	9002      	str	r0, [sp, #8]
 80039b0:	4640      	mov	r0, r8
 80039b2:	4798      	blx	r3
 80039b4:	6923      	ldr	r3, [r4, #16]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	6123      	str	r3, [r4, #16]
 80039ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80039be:	fa5f fa8a 	uxtb.w	sl, sl
 80039c2:	f1ba 0f02 	cmp.w	sl, #2
 80039c6:	d1ec      	bne.n	80039a2 <_scanf_float+0x2ca>
 80039c8:	3d03      	subs	r5, #3
 80039ca:	b2ed      	uxtb	r5, r5
 80039cc:	1b76      	subs	r6, r6, r5
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	05da      	lsls	r2, r3, #23
 80039d2:	d52f      	bpl.n	8003a34 <_scanf_float+0x35c>
 80039d4:	055b      	lsls	r3, r3, #21
 80039d6:	d510      	bpl.n	80039fa <_scanf_float+0x322>
 80039d8:	455e      	cmp	r6, fp
 80039da:	f67f aebf 	bls.w	800375c <_scanf_float+0x84>
 80039de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039e2:	463a      	mov	r2, r7
 80039e4:	4640      	mov	r0, r8
 80039e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80039ea:	4798      	blx	r3
 80039ec:	6923      	ldr	r3, [r4, #16]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	6123      	str	r3, [r4, #16]
 80039f2:	e7f1      	b.n	80039d8 <_scanf_float+0x300>
 80039f4:	46aa      	mov	sl, r5
 80039f6:	9602      	str	r6, [sp, #8]
 80039f8:	e7df      	b.n	80039ba <_scanf_float+0x2e2>
 80039fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80039fe:	6923      	ldr	r3, [r4, #16]
 8003a00:	2965      	cmp	r1, #101	; 0x65
 8003a02:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a06:	f106 35ff 	add.w	r5, r6, #4294967295
 8003a0a:	6123      	str	r3, [r4, #16]
 8003a0c:	d00c      	beq.n	8003a28 <_scanf_float+0x350>
 8003a0e:	2945      	cmp	r1, #69	; 0x45
 8003a10:	d00a      	beq.n	8003a28 <_scanf_float+0x350>
 8003a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a16:	463a      	mov	r2, r7
 8003a18:	4640      	mov	r0, r8
 8003a1a:	4798      	blx	r3
 8003a1c:	6923      	ldr	r3, [r4, #16]
 8003a1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	1eb5      	subs	r5, r6, #2
 8003a26:	6123      	str	r3, [r4, #16]
 8003a28:	463a      	mov	r2, r7
 8003a2a:	4640      	mov	r0, r8
 8003a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a30:	4798      	blx	r3
 8003a32:	462e      	mov	r6, r5
 8003a34:	6825      	ldr	r5, [r4, #0]
 8003a36:	f015 0510 	ands.w	r5, r5, #16
 8003a3a:	d159      	bne.n	8003af0 <_scanf_float+0x418>
 8003a3c:	7035      	strb	r5, [r6, #0]
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a48:	d11c      	bne.n	8003a84 <_scanf_float+0x3ac>
 8003a4a:	9b01      	ldr	r3, [sp, #4]
 8003a4c:	454b      	cmp	r3, r9
 8003a4e:	eba3 0209 	sub.w	r2, r3, r9
 8003a52:	d124      	bne.n	8003a9e <_scanf_float+0x3c6>
 8003a54:	2200      	movs	r2, #0
 8003a56:	4659      	mov	r1, fp
 8003a58:	4640      	mov	r0, r8
 8003a5a:	f000 fe89 	bl	8004770 <_strtod_r>
 8003a5e:	f8d4 c000 	ldr.w	ip, [r4]
 8003a62:	9b03      	ldr	r3, [sp, #12]
 8003a64:	f01c 0f02 	tst.w	ip, #2
 8003a68:	4606      	mov	r6, r0
 8003a6a:	460f      	mov	r7, r1
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	d021      	beq.n	8003ab4 <_scanf_float+0x3dc>
 8003a70:	9903      	ldr	r1, [sp, #12]
 8003a72:	1d1a      	adds	r2, r3, #4
 8003a74:	600a      	str	r2, [r1, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	e9c3 6700 	strd	r6, r7, [r3]
 8003a7c:	68e3      	ldr	r3, [r4, #12]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	60e3      	str	r3, [r4, #12]
 8003a82:	e66c      	b.n	800375e <_scanf_float+0x86>
 8003a84:	9b04      	ldr	r3, [sp, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0e4      	beq.n	8003a54 <_scanf_float+0x37c>
 8003a8a:	9905      	ldr	r1, [sp, #20]
 8003a8c:	230a      	movs	r3, #10
 8003a8e:	462a      	mov	r2, r5
 8003a90:	4640      	mov	r0, r8
 8003a92:	3101      	adds	r1, #1
 8003a94:	f000 fef8 	bl	8004888 <_strtol_r>
 8003a98:	9b04      	ldr	r3, [sp, #16]
 8003a9a:	9e05      	ldr	r6, [sp, #20]
 8003a9c:	1ac2      	subs	r2, r0, r3
 8003a9e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003aa2:	429e      	cmp	r6, r3
 8003aa4:	bf28      	it	cs
 8003aa6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003aaa:	4630      	mov	r0, r6
 8003aac:	4911      	ldr	r1, [pc, #68]	; (8003af4 <_scanf_float+0x41c>)
 8003aae:	f000 f829 	bl	8003b04 <siprintf>
 8003ab2:	e7cf      	b.n	8003a54 <_scanf_float+0x37c>
 8003ab4:	f01c 0f04 	tst.w	ip, #4
 8003ab8:	f103 0e04 	add.w	lr, r3, #4
 8003abc:	d003      	beq.n	8003ac6 <_scanf_float+0x3ee>
 8003abe:	9903      	ldr	r1, [sp, #12]
 8003ac0:	f8c1 e000 	str.w	lr, [r1]
 8003ac4:	e7d7      	b.n	8003a76 <_scanf_float+0x39e>
 8003ac6:	9a03      	ldr	r2, [sp, #12]
 8003ac8:	f8c2 e000 	str.w	lr, [r2]
 8003acc:	f8d3 8000 	ldr.w	r8, [r3]
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	f7fd f84e 	bl	8000b74 <__aeabi_dcmpun>
 8003ad8:	b128      	cbz	r0, 8003ae6 <_scanf_float+0x40e>
 8003ada:	4807      	ldr	r0, [pc, #28]	; (8003af8 <_scanf_float+0x420>)
 8003adc:	f000 f80e 	bl	8003afc <nanf>
 8003ae0:	f8c8 0000 	str.w	r0, [r8]
 8003ae4:	e7ca      	b.n	8003a7c <_scanf_float+0x3a4>
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	4639      	mov	r1, r7
 8003aea:	f7fd f8a1 	bl	8000c30 <__aeabi_d2f>
 8003aee:	e7f7      	b.n	8003ae0 <_scanf_float+0x408>
 8003af0:	2500      	movs	r5, #0
 8003af2:	e634      	b.n	800375e <_scanf_float+0x86>
 8003af4:	080076bc 	.word	0x080076bc
 8003af8:	08007657 	.word	0x08007657

08003afc <nanf>:
 8003afc:	4800      	ldr	r0, [pc, #0]	; (8003b00 <nanf+0x4>)
 8003afe:	4770      	bx	lr
 8003b00:	7fc00000 	.word	0x7fc00000

08003b04 <siprintf>:
 8003b04:	b40e      	push	{r1, r2, r3}
 8003b06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b0a:	b500      	push	{lr}
 8003b0c:	b09c      	sub	sp, #112	; 0x70
 8003b0e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b10:	9002      	str	r0, [sp, #8]
 8003b12:	9006      	str	r0, [sp, #24]
 8003b14:	9107      	str	r1, [sp, #28]
 8003b16:	9104      	str	r1, [sp, #16]
 8003b18:	4808      	ldr	r0, [pc, #32]	; (8003b3c <siprintf+0x38>)
 8003b1a:	4909      	ldr	r1, [pc, #36]	; (8003b40 <siprintf+0x3c>)
 8003b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b20:	9105      	str	r1, [sp, #20]
 8003b22:	6800      	ldr	r0, [r0, #0]
 8003b24:	a902      	add	r1, sp, #8
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	f002 fe94 	bl	8006854 <_svfiprintf_r>
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	9b02      	ldr	r3, [sp, #8]
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	b01c      	add	sp, #112	; 0x70
 8003b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b38:	b003      	add	sp, #12
 8003b3a:	4770      	bx	lr
 8003b3c:	2000000c 	.word	0x2000000c
 8003b40:	ffff0208 	.word	0xffff0208

08003b44 <sulp>:
 8003b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b48:	460f      	mov	r7, r1
 8003b4a:	4690      	mov	r8, r2
 8003b4c:	f002 fc2a 	bl	80063a4 <__ulp>
 8003b50:	4604      	mov	r4, r0
 8003b52:	460d      	mov	r5, r1
 8003b54:	f1b8 0f00 	cmp.w	r8, #0
 8003b58:	d011      	beq.n	8003b7e <sulp+0x3a>
 8003b5a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003b5e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	dd0b      	ble.n	8003b7e <sulp+0x3a>
 8003b66:	2400      	movs	r4, #0
 8003b68:	051b      	lsls	r3, r3, #20
 8003b6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003b6e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003b72:	4622      	mov	r2, r4
 8003b74:	462b      	mov	r3, r5
 8003b76:	f7fc fd63 	bl	8000640 <__aeabi_dmul>
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	460d      	mov	r5, r1
 8003b7e:	4620      	mov	r0, r4
 8003b80:	4629      	mov	r1, r5
 8003b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003b88 <_strtod_l>:
 8003b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	469b      	mov	fp, r3
 8003b8e:	2300      	movs	r3, #0
 8003b90:	b0a1      	sub	sp, #132	; 0x84
 8003b92:	931c      	str	r3, [sp, #112]	; 0x70
 8003b94:	4ba1      	ldr	r3, [pc, #644]	; (8003e1c <_strtod_l+0x294>)
 8003b96:	4682      	mov	sl, r0
 8003b98:	681f      	ldr	r7, [r3, #0]
 8003b9a:	460e      	mov	r6, r1
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8003ba0:	f7fc fad6 	bl	8000150 <strlen>
 8003ba4:	f04f 0800 	mov.w	r8, #0
 8003ba8:	4604      	mov	r4, r0
 8003baa:	f04f 0900 	mov.w	r9, #0
 8003bae:	961b      	str	r6, [sp, #108]	; 0x6c
 8003bb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bb2:	781a      	ldrb	r2, [r3, #0]
 8003bb4:	2a2b      	cmp	r2, #43	; 0x2b
 8003bb6:	d04c      	beq.n	8003c52 <_strtod_l+0xca>
 8003bb8:	d83a      	bhi.n	8003c30 <_strtod_l+0xa8>
 8003bba:	2a0d      	cmp	r2, #13
 8003bbc:	d833      	bhi.n	8003c26 <_strtod_l+0x9e>
 8003bbe:	2a08      	cmp	r2, #8
 8003bc0:	d833      	bhi.n	8003c2a <_strtod_l+0xa2>
 8003bc2:	2a00      	cmp	r2, #0
 8003bc4:	d03d      	beq.n	8003c42 <_strtod_l+0xba>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8003bca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003bcc:	782b      	ldrb	r3, [r5, #0]
 8003bce:	2b30      	cmp	r3, #48	; 0x30
 8003bd0:	f040 80af 	bne.w	8003d32 <_strtod_l+0x1aa>
 8003bd4:	786b      	ldrb	r3, [r5, #1]
 8003bd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003bda:	2b58      	cmp	r3, #88	; 0x58
 8003bdc:	d16c      	bne.n	8003cb8 <_strtod_l+0x130>
 8003bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003be0:	4650      	mov	r0, sl
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	ab1c      	add	r3, sp, #112	; 0x70
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	4a8d      	ldr	r2, [pc, #564]	; (8003e20 <_strtod_l+0x298>)
 8003bea:	f8cd b008 	str.w	fp, [sp, #8]
 8003bee:	ab1d      	add	r3, sp, #116	; 0x74
 8003bf0:	a91b      	add	r1, sp, #108	; 0x6c
 8003bf2:	f001 fd2f 	bl	8005654 <__gethex>
 8003bf6:	f010 0607 	ands.w	r6, r0, #7
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	d005      	beq.n	8003c0a <_strtod_l+0x82>
 8003bfe:	2e06      	cmp	r6, #6
 8003c00:	d129      	bne.n	8003c56 <_strtod_l+0xce>
 8003c02:	2300      	movs	r3, #0
 8003c04:	3501      	adds	r5, #1
 8003c06:	951b      	str	r5, [sp, #108]	; 0x6c
 8003c08:	930c      	str	r3, [sp, #48]	; 0x30
 8003c0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f040 8596 	bne.w	800473e <_strtod_l+0xbb6>
 8003c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c14:	b1d3      	cbz	r3, 8003c4c <_strtod_l+0xc4>
 8003c16:	4642      	mov	r2, r8
 8003c18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4619      	mov	r1, r3
 8003c20:	b021      	add	sp, #132	; 0x84
 8003c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c26:	2a20      	cmp	r2, #32
 8003c28:	d1cd      	bne.n	8003bc6 <_strtod_l+0x3e>
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c2e:	e7bf      	b.n	8003bb0 <_strtod_l+0x28>
 8003c30:	2a2d      	cmp	r2, #45	; 0x2d
 8003c32:	d1c8      	bne.n	8003bc6 <_strtod_l+0x3e>
 8003c34:	2201      	movs	r2, #1
 8003c36:	920c      	str	r2, [sp, #48]	; 0x30
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8003c3c:	785b      	ldrb	r3, [r3, #1]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1c3      	bne.n	8003bca <_strtod_l+0x42>
 8003c42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003c44:	961b      	str	r6, [sp, #108]	; 0x6c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 8577 	bne.w	800473a <_strtod_l+0xbb2>
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	464b      	mov	r3, r9
 8003c50:	e7e4      	b.n	8003c1c <_strtod_l+0x94>
 8003c52:	2200      	movs	r2, #0
 8003c54:	e7ef      	b.n	8003c36 <_strtod_l+0xae>
 8003c56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003c58:	b13a      	cbz	r2, 8003c6a <_strtod_l+0xe2>
 8003c5a:	2135      	movs	r1, #53	; 0x35
 8003c5c:	a81e      	add	r0, sp, #120	; 0x78
 8003c5e:	f002 fca5 	bl	80065ac <__copybits>
 8003c62:	4650      	mov	r0, sl
 8003c64:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003c66:	f002 f86d 	bl	8005d44 <_Bfree>
 8003c6a:	3e01      	subs	r6, #1
 8003c6c:	2e05      	cmp	r6, #5
 8003c6e:	d807      	bhi.n	8003c80 <_strtod_l+0xf8>
 8003c70:	e8df f006 	tbb	[pc, r6]
 8003c74:	1d180b0e 	.word	0x1d180b0e
 8003c78:	030e      	.short	0x030e
 8003c7a:	f04f 0900 	mov.w	r9, #0
 8003c7e:	46c8      	mov	r8, r9
 8003c80:	0721      	lsls	r1, r4, #28
 8003c82:	d5c2      	bpl.n	8003c0a <_strtod_l+0x82>
 8003c84:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003c88:	e7bf      	b.n	8003c0a <_strtod_l+0x82>
 8003c8a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8003c8e:	e7f7      	b.n	8003c80 <_strtod_l+0xf8>
 8003c90:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003c92:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8003c96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003c9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003c9e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003ca2:	e7ed      	b.n	8003c80 <_strtod_l+0xf8>
 8003ca4:	f04f 0800 	mov.w	r8, #0
 8003ca8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003e24 <_strtod_l+0x29c>
 8003cac:	e7e8      	b.n	8003c80 <_strtod_l+0xf8>
 8003cae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003cb2:	f04f 38ff 	mov.w	r8, #4294967295
 8003cb6:	e7e3      	b.n	8003c80 <_strtod_l+0xf8>
 8003cb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	921b      	str	r2, [sp, #108]	; 0x6c
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	2b30      	cmp	r3, #48	; 0x30
 8003cc2:	d0f9      	beq.n	8003cb8 <_strtod_l+0x130>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0a0      	beq.n	8003c0a <_strtod_l+0x82>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	9307      	str	r3, [sp, #28]
 8003ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cce:	220a      	movs	r2, #10
 8003cd0:	9308      	str	r3, [sp, #32]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	469b      	mov	fp, r3
 8003cd6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003cda:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003cdc:	7805      	ldrb	r5, [r0, #0]
 8003cde:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003ce2:	b2d9      	uxtb	r1, r3
 8003ce4:	2909      	cmp	r1, #9
 8003ce6:	d926      	bls.n	8003d36 <_strtod_l+0x1ae>
 8003ce8:	4622      	mov	r2, r4
 8003cea:	4639      	mov	r1, r7
 8003cec:	f002 fec8 	bl	8006a80 <strncmp>
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	d032      	beq.n	8003d5a <_strtod_l+0x1d2>
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	465c      	mov	r4, fp
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	9004      	str	r0, [sp, #16]
 8003cfe:	2b65      	cmp	r3, #101	; 0x65
 8003d00:	d001      	beq.n	8003d06 <_strtod_l+0x17e>
 8003d02:	2b45      	cmp	r3, #69	; 0x45
 8003d04:	d113      	bne.n	8003d2e <_strtod_l+0x1a6>
 8003d06:	b91c      	cbnz	r4, 8003d10 <_strtod_l+0x188>
 8003d08:	9b07      	ldr	r3, [sp, #28]
 8003d0a:	4303      	orrs	r3, r0
 8003d0c:	d099      	beq.n	8003c42 <_strtod_l+0xba>
 8003d0e:	2400      	movs	r4, #0
 8003d10:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003d12:	1c73      	adds	r3, r6, #1
 8003d14:	931b      	str	r3, [sp, #108]	; 0x6c
 8003d16:	7873      	ldrb	r3, [r6, #1]
 8003d18:	2b2b      	cmp	r3, #43	; 0x2b
 8003d1a:	d078      	beq.n	8003e0e <_strtod_l+0x286>
 8003d1c:	2b2d      	cmp	r3, #45	; 0x2d
 8003d1e:	d07b      	beq.n	8003e18 <_strtod_l+0x290>
 8003d20:	2700      	movs	r7, #0
 8003d22:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003d26:	2909      	cmp	r1, #9
 8003d28:	f240 8082 	bls.w	8003e30 <_strtod_l+0x2a8>
 8003d2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8003d2e:	2500      	movs	r5, #0
 8003d30:	e09e      	b.n	8003e70 <_strtod_l+0x2e8>
 8003d32:	2300      	movs	r3, #0
 8003d34:	e7c9      	b.n	8003cca <_strtod_l+0x142>
 8003d36:	f1bb 0f08 	cmp.w	fp, #8
 8003d3a:	bfd5      	itete	le
 8003d3c:	9906      	ldrle	r1, [sp, #24]
 8003d3e:	9905      	ldrgt	r1, [sp, #20]
 8003d40:	fb02 3301 	mlale	r3, r2, r1, r3
 8003d44:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003d48:	f100 0001 	add.w	r0, r0, #1
 8003d4c:	bfd4      	ite	le
 8003d4e:	9306      	strle	r3, [sp, #24]
 8003d50:	9305      	strgt	r3, [sp, #20]
 8003d52:	f10b 0b01 	add.w	fp, fp, #1
 8003d56:	901b      	str	r0, [sp, #108]	; 0x6c
 8003d58:	e7bf      	b.n	8003cda <_strtod_l+0x152>
 8003d5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d5c:	191a      	adds	r2, r3, r4
 8003d5e:	921b      	str	r2, [sp, #108]	; 0x6c
 8003d60:	5d1b      	ldrb	r3, [r3, r4]
 8003d62:	f1bb 0f00 	cmp.w	fp, #0
 8003d66:	d036      	beq.n	8003dd6 <_strtod_l+0x24e>
 8003d68:	465c      	mov	r4, fp
 8003d6a:	9004      	str	r0, [sp, #16]
 8003d6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d70:	2a09      	cmp	r2, #9
 8003d72:	d912      	bls.n	8003d9a <_strtod_l+0x212>
 8003d74:	2201      	movs	r2, #1
 8003d76:	e7c2      	b.n	8003cfe <_strtod_l+0x176>
 8003d78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d7a:	3001      	adds	r0, #1
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	921b      	str	r2, [sp, #108]	; 0x6c
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b30      	cmp	r3, #48	; 0x30
 8003d84:	d0f8      	beq.n	8003d78 <_strtod_l+0x1f0>
 8003d86:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003d8a:	2a08      	cmp	r2, #8
 8003d8c:	f200 84dc 	bhi.w	8004748 <_strtod_l+0xbc0>
 8003d90:	9004      	str	r0, [sp, #16]
 8003d92:	2000      	movs	r0, #0
 8003d94:	4604      	mov	r4, r0
 8003d96:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003d98:	9208      	str	r2, [sp, #32]
 8003d9a:	3b30      	subs	r3, #48	; 0x30
 8003d9c:	f100 0201 	add.w	r2, r0, #1
 8003da0:	d013      	beq.n	8003dca <_strtod_l+0x242>
 8003da2:	9904      	ldr	r1, [sp, #16]
 8003da4:	1905      	adds	r5, r0, r4
 8003da6:	4411      	add	r1, r2
 8003da8:	9104      	str	r1, [sp, #16]
 8003daa:	4622      	mov	r2, r4
 8003dac:	210a      	movs	r1, #10
 8003dae:	42aa      	cmp	r2, r5
 8003db0:	d113      	bne.n	8003dda <_strtod_l+0x252>
 8003db2:	1822      	adds	r2, r4, r0
 8003db4:	2a08      	cmp	r2, #8
 8003db6:	f104 0401 	add.w	r4, r4, #1
 8003dba:	4404      	add	r4, r0
 8003dbc:	dc1b      	bgt.n	8003df6 <_strtod_l+0x26e>
 8003dbe:	220a      	movs	r2, #10
 8003dc0:	9906      	ldr	r1, [sp, #24]
 8003dc2:	fb02 3301 	mla	r3, r2, r1, r3
 8003dc6:	9306      	str	r3, [sp, #24]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003dcc:	4610      	mov	r0, r2
 8003dce:	1c59      	adds	r1, r3, #1
 8003dd0:	911b      	str	r1, [sp, #108]	; 0x6c
 8003dd2:	785b      	ldrb	r3, [r3, #1]
 8003dd4:	e7ca      	b.n	8003d6c <_strtod_l+0x1e4>
 8003dd6:	4658      	mov	r0, fp
 8003dd8:	e7d3      	b.n	8003d82 <_strtod_l+0x1fa>
 8003dda:	2a08      	cmp	r2, #8
 8003ddc:	dc04      	bgt.n	8003de8 <_strtod_l+0x260>
 8003dde:	9f06      	ldr	r7, [sp, #24]
 8003de0:	434f      	muls	r7, r1
 8003de2:	9706      	str	r7, [sp, #24]
 8003de4:	3201      	adds	r2, #1
 8003de6:	e7e2      	b.n	8003dae <_strtod_l+0x226>
 8003de8:	1c57      	adds	r7, r2, #1
 8003dea:	2f10      	cmp	r7, #16
 8003dec:	bfde      	ittt	le
 8003dee:	9f05      	ldrle	r7, [sp, #20]
 8003df0:	434f      	mulle	r7, r1
 8003df2:	9705      	strle	r7, [sp, #20]
 8003df4:	e7f6      	b.n	8003de4 <_strtod_l+0x25c>
 8003df6:	2c10      	cmp	r4, #16
 8003df8:	bfdf      	itttt	le
 8003dfa:	220a      	movle	r2, #10
 8003dfc:	9905      	ldrle	r1, [sp, #20]
 8003dfe:	fb02 3301 	mlale	r3, r2, r1, r3
 8003e02:	9305      	strle	r3, [sp, #20]
 8003e04:	e7e0      	b.n	8003dc8 <_strtod_l+0x240>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2201      	movs	r2, #1
 8003e0a:	9304      	str	r3, [sp, #16]
 8003e0c:	e77c      	b.n	8003d08 <_strtod_l+0x180>
 8003e0e:	2700      	movs	r7, #0
 8003e10:	1cb3      	adds	r3, r6, #2
 8003e12:	931b      	str	r3, [sp, #108]	; 0x6c
 8003e14:	78b3      	ldrb	r3, [r6, #2]
 8003e16:	e784      	b.n	8003d22 <_strtod_l+0x19a>
 8003e18:	2701      	movs	r7, #1
 8003e1a:	e7f9      	b.n	8003e10 <_strtod_l+0x288>
 8003e1c:	08007918 	.word	0x08007918
 8003e20:	080076c4 	.word	0x080076c4
 8003e24:	7ff00000 	.word	0x7ff00000
 8003e28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e2a:	1c59      	adds	r1, r3, #1
 8003e2c:	911b      	str	r1, [sp, #108]	; 0x6c
 8003e2e:	785b      	ldrb	r3, [r3, #1]
 8003e30:	2b30      	cmp	r3, #48	; 0x30
 8003e32:	d0f9      	beq.n	8003e28 <_strtod_l+0x2a0>
 8003e34:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003e38:	2908      	cmp	r1, #8
 8003e3a:	f63f af78 	bhi.w	8003d2e <_strtod_l+0x1a6>
 8003e3e:	f04f 0e0a 	mov.w	lr, #10
 8003e42:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8003e46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e48:	9309      	str	r3, [sp, #36]	; 0x24
 8003e4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e4c:	1c59      	adds	r1, r3, #1
 8003e4e:	911b      	str	r1, [sp, #108]	; 0x6c
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8003e56:	2d09      	cmp	r5, #9
 8003e58:	d935      	bls.n	8003ec6 <_strtod_l+0x33e>
 8003e5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003e5c:	1b49      	subs	r1, r1, r5
 8003e5e:	2908      	cmp	r1, #8
 8003e60:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003e64:	dc02      	bgt.n	8003e6c <_strtod_l+0x2e4>
 8003e66:	4565      	cmp	r5, ip
 8003e68:	bfa8      	it	ge
 8003e6a:	4665      	movge	r5, ip
 8003e6c:	b107      	cbz	r7, 8003e70 <_strtod_l+0x2e8>
 8003e6e:	426d      	negs	r5, r5
 8003e70:	2c00      	cmp	r4, #0
 8003e72:	d14c      	bne.n	8003f0e <_strtod_l+0x386>
 8003e74:	9907      	ldr	r1, [sp, #28]
 8003e76:	4301      	orrs	r1, r0
 8003e78:	f47f aec7 	bne.w	8003c0a <_strtod_l+0x82>
 8003e7c:	2a00      	cmp	r2, #0
 8003e7e:	f47f aee0 	bne.w	8003c42 <_strtod_l+0xba>
 8003e82:	2b69      	cmp	r3, #105	; 0x69
 8003e84:	d026      	beq.n	8003ed4 <_strtod_l+0x34c>
 8003e86:	dc23      	bgt.n	8003ed0 <_strtod_l+0x348>
 8003e88:	2b49      	cmp	r3, #73	; 0x49
 8003e8a:	d023      	beq.n	8003ed4 <_strtod_l+0x34c>
 8003e8c:	2b4e      	cmp	r3, #78	; 0x4e
 8003e8e:	f47f aed8 	bne.w	8003c42 <_strtod_l+0xba>
 8003e92:	499c      	ldr	r1, [pc, #624]	; (8004104 <_strtod_l+0x57c>)
 8003e94:	a81b      	add	r0, sp, #108	; 0x6c
 8003e96:	f001 fe2b 	bl	8005af0 <__match>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	f43f aed1 	beq.w	8003c42 <_strtod_l+0xba>
 8003ea0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b28      	cmp	r3, #40	; 0x28
 8003ea6:	d12c      	bne.n	8003f02 <_strtod_l+0x37a>
 8003ea8:	4997      	ldr	r1, [pc, #604]	; (8004108 <_strtod_l+0x580>)
 8003eaa:	aa1e      	add	r2, sp, #120	; 0x78
 8003eac:	a81b      	add	r0, sp, #108	; 0x6c
 8003eae:	f001 fe33 	bl	8005b18 <__hexnan>
 8003eb2:	2805      	cmp	r0, #5
 8003eb4:	d125      	bne.n	8003f02 <_strtod_l+0x37a>
 8003eb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003eb8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8003ebc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003ec0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003ec4:	e6a1      	b.n	8003c0a <_strtod_l+0x82>
 8003ec6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8003eca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003ece:	e7bc      	b.n	8003e4a <_strtod_l+0x2c2>
 8003ed0:	2b6e      	cmp	r3, #110	; 0x6e
 8003ed2:	e7dc      	b.n	8003e8e <_strtod_l+0x306>
 8003ed4:	498d      	ldr	r1, [pc, #564]	; (800410c <_strtod_l+0x584>)
 8003ed6:	a81b      	add	r0, sp, #108	; 0x6c
 8003ed8:	f001 fe0a 	bl	8005af0 <__match>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f43f aeb0 	beq.w	8003c42 <_strtod_l+0xba>
 8003ee2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ee4:	498a      	ldr	r1, [pc, #552]	; (8004110 <_strtod_l+0x588>)
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	a81b      	add	r0, sp, #108	; 0x6c
 8003eea:	931b      	str	r3, [sp, #108]	; 0x6c
 8003eec:	f001 fe00 	bl	8005af0 <__match>
 8003ef0:	b910      	cbnz	r0, 8003ef8 <_strtod_l+0x370>
 8003ef2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	931b      	str	r3, [sp, #108]	; 0x6c
 8003ef8:	f04f 0800 	mov.w	r8, #0
 8003efc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004120 <_strtod_l+0x598>
 8003f00:	e683      	b.n	8003c0a <_strtod_l+0x82>
 8003f02:	4884      	ldr	r0, [pc, #528]	; (8004114 <_strtod_l+0x58c>)
 8003f04:	f002 fda6 	bl	8006a54 <nan>
 8003f08:	4680      	mov	r8, r0
 8003f0a:	4689      	mov	r9, r1
 8003f0c:	e67d      	b.n	8003c0a <_strtod_l+0x82>
 8003f0e:	9b04      	ldr	r3, [sp, #16]
 8003f10:	f1bb 0f00 	cmp.w	fp, #0
 8003f14:	bf08      	it	eq
 8003f16:	46a3      	moveq	fp, r4
 8003f18:	1aeb      	subs	r3, r5, r3
 8003f1a:	2c10      	cmp	r4, #16
 8003f1c:	9806      	ldr	r0, [sp, #24]
 8003f1e:	4626      	mov	r6, r4
 8003f20:	9307      	str	r3, [sp, #28]
 8003f22:	bfa8      	it	ge
 8003f24:	2610      	movge	r6, #16
 8003f26:	f7fc fb11 	bl	800054c <__aeabi_ui2d>
 8003f2a:	2c09      	cmp	r4, #9
 8003f2c:	4680      	mov	r8, r0
 8003f2e:	4689      	mov	r9, r1
 8003f30:	dd13      	ble.n	8003f5a <_strtod_l+0x3d2>
 8003f32:	4b79      	ldr	r3, [pc, #484]	; (8004118 <_strtod_l+0x590>)
 8003f34:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003f38:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003f3c:	f7fc fb80 	bl	8000640 <__aeabi_dmul>
 8003f40:	4680      	mov	r8, r0
 8003f42:	9805      	ldr	r0, [sp, #20]
 8003f44:	4689      	mov	r9, r1
 8003f46:	f7fc fb01 	bl	800054c <__aeabi_ui2d>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4640      	mov	r0, r8
 8003f50:	4649      	mov	r1, r9
 8003f52:	f7fc f9bf 	bl	80002d4 <__adddf3>
 8003f56:	4680      	mov	r8, r0
 8003f58:	4689      	mov	r9, r1
 8003f5a:	2c0f      	cmp	r4, #15
 8003f5c:	dc36      	bgt.n	8003fcc <_strtod_l+0x444>
 8003f5e:	9b07      	ldr	r3, [sp, #28]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f43f ae52 	beq.w	8003c0a <_strtod_l+0x82>
 8003f66:	dd22      	ble.n	8003fae <_strtod_l+0x426>
 8003f68:	2b16      	cmp	r3, #22
 8003f6a:	dc09      	bgt.n	8003f80 <_strtod_l+0x3f8>
 8003f6c:	4c6a      	ldr	r4, [pc, #424]	; (8004118 <_strtod_l+0x590>)
 8003f6e:	4642      	mov	r2, r8
 8003f70:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8003f74:	464b      	mov	r3, r9
 8003f76:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003f7a:	f7fc fb61 	bl	8000640 <__aeabi_dmul>
 8003f7e:	e7c3      	b.n	8003f08 <_strtod_l+0x380>
 8003f80:	9a07      	ldr	r2, [sp, #28]
 8003f82:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003f86:	4293      	cmp	r3, r2
 8003f88:	db20      	blt.n	8003fcc <_strtod_l+0x444>
 8003f8a:	4d63      	ldr	r5, [pc, #396]	; (8004118 <_strtod_l+0x590>)
 8003f8c:	f1c4 040f 	rsb	r4, r4, #15
 8003f90:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003f94:	4642      	mov	r2, r8
 8003f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	f7fc fb50 	bl	8000640 <__aeabi_dmul>
 8003fa0:	9b07      	ldr	r3, [sp, #28]
 8003fa2:	1b1c      	subs	r4, r3, r4
 8003fa4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003fa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003fac:	e7e5      	b.n	8003f7a <_strtod_l+0x3f2>
 8003fae:	9b07      	ldr	r3, [sp, #28]
 8003fb0:	3316      	adds	r3, #22
 8003fb2:	db0b      	blt.n	8003fcc <_strtod_l+0x444>
 8003fb4:	9b04      	ldr	r3, [sp, #16]
 8003fb6:	4a58      	ldr	r2, [pc, #352]	; (8004118 <_strtod_l+0x590>)
 8003fb8:	1b5d      	subs	r5, r3, r5
 8003fba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003fbe:	4640      	mov	r0, r8
 8003fc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	f7fc fc65 	bl	8000894 <__aeabi_ddiv>
 8003fca:	e79d      	b.n	8003f08 <_strtod_l+0x380>
 8003fcc:	9b07      	ldr	r3, [sp, #28]
 8003fce:	1ba6      	subs	r6, r4, r6
 8003fd0:	441e      	add	r6, r3
 8003fd2:	2e00      	cmp	r6, #0
 8003fd4:	dd71      	ble.n	80040ba <_strtod_l+0x532>
 8003fd6:	f016 030f 	ands.w	r3, r6, #15
 8003fda:	d00a      	beq.n	8003ff2 <_strtod_l+0x46a>
 8003fdc:	494e      	ldr	r1, [pc, #312]	; (8004118 <_strtod_l+0x590>)
 8003fde:	4642      	mov	r2, r8
 8003fe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fe8:	464b      	mov	r3, r9
 8003fea:	f7fc fb29 	bl	8000640 <__aeabi_dmul>
 8003fee:	4680      	mov	r8, r0
 8003ff0:	4689      	mov	r9, r1
 8003ff2:	f036 060f 	bics.w	r6, r6, #15
 8003ff6:	d050      	beq.n	800409a <_strtod_l+0x512>
 8003ff8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8003ffc:	dd27      	ble.n	800404e <_strtod_l+0x4c6>
 8003ffe:	f04f 0b00 	mov.w	fp, #0
 8004002:	f8cd b010 	str.w	fp, [sp, #16]
 8004006:	f8cd b020 	str.w	fp, [sp, #32]
 800400a:	f8cd b018 	str.w	fp, [sp, #24]
 800400e:	2322      	movs	r3, #34	; 0x22
 8004010:	f04f 0800 	mov.w	r8, #0
 8004014:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004120 <_strtod_l+0x598>
 8004018:	f8ca 3000 	str.w	r3, [sl]
 800401c:	9b08      	ldr	r3, [sp, #32]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f43f adf3 	beq.w	8003c0a <_strtod_l+0x82>
 8004024:	4650      	mov	r0, sl
 8004026:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004028:	f001 fe8c 	bl	8005d44 <_Bfree>
 800402c:	4650      	mov	r0, sl
 800402e:	9906      	ldr	r1, [sp, #24]
 8004030:	f001 fe88 	bl	8005d44 <_Bfree>
 8004034:	4650      	mov	r0, sl
 8004036:	9904      	ldr	r1, [sp, #16]
 8004038:	f001 fe84 	bl	8005d44 <_Bfree>
 800403c:	4650      	mov	r0, sl
 800403e:	9908      	ldr	r1, [sp, #32]
 8004040:	f001 fe80 	bl	8005d44 <_Bfree>
 8004044:	4659      	mov	r1, fp
 8004046:	4650      	mov	r0, sl
 8004048:	f001 fe7c 	bl	8005d44 <_Bfree>
 800404c:	e5dd      	b.n	8003c0a <_strtod_l+0x82>
 800404e:	2300      	movs	r3, #0
 8004050:	4640      	mov	r0, r8
 8004052:	4649      	mov	r1, r9
 8004054:	461f      	mov	r7, r3
 8004056:	1136      	asrs	r6, r6, #4
 8004058:	2e01      	cmp	r6, #1
 800405a:	dc21      	bgt.n	80040a0 <_strtod_l+0x518>
 800405c:	b10b      	cbz	r3, 8004062 <_strtod_l+0x4da>
 800405e:	4680      	mov	r8, r0
 8004060:	4689      	mov	r9, r1
 8004062:	4b2e      	ldr	r3, [pc, #184]	; (800411c <_strtod_l+0x594>)
 8004064:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004068:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800406c:	4642      	mov	r2, r8
 800406e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004072:	464b      	mov	r3, r9
 8004074:	f7fc fae4 	bl	8000640 <__aeabi_dmul>
 8004078:	4b29      	ldr	r3, [pc, #164]	; (8004120 <_strtod_l+0x598>)
 800407a:	460a      	mov	r2, r1
 800407c:	400b      	ands	r3, r1
 800407e:	4929      	ldr	r1, [pc, #164]	; (8004124 <_strtod_l+0x59c>)
 8004080:	4680      	mov	r8, r0
 8004082:	428b      	cmp	r3, r1
 8004084:	d8bb      	bhi.n	8003ffe <_strtod_l+0x476>
 8004086:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800408a:	428b      	cmp	r3, r1
 800408c:	bf86      	itte	hi
 800408e:	f04f 38ff 	movhi.w	r8, #4294967295
 8004092:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004128 <_strtod_l+0x5a0>
 8004096:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800409a:	2300      	movs	r3, #0
 800409c:	9305      	str	r3, [sp, #20]
 800409e:	e07e      	b.n	800419e <_strtod_l+0x616>
 80040a0:	07f2      	lsls	r2, r6, #31
 80040a2:	d507      	bpl.n	80040b4 <_strtod_l+0x52c>
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <_strtod_l+0x594>)
 80040a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f7fc fac7 	bl	8000640 <__aeabi_dmul>
 80040b2:	2301      	movs	r3, #1
 80040b4:	3701      	adds	r7, #1
 80040b6:	1076      	asrs	r6, r6, #1
 80040b8:	e7ce      	b.n	8004058 <_strtod_l+0x4d0>
 80040ba:	d0ee      	beq.n	800409a <_strtod_l+0x512>
 80040bc:	4276      	negs	r6, r6
 80040be:	f016 020f 	ands.w	r2, r6, #15
 80040c2:	d00a      	beq.n	80040da <_strtod_l+0x552>
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <_strtod_l+0x590>)
 80040c6:	4640      	mov	r0, r8
 80040c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040cc:	4649      	mov	r1, r9
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f7fc fbdf 	bl	8000894 <__aeabi_ddiv>
 80040d6:	4680      	mov	r8, r0
 80040d8:	4689      	mov	r9, r1
 80040da:	1136      	asrs	r6, r6, #4
 80040dc:	d0dd      	beq.n	800409a <_strtod_l+0x512>
 80040de:	2e1f      	cmp	r6, #31
 80040e0:	dd24      	ble.n	800412c <_strtod_l+0x5a4>
 80040e2:	f04f 0b00 	mov.w	fp, #0
 80040e6:	f8cd b010 	str.w	fp, [sp, #16]
 80040ea:	f8cd b020 	str.w	fp, [sp, #32]
 80040ee:	f8cd b018 	str.w	fp, [sp, #24]
 80040f2:	2322      	movs	r3, #34	; 0x22
 80040f4:	f04f 0800 	mov.w	r8, #0
 80040f8:	f04f 0900 	mov.w	r9, #0
 80040fc:	f8ca 3000 	str.w	r3, [sl]
 8004100:	e78c      	b.n	800401c <_strtod_l+0x494>
 8004102:	bf00      	nop
 8004104:	08007695 	.word	0x08007695
 8004108:	080076d8 	.word	0x080076d8
 800410c:	0800768d 	.word	0x0800768d
 8004110:	0800781c 	.word	0x0800781c
 8004114:	08007657 	.word	0x08007657
 8004118:	080079b8 	.word	0x080079b8
 800411c:	08007990 	.word	0x08007990
 8004120:	7ff00000 	.word	0x7ff00000
 8004124:	7ca00000 	.word	0x7ca00000
 8004128:	7fefffff 	.word	0x7fefffff
 800412c:	f016 0310 	ands.w	r3, r6, #16
 8004130:	bf18      	it	ne
 8004132:	236a      	movne	r3, #106	; 0x6a
 8004134:	4640      	mov	r0, r8
 8004136:	9305      	str	r3, [sp, #20]
 8004138:	4649      	mov	r1, r9
 800413a:	2300      	movs	r3, #0
 800413c:	4fb2      	ldr	r7, [pc, #712]	; (8004408 <_strtod_l+0x880>)
 800413e:	07f2      	lsls	r2, r6, #31
 8004140:	d504      	bpl.n	800414c <_strtod_l+0x5c4>
 8004142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004146:	f7fc fa7b 	bl	8000640 <__aeabi_dmul>
 800414a:	2301      	movs	r3, #1
 800414c:	1076      	asrs	r6, r6, #1
 800414e:	f107 0708 	add.w	r7, r7, #8
 8004152:	d1f4      	bne.n	800413e <_strtod_l+0x5b6>
 8004154:	b10b      	cbz	r3, 800415a <_strtod_l+0x5d2>
 8004156:	4680      	mov	r8, r0
 8004158:	4689      	mov	r9, r1
 800415a:	9b05      	ldr	r3, [sp, #20]
 800415c:	b1bb      	cbz	r3, 800418e <_strtod_l+0x606>
 800415e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8004162:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004166:	2b00      	cmp	r3, #0
 8004168:	4649      	mov	r1, r9
 800416a:	dd10      	ble.n	800418e <_strtod_l+0x606>
 800416c:	2b1f      	cmp	r3, #31
 800416e:	f340 812b 	ble.w	80043c8 <_strtod_l+0x840>
 8004172:	2b34      	cmp	r3, #52	; 0x34
 8004174:	bfd8      	it	le
 8004176:	f04f 32ff 	movle.w	r2, #4294967295
 800417a:	f04f 0800 	mov.w	r8, #0
 800417e:	bfcf      	iteee	gt
 8004180:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004184:	3b20      	suble	r3, #32
 8004186:	fa02 f303 	lslle.w	r3, r2, r3
 800418a:	ea03 0901 	andle.w	r9, r3, r1
 800418e:	2200      	movs	r2, #0
 8004190:	2300      	movs	r3, #0
 8004192:	4640      	mov	r0, r8
 8004194:	4649      	mov	r1, r9
 8004196:	f7fc fcbb 	bl	8000b10 <__aeabi_dcmpeq>
 800419a:	2800      	cmp	r0, #0
 800419c:	d1a1      	bne.n	80040e2 <_strtod_l+0x55a>
 800419e:	9b06      	ldr	r3, [sp, #24]
 80041a0:	465a      	mov	r2, fp
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4650      	mov	r0, sl
 80041a6:	4623      	mov	r3, r4
 80041a8:	9908      	ldr	r1, [sp, #32]
 80041aa:	f001 fe37 	bl	8005e1c <__s2b>
 80041ae:	9008      	str	r0, [sp, #32]
 80041b0:	2800      	cmp	r0, #0
 80041b2:	f43f af24 	beq.w	8003ffe <_strtod_l+0x476>
 80041b6:	9b04      	ldr	r3, [sp, #16]
 80041b8:	f04f 0b00 	mov.w	fp, #0
 80041bc:	1b5d      	subs	r5, r3, r5
 80041be:	9b07      	ldr	r3, [sp, #28]
 80041c0:	f8cd b010 	str.w	fp, [sp, #16]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bfb4      	ite	lt
 80041c8:	462b      	movlt	r3, r5
 80041ca:	2300      	movge	r3, #0
 80041cc:	930e      	str	r3, [sp, #56]	; 0x38
 80041ce:	9b07      	ldr	r3, [sp, #28]
 80041d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80041d4:	9316      	str	r3, [sp, #88]	; 0x58
 80041d6:	9b08      	ldr	r3, [sp, #32]
 80041d8:	4650      	mov	r0, sl
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	f001 fd72 	bl	8005cc4 <_Balloc>
 80041e0:	9006      	str	r0, [sp, #24]
 80041e2:	2800      	cmp	r0, #0
 80041e4:	f43f af13 	beq.w	800400e <_strtod_l+0x486>
 80041e8:	9b08      	ldr	r3, [sp, #32]
 80041ea:	300c      	adds	r0, #12
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	f103 010c 	add.w	r1, r3, #12
 80041f2:	3202      	adds	r2, #2
 80041f4:	0092      	lsls	r2, r2, #2
 80041f6:	f001 fd57 	bl	8005ca8 <memcpy>
 80041fa:	ab1e      	add	r3, sp, #120	; 0x78
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	4642      	mov	r2, r8
 8004204:	464b      	mov	r3, r9
 8004206:	4650      	mov	r0, sl
 8004208:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800420c:	f002 f944 	bl	8006498 <__d2b>
 8004210:	901c      	str	r0, [sp, #112]	; 0x70
 8004212:	2800      	cmp	r0, #0
 8004214:	f43f aefb 	beq.w	800400e <_strtod_l+0x486>
 8004218:	2101      	movs	r1, #1
 800421a:	4650      	mov	r0, sl
 800421c:	f001 fe96 	bl	8005f4c <__i2b>
 8004220:	4603      	mov	r3, r0
 8004222:	9004      	str	r0, [sp, #16]
 8004224:	2800      	cmp	r0, #0
 8004226:	f43f aef2 	beq.w	800400e <_strtod_l+0x486>
 800422a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800422c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800422e:	2d00      	cmp	r5, #0
 8004230:	bfab      	itete	ge
 8004232:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004234:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004236:	18ee      	addge	r6, r5, r3
 8004238:	1b5c      	sublt	r4, r3, r5
 800423a:	9b05      	ldr	r3, [sp, #20]
 800423c:	bfa8      	it	ge
 800423e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004240:	eba5 0503 	sub.w	r5, r5, r3
 8004244:	4415      	add	r5, r2
 8004246:	4b71      	ldr	r3, [pc, #452]	; (800440c <_strtod_l+0x884>)
 8004248:	f105 35ff 	add.w	r5, r5, #4294967295
 800424c:	bfb8      	it	lt
 800424e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004250:	429d      	cmp	r5, r3
 8004252:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004256:	f280 80c9 	bge.w	80043ec <_strtod_l+0x864>
 800425a:	1b5b      	subs	r3, r3, r5
 800425c:	2b1f      	cmp	r3, #31
 800425e:	f04f 0701 	mov.w	r7, #1
 8004262:	eba2 0203 	sub.w	r2, r2, r3
 8004266:	f300 80b6 	bgt.w	80043d6 <_strtod_l+0x84e>
 800426a:	2500      	movs	r5, #0
 800426c:	fa07 f303 	lsl.w	r3, r7, r3
 8004270:	930f      	str	r3, [sp, #60]	; 0x3c
 8004272:	18b7      	adds	r7, r6, r2
 8004274:	9b05      	ldr	r3, [sp, #20]
 8004276:	42be      	cmp	r6, r7
 8004278:	4414      	add	r4, r2
 800427a:	441c      	add	r4, r3
 800427c:	4633      	mov	r3, r6
 800427e:	bfa8      	it	ge
 8004280:	463b      	movge	r3, r7
 8004282:	42a3      	cmp	r3, r4
 8004284:	bfa8      	it	ge
 8004286:	4623      	movge	r3, r4
 8004288:	2b00      	cmp	r3, #0
 800428a:	bfc2      	ittt	gt
 800428c:	1aff      	subgt	r7, r7, r3
 800428e:	1ae4      	subgt	r4, r4, r3
 8004290:	1af6      	subgt	r6, r6, r3
 8004292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	dd17      	ble.n	80042c8 <_strtod_l+0x740>
 8004298:	461a      	mov	r2, r3
 800429a:	4650      	mov	r0, sl
 800429c:	9904      	ldr	r1, [sp, #16]
 800429e:	f001 ff0f 	bl	80060c0 <__pow5mult>
 80042a2:	9004      	str	r0, [sp, #16]
 80042a4:	2800      	cmp	r0, #0
 80042a6:	f43f aeb2 	beq.w	800400e <_strtod_l+0x486>
 80042aa:	4601      	mov	r1, r0
 80042ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80042ae:	4650      	mov	r0, sl
 80042b0:	f001 fe62 	bl	8005f78 <__multiply>
 80042b4:	9009      	str	r0, [sp, #36]	; 0x24
 80042b6:	2800      	cmp	r0, #0
 80042b8:	f43f aea9 	beq.w	800400e <_strtod_l+0x486>
 80042bc:	4650      	mov	r0, sl
 80042be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80042c0:	f001 fd40 	bl	8005d44 <_Bfree>
 80042c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c6:	931c      	str	r3, [sp, #112]	; 0x70
 80042c8:	2f00      	cmp	r7, #0
 80042ca:	f300 8093 	bgt.w	80043f4 <_strtod_l+0x86c>
 80042ce:	9b07      	ldr	r3, [sp, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	dd08      	ble.n	80042e6 <_strtod_l+0x75e>
 80042d4:	4650      	mov	r0, sl
 80042d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80042d8:	9906      	ldr	r1, [sp, #24]
 80042da:	f001 fef1 	bl	80060c0 <__pow5mult>
 80042de:	9006      	str	r0, [sp, #24]
 80042e0:	2800      	cmp	r0, #0
 80042e2:	f43f ae94 	beq.w	800400e <_strtod_l+0x486>
 80042e6:	2c00      	cmp	r4, #0
 80042e8:	dd08      	ble.n	80042fc <_strtod_l+0x774>
 80042ea:	4622      	mov	r2, r4
 80042ec:	4650      	mov	r0, sl
 80042ee:	9906      	ldr	r1, [sp, #24]
 80042f0:	f001 ff40 	bl	8006174 <__lshift>
 80042f4:	9006      	str	r0, [sp, #24]
 80042f6:	2800      	cmp	r0, #0
 80042f8:	f43f ae89 	beq.w	800400e <_strtod_l+0x486>
 80042fc:	2e00      	cmp	r6, #0
 80042fe:	dd08      	ble.n	8004312 <_strtod_l+0x78a>
 8004300:	4632      	mov	r2, r6
 8004302:	4650      	mov	r0, sl
 8004304:	9904      	ldr	r1, [sp, #16]
 8004306:	f001 ff35 	bl	8006174 <__lshift>
 800430a:	9004      	str	r0, [sp, #16]
 800430c:	2800      	cmp	r0, #0
 800430e:	f43f ae7e 	beq.w	800400e <_strtod_l+0x486>
 8004312:	4650      	mov	r0, sl
 8004314:	9a06      	ldr	r2, [sp, #24]
 8004316:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004318:	f001 ffb4 	bl	8006284 <__mdiff>
 800431c:	4683      	mov	fp, r0
 800431e:	2800      	cmp	r0, #0
 8004320:	f43f ae75 	beq.w	800400e <_strtod_l+0x486>
 8004324:	2400      	movs	r4, #0
 8004326:	68c3      	ldr	r3, [r0, #12]
 8004328:	9904      	ldr	r1, [sp, #16]
 800432a:	60c4      	str	r4, [r0, #12]
 800432c:	930d      	str	r3, [sp, #52]	; 0x34
 800432e:	f001 ff8d 	bl	800624c <__mcmp>
 8004332:	42a0      	cmp	r0, r4
 8004334:	da70      	bge.n	8004418 <_strtod_l+0x890>
 8004336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004338:	ea53 0308 	orrs.w	r3, r3, r8
 800433c:	f040 8096 	bne.w	800446c <_strtod_l+0x8e4>
 8004340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004344:	2b00      	cmp	r3, #0
 8004346:	f040 8091 	bne.w	800446c <_strtod_l+0x8e4>
 800434a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800434e:	0d1b      	lsrs	r3, r3, #20
 8004350:	051b      	lsls	r3, r3, #20
 8004352:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004356:	f240 8089 	bls.w	800446c <_strtod_l+0x8e4>
 800435a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800435e:	b923      	cbnz	r3, 800436a <_strtod_l+0x7e2>
 8004360:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004364:	2b01      	cmp	r3, #1
 8004366:	f340 8081 	ble.w	800446c <_strtod_l+0x8e4>
 800436a:	4659      	mov	r1, fp
 800436c:	2201      	movs	r2, #1
 800436e:	4650      	mov	r0, sl
 8004370:	f001 ff00 	bl	8006174 <__lshift>
 8004374:	9904      	ldr	r1, [sp, #16]
 8004376:	4683      	mov	fp, r0
 8004378:	f001 ff68 	bl	800624c <__mcmp>
 800437c:	2800      	cmp	r0, #0
 800437e:	dd75      	ble.n	800446c <_strtod_l+0x8e4>
 8004380:	9905      	ldr	r1, [sp, #20]
 8004382:	464b      	mov	r3, r9
 8004384:	4a22      	ldr	r2, [pc, #136]	; (8004410 <_strtod_l+0x888>)
 8004386:	2900      	cmp	r1, #0
 8004388:	f000 8091 	beq.w	80044ae <_strtod_l+0x926>
 800438c:	ea02 0109 	and.w	r1, r2, r9
 8004390:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004394:	f300 808b 	bgt.w	80044ae <_strtod_l+0x926>
 8004398:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800439c:	f77f aea9 	ble.w	80040f2 <_strtod_l+0x56a>
 80043a0:	2300      	movs	r3, #0
 80043a2:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <_strtod_l+0x88c>)
 80043a4:	4640      	mov	r0, r8
 80043a6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80043aa:	4649      	mov	r1, r9
 80043ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80043b0:	f7fc f946 	bl	8000640 <__aeabi_dmul>
 80043b4:	460b      	mov	r3, r1
 80043b6:	4303      	orrs	r3, r0
 80043b8:	bf08      	it	eq
 80043ba:	2322      	moveq	r3, #34	; 0x22
 80043bc:	4680      	mov	r8, r0
 80043be:	4689      	mov	r9, r1
 80043c0:	bf08      	it	eq
 80043c2:	f8ca 3000 	streq.w	r3, [sl]
 80043c6:	e62d      	b.n	8004024 <_strtod_l+0x49c>
 80043c8:	f04f 32ff 	mov.w	r2, #4294967295
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	ea03 0808 	and.w	r8, r3, r8
 80043d4:	e6db      	b.n	800418e <_strtod_l+0x606>
 80043d6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80043da:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80043de:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80043e2:	35e2      	adds	r5, #226	; 0xe2
 80043e4:	fa07 f505 	lsl.w	r5, r7, r5
 80043e8:	970f      	str	r7, [sp, #60]	; 0x3c
 80043ea:	e742      	b.n	8004272 <_strtod_l+0x6ea>
 80043ec:	2301      	movs	r3, #1
 80043ee:	2500      	movs	r5, #0
 80043f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80043f2:	e73e      	b.n	8004272 <_strtod_l+0x6ea>
 80043f4:	463a      	mov	r2, r7
 80043f6:	4650      	mov	r0, sl
 80043f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80043fa:	f001 febb 	bl	8006174 <__lshift>
 80043fe:	901c      	str	r0, [sp, #112]	; 0x70
 8004400:	2800      	cmp	r0, #0
 8004402:	f47f af64 	bne.w	80042ce <_strtod_l+0x746>
 8004406:	e602      	b.n	800400e <_strtod_l+0x486>
 8004408:	080076f0 	.word	0x080076f0
 800440c:	fffffc02 	.word	0xfffffc02
 8004410:	7ff00000 	.word	0x7ff00000
 8004414:	39500000 	.word	0x39500000
 8004418:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800441c:	d166      	bne.n	80044ec <_strtod_l+0x964>
 800441e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004424:	b35a      	cbz	r2, 800447e <_strtod_l+0x8f6>
 8004426:	4a9c      	ldr	r2, [pc, #624]	; (8004698 <_strtod_l+0xb10>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d12c      	bne.n	8004486 <_strtod_l+0x8fe>
 800442c:	9b05      	ldr	r3, [sp, #20]
 800442e:	4640      	mov	r0, r8
 8004430:	b303      	cbz	r3, 8004474 <_strtod_l+0x8ec>
 8004432:	464b      	mov	r3, r9
 8004434:	4a99      	ldr	r2, [pc, #612]	; (800469c <_strtod_l+0xb14>)
 8004436:	f04f 31ff 	mov.w	r1, #4294967295
 800443a:	401a      	ands	r2, r3
 800443c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004440:	d81b      	bhi.n	800447a <_strtod_l+0x8f2>
 8004442:	0d12      	lsrs	r2, r2, #20
 8004444:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	4298      	cmp	r0, r3
 800444e:	d11a      	bne.n	8004486 <_strtod_l+0x8fe>
 8004450:	4b93      	ldr	r3, [pc, #588]	; (80046a0 <_strtod_l+0xb18>)
 8004452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004454:	429a      	cmp	r2, r3
 8004456:	d102      	bne.n	800445e <_strtod_l+0x8d6>
 8004458:	3001      	adds	r0, #1
 800445a:	f43f add8 	beq.w	800400e <_strtod_l+0x486>
 800445e:	f04f 0800 	mov.w	r8, #0
 8004462:	4b8e      	ldr	r3, [pc, #568]	; (800469c <_strtod_l+0xb14>)
 8004464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004466:	401a      	ands	r2, r3
 8004468:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800446c:	9b05      	ldr	r3, [sp, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d196      	bne.n	80043a0 <_strtod_l+0x818>
 8004472:	e5d7      	b.n	8004024 <_strtod_l+0x49c>
 8004474:	f04f 33ff 	mov.w	r3, #4294967295
 8004478:	e7e8      	b.n	800444c <_strtod_l+0x8c4>
 800447a:	460b      	mov	r3, r1
 800447c:	e7e6      	b.n	800444c <_strtod_l+0x8c4>
 800447e:	ea53 0308 	orrs.w	r3, r3, r8
 8004482:	f43f af7d 	beq.w	8004380 <_strtod_l+0x7f8>
 8004486:	b1e5      	cbz	r5, 80044c2 <_strtod_l+0x93a>
 8004488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800448a:	421d      	tst	r5, r3
 800448c:	d0ee      	beq.n	800446c <_strtod_l+0x8e4>
 800448e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004490:	4640      	mov	r0, r8
 8004492:	4649      	mov	r1, r9
 8004494:	9a05      	ldr	r2, [sp, #20]
 8004496:	b1c3      	cbz	r3, 80044ca <_strtod_l+0x942>
 8004498:	f7ff fb54 	bl	8003b44 <sulp>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044a4:	f7fb ff16 	bl	80002d4 <__adddf3>
 80044a8:	4680      	mov	r8, r0
 80044aa:	4689      	mov	r9, r1
 80044ac:	e7de      	b.n	800446c <_strtod_l+0x8e4>
 80044ae:	4013      	ands	r3, r2
 80044b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80044b4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80044b8:	f04f 38ff 	mov.w	r8, #4294967295
 80044bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80044c0:	e7d4      	b.n	800446c <_strtod_l+0x8e4>
 80044c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044c4:	ea13 0f08 	tst.w	r3, r8
 80044c8:	e7e0      	b.n	800448c <_strtod_l+0x904>
 80044ca:	f7ff fb3b 	bl	8003b44 <sulp>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044d6:	f7fb fefb 	bl	80002d0 <__aeabi_dsub>
 80044da:	2200      	movs	r2, #0
 80044dc:	2300      	movs	r3, #0
 80044de:	4680      	mov	r8, r0
 80044e0:	4689      	mov	r9, r1
 80044e2:	f7fc fb15 	bl	8000b10 <__aeabi_dcmpeq>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d0c0      	beq.n	800446c <_strtod_l+0x8e4>
 80044ea:	e602      	b.n	80040f2 <_strtod_l+0x56a>
 80044ec:	4658      	mov	r0, fp
 80044ee:	9904      	ldr	r1, [sp, #16]
 80044f0:	f002 f82e 	bl	8006550 <__ratio>
 80044f4:	2200      	movs	r2, #0
 80044f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044fa:	4606      	mov	r6, r0
 80044fc:	460f      	mov	r7, r1
 80044fe:	f7fc fb1b 	bl	8000b38 <__aeabi_dcmple>
 8004502:	2800      	cmp	r0, #0
 8004504:	d075      	beq.n	80045f2 <_strtod_l+0xa6a>
 8004506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004508:	2b00      	cmp	r3, #0
 800450a:	d047      	beq.n	800459c <_strtod_l+0xa14>
 800450c:	2600      	movs	r6, #0
 800450e:	4f65      	ldr	r7, [pc, #404]	; (80046a4 <_strtod_l+0xb1c>)
 8004510:	4d64      	ldr	r5, [pc, #400]	; (80046a4 <_strtod_l+0xb1c>)
 8004512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004518:	0d1b      	lsrs	r3, r3, #20
 800451a:	051b      	lsls	r3, r3, #20
 800451c:	930f      	str	r3, [sp, #60]	; 0x3c
 800451e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004520:	4b61      	ldr	r3, [pc, #388]	; (80046a8 <_strtod_l+0xb20>)
 8004522:	429a      	cmp	r2, r3
 8004524:	f040 80c8 	bne.w	80046b8 <_strtod_l+0xb30>
 8004528:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800452c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004532:	4640      	mov	r0, r8
 8004534:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004538:	4649      	mov	r1, r9
 800453a:	f001 ff33 	bl	80063a4 <__ulp>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4630      	mov	r0, r6
 8004544:	4639      	mov	r1, r7
 8004546:	f7fc f87b 	bl	8000640 <__aeabi_dmul>
 800454a:	4642      	mov	r2, r8
 800454c:	464b      	mov	r3, r9
 800454e:	f7fb fec1 	bl	80002d4 <__adddf3>
 8004552:	460b      	mov	r3, r1
 8004554:	4951      	ldr	r1, [pc, #324]	; (800469c <_strtod_l+0xb14>)
 8004556:	4a55      	ldr	r2, [pc, #340]	; (80046ac <_strtod_l+0xb24>)
 8004558:	4019      	ands	r1, r3
 800455a:	4291      	cmp	r1, r2
 800455c:	4680      	mov	r8, r0
 800455e:	d95e      	bls.n	800461e <_strtod_l+0xa96>
 8004560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004562:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004566:	4293      	cmp	r3, r2
 8004568:	d103      	bne.n	8004572 <_strtod_l+0x9ea>
 800456a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800456c:	3301      	adds	r3, #1
 800456e:	f43f ad4e 	beq.w	800400e <_strtod_l+0x486>
 8004572:	f04f 38ff 	mov.w	r8, #4294967295
 8004576:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80046a0 <_strtod_l+0xb18>
 800457a:	4650      	mov	r0, sl
 800457c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800457e:	f001 fbe1 	bl	8005d44 <_Bfree>
 8004582:	4650      	mov	r0, sl
 8004584:	9906      	ldr	r1, [sp, #24]
 8004586:	f001 fbdd 	bl	8005d44 <_Bfree>
 800458a:	4650      	mov	r0, sl
 800458c:	9904      	ldr	r1, [sp, #16]
 800458e:	f001 fbd9 	bl	8005d44 <_Bfree>
 8004592:	4659      	mov	r1, fp
 8004594:	4650      	mov	r0, sl
 8004596:	f001 fbd5 	bl	8005d44 <_Bfree>
 800459a:	e61c      	b.n	80041d6 <_strtod_l+0x64e>
 800459c:	f1b8 0f00 	cmp.w	r8, #0
 80045a0:	d119      	bne.n	80045d6 <_strtod_l+0xa4e>
 80045a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a8:	b9e3      	cbnz	r3, 80045e4 <_strtod_l+0xa5c>
 80045aa:	2200      	movs	r2, #0
 80045ac:	4630      	mov	r0, r6
 80045ae:	4639      	mov	r1, r7
 80045b0:	4b3c      	ldr	r3, [pc, #240]	; (80046a4 <_strtod_l+0xb1c>)
 80045b2:	f7fc fab7 	bl	8000b24 <__aeabi_dcmplt>
 80045b6:	b9c8      	cbnz	r0, 80045ec <_strtod_l+0xa64>
 80045b8:	2200      	movs	r2, #0
 80045ba:	4630      	mov	r0, r6
 80045bc:	4639      	mov	r1, r7
 80045be:	4b3c      	ldr	r3, [pc, #240]	; (80046b0 <_strtod_l+0xb28>)
 80045c0:	f7fc f83e 	bl	8000640 <__aeabi_dmul>
 80045c4:	4604      	mov	r4, r0
 80045c6:	460d      	mov	r5, r1
 80045c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80045cc:	9418      	str	r4, [sp, #96]	; 0x60
 80045ce:	9319      	str	r3, [sp, #100]	; 0x64
 80045d0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80045d4:	e79d      	b.n	8004512 <_strtod_l+0x98a>
 80045d6:	f1b8 0f01 	cmp.w	r8, #1
 80045da:	d103      	bne.n	80045e4 <_strtod_l+0xa5c>
 80045dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f43f ad87 	beq.w	80040f2 <_strtod_l+0x56a>
 80045e4:	2600      	movs	r6, #0
 80045e6:	2400      	movs	r4, #0
 80045e8:	4f32      	ldr	r7, [pc, #200]	; (80046b4 <_strtod_l+0xb2c>)
 80045ea:	e791      	b.n	8004510 <_strtod_l+0x988>
 80045ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80045ee:	4d30      	ldr	r5, [pc, #192]	; (80046b0 <_strtod_l+0xb28>)
 80045f0:	e7ea      	b.n	80045c8 <_strtod_l+0xa40>
 80045f2:	4b2f      	ldr	r3, [pc, #188]	; (80046b0 <_strtod_l+0xb28>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	4630      	mov	r0, r6
 80045f8:	4639      	mov	r1, r7
 80045fa:	f7fc f821 	bl	8000640 <__aeabi_dmul>
 80045fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004600:	4604      	mov	r4, r0
 8004602:	460d      	mov	r5, r1
 8004604:	b933      	cbnz	r3, 8004614 <_strtod_l+0xa8c>
 8004606:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800460a:	9010      	str	r0, [sp, #64]	; 0x40
 800460c:	9311      	str	r3, [sp, #68]	; 0x44
 800460e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004612:	e77e      	b.n	8004512 <_strtod_l+0x98a>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800461c:	e7f7      	b.n	800460e <_strtod_l+0xa86>
 800461e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004622:	9b05      	ldr	r3, [sp, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1a8      	bne.n	800457a <_strtod_l+0x9f2>
 8004628:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800462c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800462e:	0d1b      	lsrs	r3, r3, #20
 8004630:	051b      	lsls	r3, r3, #20
 8004632:	429a      	cmp	r2, r3
 8004634:	d1a1      	bne.n	800457a <_strtod_l+0x9f2>
 8004636:	4620      	mov	r0, r4
 8004638:	4629      	mov	r1, r5
 800463a:	f7fc fc7d 	bl	8000f38 <__aeabi_d2lz>
 800463e:	f7fb ffd1 	bl	80005e4 <__aeabi_l2d>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4620      	mov	r0, r4
 8004648:	4629      	mov	r1, r5
 800464a:	f7fb fe41 	bl	80002d0 <__aeabi_dsub>
 800464e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004654:	ea43 0308 	orr.w	r3, r3, r8
 8004658:	4313      	orrs	r3, r2
 800465a:	4604      	mov	r4, r0
 800465c:	460d      	mov	r5, r1
 800465e:	d066      	beq.n	800472e <_strtod_l+0xba6>
 8004660:	a309      	add	r3, pc, #36	; (adr r3, 8004688 <_strtod_l+0xb00>)
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f7fc fa5d 	bl	8000b24 <__aeabi_dcmplt>
 800466a:	2800      	cmp	r0, #0
 800466c:	f47f acda 	bne.w	8004024 <_strtod_l+0x49c>
 8004670:	a307      	add	r3, pc, #28	; (adr r3, 8004690 <_strtod_l+0xb08>)
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	4620      	mov	r0, r4
 8004678:	4629      	mov	r1, r5
 800467a:	f7fc fa71 	bl	8000b60 <__aeabi_dcmpgt>
 800467e:	2800      	cmp	r0, #0
 8004680:	f43f af7b 	beq.w	800457a <_strtod_l+0x9f2>
 8004684:	e4ce      	b.n	8004024 <_strtod_l+0x49c>
 8004686:	bf00      	nop
 8004688:	94a03595 	.word	0x94a03595
 800468c:	3fdfffff 	.word	0x3fdfffff
 8004690:	35afe535 	.word	0x35afe535
 8004694:	3fe00000 	.word	0x3fe00000
 8004698:	000fffff 	.word	0x000fffff
 800469c:	7ff00000 	.word	0x7ff00000
 80046a0:	7fefffff 	.word	0x7fefffff
 80046a4:	3ff00000 	.word	0x3ff00000
 80046a8:	7fe00000 	.word	0x7fe00000
 80046ac:	7c9fffff 	.word	0x7c9fffff
 80046b0:	3fe00000 	.word	0x3fe00000
 80046b4:	bff00000 	.word	0xbff00000
 80046b8:	9b05      	ldr	r3, [sp, #20]
 80046ba:	b313      	cbz	r3, 8004702 <_strtod_l+0xb7a>
 80046bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80046c2:	d81e      	bhi.n	8004702 <_strtod_l+0xb7a>
 80046c4:	a326      	add	r3, pc, #152	; (adr r3, 8004760 <_strtod_l+0xbd8>)
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	4620      	mov	r0, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	f7fc fa33 	bl	8000b38 <__aeabi_dcmple>
 80046d2:	b190      	cbz	r0, 80046fa <_strtod_l+0xb72>
 80046d4:	4629      	mov	r1, r5
 80046d6:	4620      	mov	r0, r4
 80046d8:	f7fc fa8a 	bl	8000bf0 <__aeabi_d2uiz>
 80046dc:	2801      	cmp	r0, #1
 80046de:	bf38      	it	cc
 80046e0:	2001      	movcc	r0, #1
 80046e2:	f7fb ff33 	bl	800054c <__aeabi_ui2d>
 80046e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046e8:	4604      	mov	r4, r0
 80046ea:	460d      	mov	r5, r1
 80046ec:	b9d3      	cbnz	r3, 8004724 <_strtod_l+0xb9c>
 80046ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046f2:	9012      	str	r0, [sp, #72]	; 0x48
 80046f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80046f6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80046fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80046fc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004700:	1a9f      	subs	r7, r3, r2
 8004702:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004706:	f001 fe4d 	bl	80063a4 <__ulp>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4630      	mov	r0, r6
 8004710:	4639      	mov	r1, r7
 8004712:	f7fb ff95 	bl	8000640 <__aeabi_dmul>
 8004716:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800471a:	f7fb fddb 	bl	80002d4 <__adddf3>
 800471e:	4680      	mov	r8, r0
 8004720:	4689      	mov	r9, r1
 8004722:	e77e      	b.n	8004622 <_strtod_l+0xa9a>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800472c:	e7e3      	b.n	80046f6 <_strtod_l+0xb6e>
 800472e:	a30e      	add	r3, pc, #56	; (adr r3, 8004768 <_strtod_l+0xbe0>)
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	f7fc f9f6 	bl	8000b24 <__aeabi_dcmplt>
 8004738:	e7a1      	b.n	800467e <_strtod_l+0xaf6>
 800473a:	2300      	movs	r3, #0
 800473c:	930c      	str	r3, [sp, #48]	; 0x30
 800473e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004740:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	f7ff ba65 	b.w	8003c12 <_strtod_l+0x8a>
 8004748:	2b65      	cmp	r3, #101	; 0x65
 800474a:	f43f ab5c 	beq.w	8003e06 <_strtod_l+0x27e>
 800474e:	2b45      	cmp	r3, #69	; 0x45
 8004750:	f43f ab59 	beq.w	8003e06 <_strtod_l+0x27e>
 8004754:	2201      	movs	r2, #1
 8004756:	f7ff bb8d 	b.w	8003e74 <_strtod_l+0x2ec>
 800475a:	bf00      	nop
 800475c:	f3af 8000 	nop.w
 8004760:	ffc00000 	.word	0xffc00000
 8004764:	41dfffff 	.word	0x41dfffff
 8004768:	94a03595 	.word	0x94a03595
 800476c:	3fcfffff 	.word	0x3fcfffff

08004770 <_strtod_r>:
 8004770:	4b01      	ldr	r3, [pc, #4]	; (8004778 <_strtod_r+0x8>)
 8004772:	f7ff ba09 	b.w	8003b88 <_strtod_l>
 8004776:	bf00      	nop
 8004778:	20000074 	.word	0x20000074

0800477c <_strtol_l.isra.0>:
 800477c:	2b01      	cmp	r3, #1
 800477e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004782:	4686      	mov	lr, r0
 8004784:	d001      	beq.n	800478a <_strtol_l.isra.0+0xe>
 8004786:	2b24      	cmp	r3, #36	; 0x24
 8004788:	d906      	bls.n	8004798 <_strtol_l.isra.0+0x1c>
 800478a:	f7fe fb13 	bl	8002db4 <__errno>
 800478e:	2316      	movs	r3, #22
 8004790:	6003      	str	r3, [r0, #0]
 8004792:	2000      	movs	r0, #0
 8004794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004798:	468c      	mov	ip, r1
 800479a:	4e3a      	ldr	r6, [pc, #232]	; (8004884 <_strtol_l.isra.0+0x108>)
 800479c:	4660      	mov	r0, ip
 800479e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80047a2:	5da5      	ldrb	r5, [r4, r6]
 80047a4:	f015 0508 	ands.w	r5, r5, #8
 80047a8:	d1f8      	bne.n	800479c <_strtol_l.isra.0+0x20>
 80047aa:	2c2d      	cmp	r4, #45	; 0x2d
 80047ac:	d133      	bne.n	8004816 <_strtol_l.isra.0+0x9a>
 80047ae:	f04f 0801 	mov.w	r8, #1
 80047b2:	f89c 4000 	ldrb.w	r4, [ip]
 80047b6:	f100 0c02 	add.w	ip, r0, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d05d      	beq.n	800487a <_strtol_l.isra.0+0xfe>
 80047be:	2b10      	cmp	r3, #16
 80047c0:	d10c      	bne.n	80047dc <_strtol_l.isra.0+0x60>
 80047c2:	2c30      	cmp	r4, #48	; 0x30
 80047c4:	d10a      	bne.n	80047dc <_strtol_l.isra.0+0x60>
 80047c6:	f89c 0000 	ldrb.w	r0, [ip]
 80047ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80047ce:	2858      	cmp	r0, #88	; 0x58
 80047d0:	d14e      	bne.n	8004870 <_strtol_l.isra.0+0xf4>
 80047d2:	2310      	movs	r3, #16
 80047d4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80047d8:	f10c 0c02 	add.w	ip, ip, #2
 80047dc:	2500      	movs	r5, #0
 80047de:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80047e2:	3f01      	subs	r7, #1
 80047e4:	fbb7 f9f3 	udiv	r9, r7, r3
 80047e8:	4628      	mov	r0, r5
 80047ea:	fb03 7a19 	mls	sl, r3, r9, r7
 80047ee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80047f2:	2e09      	cmp	r6, #9
 80047f4:	d818      	bhi.n	8004828 <_strtol_l.isra.0+0xac>
 80047f6:	4634      	mov	r4, r6
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	dd24      	ble.n	8004846 <_strtol_l.isra.0+0xca>
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	db1f      	blt.n	8004840 <_strtol_l.isra.0+0xc4>
 8004800:	4581      	cmp	r9, r0
 8004802:	d31d      	bcc.n	8004840 <_strtol_l.isra.0+0xc4>
 8004804:	d101      	bne.n	800480a <_strtol_l.isra.0+0x8e>
 8004806:	45a2      	cmp	sl, r4
 8004808:	db1a      	blt.n	8004840 <_strtol_l.isra.0+0xc4>
 800480a:	2501      	movs	r5, #1
 800480c:	fb00 4003 	mla	r0, r0, r3, r4
 8004810:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004814:	e7eb      	b.n	80047ee <_strtol_l.isra.0+0x72>
 8004816:	2c2b      	cmp	r4, #43	; 0x2b
 8004818:	bf08      	it	eq
 800481a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800481e:	46a8      	mov	r8, r5
 8004820:	bf08      	it	eq
 8004822:	f100 0c02 	addeq.w	ip, r0, #2
 8004826:	e7c8      	b.n	80047ba <_strtol_l.isra.0+0x3e>
 8004828:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800482c:	2e19      	cmp	r6, #25
 800482e:	d801      	bhi.n	8004834 <_strtol_l.isra.0+0xb8>
 8004830:	3c37      	subs	r4, #55	; 0x37
 8004832:	e7e1      	b.n	80047f8 <_strtol_l.isra.0+0x7c>
 8004834:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004838:	2e19      	cmp	r6, #25
 800483a:	d804      	bhi.n	8004846 <_strtol_l.isra.0+0xca>
 800483c:	3c57      	subs	r4, #87	; 0x57
 800483e:	e7db      	b.n	80047f8 <_strtol_l.isra.0+0x7c>
 8004840:	f04f 35ff 	mov.w	r5, #4294967295
 8004844:	e7e4      	b.n	8004810 <_strtol_l.isra.0+0x94>
 8004846:	2d00      	cmp	r5, #0
 8004848:	da08      	bge.n	800485c <_strtol_l.isra.0+0xe0>
 800484a:	2322      	movs	r3, #34	; 0x22
 800484c:	4638      	mov	r0, r7
 800484e:	f8ce 3000 	str.w	r3, [lr]
 8004852:	2a00      	cmp	r2, #0
 8004854:	d09e      	beq.n	8004794 <_strtol_l.isra.0+0x18>
 8004856:	f10c 31ff 	add.w	r1, ip, #4294967295
 800485a:	e007      	b.n	800486c <_strtol_l.isra.0+0xf0>
 800485c:	f1b8 0f00 	cmp.w	r8, #0
 8004860:	d000      	beq.n	8004864 <_strtol_l.isra.0+0xe8>
 8004862:	4240      	negs	r0, r0
 8004864:	2a00      	cmp	r2, #0
 8004866:	d095      	beq.n	8004794 <_strtol_l.isra.0+0x18>
 8004868:	2d00      	cmp	r5, #0
 800486a:	d1f4      	bne.n	8004856 <_strtol_l.isra.0+0xda>
 800486c:	6011      	str	r1, [r2, #0]
 800486e:	e791      	b.n	8004794 <_strtol_l.isra.0+0x18>
 8004870:	2430      	movs	r4, #48	; 0x30
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1b2      	bne.n	80047dc <_strtol_l.isra.0+0x60>
 8004876:	2308      	movs	r3, #8
 8004878:	e7b0      	b.n	80047dc <_strtol_l.isra.0+0x60>
 800487a:	2c30      	cmp	r4, #48	; 0x30
 800487c:	d0a3      	beq.n	80047c6 <_strtol_l.isra.0+0x4a>
 800487e:	230a      	movs	r3, #10
 8004880:	e7ac      	b.n	80047dc <_strtol_l.isra.0+0x60>
 8004882:	bf00      	nop
 8004884:	08007719 	.word	0x08007719

08004888 <_strtol_r>:
 8004888:	f7ff bf78 	b.w	800477c <_strtol_l.isra.0>

0800488c <quorem>:
 800488c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004890:	6903      	ldr	r3, [r0, #16]
 8004892:	690c      	ldr	r4, [r1, #16]
 8004894:	4607      	mov	r7, r0
 8004896:	42a3      	cmp	r3, r4
 8004898:	f2c0 8083 	blt.w	80049a2 <quorem+0x116>
 800489c:	3c01      	subs	r4, #1
 800489e:	f100 0514 	add.w	r5, r0, #20
 80048a2:	f101 0814 	add.w	r8, r1, #20
 80048a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048b4:	3301      	adds	r3, #1
 80048b6:	429a      	cmp	r2, r3
 80048b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80048bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80048c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80048c4:	d332      	bcc.n	800492c <quorem+0xa0>
 80048c6:	f04f 0e00 	mov.w	lr, #0
 80048ca:	4640      	mov	r0, r8
 80048cc:	46ac      	mov	ip, r5
 80048ce:	46f2      	mov	sl, lr
 80048d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80048d4:	b293      	uxth	r3, r2
 80048d6:	fb06 e303 	mla	r3, r6, r3, lr
 80048da:	0c12      	lsrs	r2, r2, #16
 80048dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80048e0:	fb06 e202 	mla	r2, r6, r2, lr
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	ebaa 0303 	sub.w	r3, sl, r3
 80048ea:	f8dc a000 	ldr.w	sl, [ip]
 80048ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80048f2:	fa1f fa8a 	uxth.w	sl, sl
 80048f6:	4453      	add	r3, sl
 80048f8:	fa1f fa82 	uxth.w	sl, r2
 80048fc:	f8dc 2000 	ldr.w	r2, [ip]
 8004900:	4581      	cmp	r9, r0
 8004902:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004906:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800490a:	b29b      	uxth	r3, r3
 800490c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004910:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004914:	f84c 3b04 	str.w	r3, [ip], #4
 8004918:	d2da      	bcs.n	80048d0 <quorem+0x44>
 800491a:	f855 300b 	ldr.w	r3, [r5, fp]
 800491e:	b92b      	cbnz	r3, 800492c <quorem+0xa0>
 8004920:	9b01      	ldr	r3, [sp, #4]
 8004922:	3b04      	subs	r3, #4
 8004924:	429d      	cmp	r5, r3
 8004926:	461a      	mov	r2, r3
 8004928:	d32f      	bcc.n	800498a <quorem+0xfe>
 800492a:	613c      	str	r4, [r7, #16]
 800492c:	4638      	mov	r0, r7
 800492e:	f001 fc8d 	bl	800624c <__mcmp>
 8004932:	2800      	cmp	r0, #0
 8004934:	db25      	blt.n	8004982 <quorem+0xf6>
 8004936:	4628      	mov	r0, r5
 8004938:	f04f 0c00 	mov.w	ip, #0
 800493c:	3601      	adds	r6, #1
 800493e:	f858 1b04 	ldr.w	r1, [r8], #4
 8004942:	f8d0 e000 	ldr.w	lr, [r0]
 8004946:	b28b      	uxth	r3, r1
 8004948:	ebac 0303 	sub.w	r3, ip, r3
 800494c:	fa1f f28e 	uxth.w	r2, lr
 8004950:	4413      	add	r3, r2
 8004952:	0c0a      	lsrs	r2, r1, #16
 8004954:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004958:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800495c:	b29b      	uxth	r3, r3
 800495e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004962:	45c1      	cmp	r9, r8
 8004964:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004968:	f840 3b04 	str.w	r3, [r0], #4
 800496c:	d2e7      	bcs.n	800493e <quorem+0xb2>
 800496e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004976:	b922      	cbnz	r2, 8004982 <quorem+0xf6>
 8004978:	3b04      	subs	r3, #4
 800497a:	429d      	cmp	r5, r3
 800497c:	461a      	mov	r2, r3
 800497e:	d30a      	bcc.n	8004996 <quorem+0x10a>
 8004980:	613c      	str	r4, [r7, #16]
 8004982:	4630      	mov	r0, r6
 8004984:	b003      	add	sp, #12
 8004986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	3b04      	subs	r3, #4
 800498e:	2a00      	cmp	r2, #0
 8004990:	d1cb      	bne.n	800492a <quorem+0x9e>
 8004992:	3c01      	subs	r4, #1
 8004994:	e7c6      	b.n	8004924 <quorem+0x98>
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	3b04      	subs	r3, #4
 800499a:	2a00      	cmp	r2, #0
 800499c:	d1f0      	bne.n	8004980 <quorem+0xf4>
 800499e:	3c01      	subs	r4, #1
 80049a0:	e7eb      	b.n	800497a <quorem+0xee>
 80049a2:	2000      	movs	r0, #0
 80049a4:	e7ee      	b.n	8004984 <quorem+0xf8>
	...

080049a8 <_dtoa_r>:
 80049a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ac:	4616      	mov	r6, r2
 80049ae:	461f      	mov	r7, r3
 80049b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80049b2:	b099      	sub	sp, #100	; 0x64
 80049b4:	4605      	mov	r5, r0
 80049b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80049ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80049be:	b974      	cbnz	r4, 80049de <_dtoa_r+0x36>
 80049c0:	2010      	movs	r0, #16
 80049c2:	f001 f949 	bl	8005c58 <malloc>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6268      	str	r0, [r5, #36]	; 0x24
 80049ca:	b920      	cbnz	r0, 80049d6 <_dtoa_r+0x2e>
 80049cc:	21ea      	movs	r1, #234	; 0xea
 80049ce:	4bae      	ldr	r3, [pc, #696]	; (8004c88 <_dtoa_r+0x2e0>)
 80049d0:	48ae      	ldr	r0, [pc, #696]	; (8004c8c <_dtoa_r+0x2e4>)
 80049d2:	f002 f875 	bl	8006ac0 <__assert_func>
 80049d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80049da:	6004      	str	r4, [r0, #0]
 80049dc:	60c4      	str	r4, [r0, #12]
 80049de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	b151      	cbz	r1, 80049fa <_dtoa_r+0x52>
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	2301      	movs	r3, #1
 80049e8:	4093      	lsls	r3, r2
 80049ea:	604a      	str	r2, [r1, #4]
 80049ec:	608b      	str	r3, [r1, #8]
 80049ee:	4628      	mov	r0, r5
 80049f0:	f001 f9a8 	bl	8005d44 <_Bfree>
 80049f4:	2200      	movs	r2, #0
 80049f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	1e3b      	subs	r3, r7, #0
 80049fc:	bfaf      	iteee	ge
 80049fe:	2300      	movge	r3, #0
 8004a00:	2201      	movlt	r2, #1
 8004a02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a06:	9305      	strlt	r3, [sp, #20]
 8004a08:	bfa8      	it	ge
 8004a0a:	f8c8 3000 	strge.w	r3, [r8]
 8004a0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004a12:	4b9f      	ldr	r3, [pc, #636]	; (8004c90 <_dtoa_r+0x2e8>)
 8004a14:	bfb8      	it	lt
 8004a16:	f8c8 2000 	strlt.w	r2, [r8]
 8004a1a:	ea33 0309 	bics.w	r3, r3, r9
 8004a1e:	d119      	bne.n	8004a54 <_dtoa_r+0xac>
 8004a20:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a2c:	4333      	orrs	r3, r6
 8004a2e:	f000 8580 	beq.w	8005532 <_dtoa_r+0xb8a>
 8004a32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a34:	b953      	cbnz	r3, 8004a4c <_dtoa_r+0xa4>
 8004a36:	4b97      	ldr	r3, [pc, #604]	; (8004c94 <_dtoa_r+0x2ec>)
 8004a38:	e022      	b.n	8004a80 <_dtoa_r+0xd8>
 8004a3a:	4b97      	ldr	r3, [pc, #604]	; (8004c98 <_dtoa_r+0x2f0>)
 8004a3c:	9308      	str	r3, [sp, #32]
 8004a3e:	3308      	adds	r3, #8
 8004a40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	9808      	ldr	r0, [sp, #32]
 8004a46:	b019      	add	sp, #100	; 0x64
 8004a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4c:	4b91      	ldr	r3, [pc, #580]	; (8004c94 <_dtoa_r+0x2ec>)
 8004a4e:	9308      	str	r3, [sp, #32]
 8004a50:	3303      	adds	r3, #3
 8004a52:	e7f5      	b.n	8004a40 <_dtoa_r+0x98>
 8004a54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004a58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a60:	2200      	movs	r2, #0
 8004a62:	2300      	movs	r3, #0
 8004a64:	f7fc f854 	bl	8000b10 <__aeabi_dcmpeq>
 8004a68:	4680      	mov	r8, r0
 8004a6a:	b158      	cbz	r0, 8004a84 <_dtoa_r+0xdc>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8559 	beq.w	800552c <_dtoa_r+0xb84>
 8004a7a:	4888      	ldr	r0, [pc, #544]	; (8004c9c <_dtoa_r+0x2f4>)
 8004a7c:	6018      	str	r0, [r3, #0]
 8004a7e:	1e43      	subs	r3, r0, #1
 8004a80:	9308      	str	r3, [sp, #32]
 8004a82:	e7df      	b.n	8004a44 <_dtoa_r+0x9c>
 8004a84:	ab16      	add	r3, sp, #88	; 0x58
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	ab17      	add	r3, sp, #92	; 0x5c
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a92:	f001 fd01 	bl	8006498 <__d2b>
 8004a96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004a9a:	4682      	mov	sl, r0
 8004a9c:	2c00      	cmp	r4, #0
 8004a9e:	d07e      	beq.n	8004b9e <_dtoa_r+0x1f6>
 8004aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aa6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004ab2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004ab6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004aba:	2200      	movs	r2, #0
 8004abc:	4b78      	ldr	r3, [pc, #480]	; (8004ca0 <_dtoa_r+0x2f8>)
 8004abe:	f7fb fc07 	bl	80002d0 <__aeabi_dsub>
 8004ac2:	a36b      	add	r3, pc, #428	; (adr r3, 8004c70 <_dtoa_r+0x2c8>)
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	f7fb fdba 	bl	8000640 <__aeabi_dmul>
 8004acc:	a36a      	add	r3, pc, #424	; (adr r3, 8004c78 <_dtoa_r+0x2d0>)
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	f7fb fbff 	bl	80002d4 <__adddf3>
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	4620      	mov	r0, r4
 8004ada:	460f      	mov	r7, r1
 8004adc:	f7fb fd46 	bl	800056c <__aeabi_i2d>
 8004ae0:	a367      	add	r3, pc, #412	; (adr r3, 8004c80 <_dtoa_r+0x2d8>)
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb fdab 	bl	8000640 <__aeabi_dmul>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4630      	mov	r0, r6
 8004af0:	4639      	mov	r1, r7
 8004af2:	f7fb fbef 	bl	80002d4 <__adddf3>
 8004af6:	4606      	mov	r6, r0
 8004af8:	460f      	mov	r7, r1
 8004afa:	f7fc f851 	bl	8000ba0 <__aeabi_d2iz>
 8004afe:	2200      	movs	r2, #0
 8004b00:	4681      	mov	r9, r0
 8004b02:	2300      	movs	r3, #0
 8004b04:	4630      	mov	r0, r6
 8004b06:	4639      	mov	r1, r7
 8004b08:	f7fc f80c 	bl	8000b24 <__aeabi_dcmplt>
 8004b0c:	b148      	cbz	r0, 8004b22 <_dtoa_r+0x17a>
 8004b0e:	4648      	mov	r0, r9
 8004b10:	f7fb fd2c 	bl	800056c <__aeabi_i2d>
 8004b14:	4632      	mov	r2, r6
 8004b16:	463b      	mov	r3, r7
 8004b18:	f7fb fffa 	bl	8000b10 <__aeabi_dcmpeq>
 8004b1c:	b908      	cbnz	r0, 8004b22 <_dtoa_r+0x17a>
 8004b1e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004b22:	f1b9 0f16 	cmp.w	r9, #22
 8004b26:	d857      	bhi.n	8004bd8 <_dtoa_r+0x230>
 8004b28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b2c:	4b5d      	ldr	r3, [pc, #372]	; (8004ca4 <_dtoa_r+0x2fc>)
 8004b2e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f7fb fff5 	bl	8000b24 <__aeabi_dcmplt>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d04e      	beq.n	8004bdc <_dtoa_r+0x234>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f109 39ff 	add.w	r9, r9, #4294967295
 8004b44:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b48:	1b1c      	subs	r4, r3, r4
 8004b4a:	1e63      	subs	r3, r4, #1
 8004b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b4e:	bf49      	itett	mi
 8004b50:	f1c4 0301 	rsbmi	r3, r4, #1
 8004b54:	2300      	movpl	r3, #0
 8004b56:	9306      	strmi	r3, [sp, #24]
 8004b58:	2300      	movmi	r3, #0
 8004b5a:	bf54      	ite	pl
 8004b5c:	9306      	strpl	r3, [sp, #24]
 8004b5e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004b60:	f1b9 0f00 	cmp.w	r9, #0
 8004b64:	db3c      	blt.n	8004be0 <_dtoa_r+0x238>
 8004b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b68:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004b6c:	444b      	add	r3, r9
 8004b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b70:	2300      	movs	r3, #0
 8004b72:	930a      	str	r3, [sp, #40]	; 0x28
 8004b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b76:	2b09      	cmp	r3, #9
 8004b78:	d86c      	bhi.n	8004c54 <_dtoa_r+0x2ac>
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	bfc4      	itt	gt
 8004b7e:	3b04      	subgt	r3, #4
 8004b80:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b84:	bfc8      	it	gt
 8004b86:	2400      	movgt	r4, #0
 8004b88:	f1a3 0302 	sub.w	r3, r3, #2
 8004b8c:	bfd8      	it	le
 8004b8e:	2401      	movle	r4, #1
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	f200 808b 	bhi.w	8004cac <_dtoa_r+0x304>
 8004b96:	e8df f003 	tbb	[pc, r3]
 8004b9a:	4f2d      	.short	0x4f2d
 8004b9c:	5b4d      	.short	0x5b4d
 8004b9e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004ba2:	441c      	add	r4, r3
 8004ba4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	bfc3      	ittte	gt
 8004bac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004bb0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004bb4:	fa09 f303 	lslgt.w	r3, r9, r3
 8004bb8:	f1c3 0320 	rsble	r3, r3, #32
 8004bbc:	bfc6      	itte	gt
 8004bbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004bc2:	4318      	orrgt	r0, r3
 8004bc4:	fa06 f003 	lslle.w	r0, r6, r3
 8004bc8:	f7fb fcc0 	bl	800054c <__aeabi_ui2d>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004bd2:	3c01      	subs	r4, #1
 8004bd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004bd6:	e770      	b.n	8004aba <_dtoa_r+0x112>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e7b3      	b.n	8004b44 <_dtoa_r+0x19c>
 8004bdc:	900f      	str	r0, [sp, #60]	; 0x3c
 8004bde:	e7b2      	b.n	8004b46 <_dtoa_r+0x19e>
 8004be0:	9b06      	ldr	r3, [sp, #24]
 8004be2:	eba3 0309 	sub.w	r3, r3, r9
 8004be6:	9306      	str	r3, [sp, #24]
 8004be8:	f1c9 0300 	rsb	r3, r9, #0
 8004bec:	930a      	str	r3, [sp, #40]	; 0x28
 8004bee:	2300      	movs	r3, #0
 8004bf0:	930e      	str	r3, [sp, #56]	; 0x38
 8004bf2:	e7bf      	b.n	8004b74 <_dtoa_r+0x1cc>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	dc59      	bgt.n	8004cb2 <_dtoa_r+0x30a>
 8004bfe:	f04f 0b01 	mov.w	fp, #1
 8004c02:	465b      	mov	r3, fp
 8004c04:	f8cd b008 	str.w	fp, [sp, #8]
 8004c08:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c10:	6042      	str	r2, [r0, #4]
 8004c12:	2204      	movs	r2, #4
 8004c14:	f102 0614 	add.w	r6, r2, #20
 8004c18:	429e      	cmp	r6, r3
 8004c1a:	6841      	ldr	r1, [r0, #4]
 8004c1c:	d94f      	bls.n	8004cbe <_dtoa_r+0x316>
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f001 f850 	bl	8005cc4 <_Balloc>
 8004c24:	9008      	str	r0, [sp, #32]
 8004c26:	2800      	cmp	r0, #0
 8004c28:	d14d      	bne.n	8004cc6 <_dtoa_r+0x31e>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c30:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <_dtoa_r+0x300>)
 8004c32:	e6cd      	b.n	80049d0 <_dtoa_r+0x28>
 8004c34:	2301      	movs	r3, #1
 8004c36:	e7de      	b.n	8004bf6 <_dtoa_r+0x24e>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c3e:	eb09 0b03 	add.w	fp, r9, r3
 8004c42:	f10b 0301 	add.w	r3, fp, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	9302      	str	r3, [sp, #8]
 8004c4a:	bfb8      	it	lt
 8004c4c:	2301      	movlt	r3, #1
 8004c4e:	e7dd      	b.n	8004c0c <_dtoa_r+0x264>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e7f2      	b.n	8004c3a <_dtoa_r+0x292>
 8004c54:	2401      	movs	r4, #1
 8004c56:	2300      	movs	r3, #0
 8004c58:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c5a:	9322      	str	r3, [sp, #136]	; 0x88
 8004c5c:	f04f 3bff 	mov.w	fp, #4294967295
 8004c60:	2200      	movs	r2, #0
 8004c62:	2312      	movs	r3, #18
 8004c64:	f8cd b008 	str.w	fp, [sp, #8]
 8004c68:	9223      	str	r2, [sp, #140]	; 0x8c
 8004c6a:	e7cf      	b.n	8004c0c <_dtoa_r+0x264>
 8004c6c:	f3af 8000 	nop.w
 8004c70:	636f4361 	.word	0x636f4361
 8004c74:	3fd287a7 	.word	0x3fd287a7
 8004c78:	8b60c8b3 	.word	0x8b60c8b3
 8004c7c:	3fc68a28 	.word	0x3fc68a28
 8004c80:	509f79fb 	.word	0x509f79fb
 8004c84:	3fd34413 	.word	0x3fd34413
 8004c88:	08007826 	.word	0x08007826
 8004c8c:	0800783d 	.word	0x0800783d
 8004c90:	7ff00000 	.word	0x7ff00000
 8004c94:	08007822 	.word	0x08007822
 8004c98:	08007819 	.word	0x08007819
 8004c9c:	08007699 	.word	0x08007699
 8004ca0:	3ff80000 	.word	0x3ff80000
 8004ca4:	080079b8 	.word	0x080079b8
 8004ca8:	0800789c 	.word	0x0800789c
 8004cac:	2301      	movs	r3, #1
 8004cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cb0:	e7d4      	b.n	8004c5c <_dtoa_r+0x2b4>
 8004cb2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004cb6:	465b      	mov	r3, fp
 8004cb8:	f8cd b008 	str.w	fp, [sp, #8]
 8004cbc:	e7a6      	b.n	8004c0c <_dtoa_r+0x264>
 8004cbe:	3101      	adds	r1, #1
 8004cc0:	6041      	str	r1, [r0, #4]
 8004cc2:	0052      	lsls	r2, r2, #1
 8004cc4:	e7a6      	b.n	8004c14 <_dtoa_r+0x26c>
 8004cc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cc8:	9a08      	ldr	r2, [sp, #32]
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	9b02      	ldr	r3, [sp, #8]
 8004cce:	2b0e      	cmp	r3, #14
 8004cd0:	f200 80a8 	bhi.w	8004e24 <_dtoa_r+0x47c>
 8004cd4:	2c00      	cmp	r4, #0
 8004cd6:	f000 80a5 	beq.w	8004e24 <_dtoa_r+0x47c>
 8004cda:	f1b9 0f00 	cmp.w	r9, #0
 8004cde:	dd34      	ble.n	8004d4a <_dtoa_r+0x3a2>
 8004ce0:	4a9a      	ldr	r2, [pc, #616]	; (8004f4c <_dtoa_r+0x5a4>)
 8004ce2:	f009 030f 	and.w	r3, r9, #15
 8004ce6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004cea:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004cee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cf2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004cf6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004cfa:	d016      	beq.n	8004d2a <_dtoa_r+0x382>
 8004cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d00:	4b93      	ldr	r3, [pc, #588]	; (8004f50 <_dtoa_r+0x5a8>)
 8004d02:	2703      	movs	r7, #3
 8004d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d08:	f7fb fdc4 	bl	8000894 <__aeabi_ddiv>
 8004d0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d10:	f004 040f 	and.w	r4, r4, #15
 8004d14:	4e8e      	ldr	r6, [pc, #568]	; (8004f50 <_dtoa_r+0x5a8>)
 8004d16:	b954      	cbnz	r4, 8004d2e <_dtoa_r+0x386>
 8004d18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d20:	f7fb fdb8 	bl	8000894 <__aeabi_ddiv>
 8004d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d28:	e029      	b.n	8004d7e <_dtoa_r+0x3d6>
 8004d2a:	2702      	movs	r7, #2
 8004d2c:	e7f2      	b.n	8004d14 <_dtoa_r+0x36c>
 8004d2e:	07e1      	lsls	r1, r4, #31
 8004d30:	d508      	bpl.n	8004d44 <_dtoa_r+0x39c>
 8004d32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d3a:	f7fb fc81 	bl	8000640 <__aeabi_dmul>
 8004d3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d42:	3701      	adds	r7, #1
 8004d44:	1064      	asrs	r4, r4, #1
 8004d46:	3608      	adds	r6, #8
 8004d48:	e7e5      	b.n	8004d16 <_dtoa_r+0x36e>
 8004d4a:	f000 80a5 	beq.w	8004e98 <_dtoa_r+0x4f0>
 8004d4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d52:	f1c9 0400 	rsb	r4, r9, #0
 8004d56:	4b7d      	ldr	r3, [pc, #500]	; (8004f4c <_dtoa_r+0x5a4>)
 8004d58:	f004 020f 	and.w	r2, r4, #15
 8004d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f7fb fc6c 	bl	8000640 <__aeabi_dmul>
 8004d68:	2702      	movs	r7, #2
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d70:	4e77      	ldr	r6, [pc, #476]	; (8004f50 <_dtoa_r+0x5a8>)
 8004d72:	1124      	asrs	r4, r4, #4
 8004d74:	2c00      	cmp	r4, #0
 8004d76:	f040 8084 	bne.w	8004e82 <_dtoa_r+0x4da>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1d2      	bne.n	8004d24 <_dtoa_r+0x37c>
 8004d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 808b 	beq.w	8004e9c <_dtoa_r+0x4f4>
 8004d86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d92:	2200      	movs	r2, #0
 8004d94:	4b6f      	ldr	r3, [pc, #444]	; (8004f54 <_dtoa_r+0x5ac>)
 8004d96:	f7fb fec5 	bl	8000b24 <__aeabi_dcmplt>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d07e      	beq.n	8004e9c <_dtoa_r+0x4f4>
 8004d9e:	9b02      	ldr	r3, [sp, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d07b      	beq.n	8004e9c <_dtoa_r+0x4f4>
 8004da4:	f1bb 0f00 	cmp.w	fp, #0
 8004da8:	dd38      	ble.n	8004e1c <_dtoa_r+0x474>
 8004daa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dae:	2200      	movs	r2, #0
 8004db0:	4b69      	ldr	r3, [pc, #420]	; (8004f58 <_dtoa_r+0x5b0>)
 8004db2:	f7fb fc45 	bl	8000640 <__aeabi_dmul>
 8004db6:	465c      	mov	r4, fp
 8004db8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dbc:	f109 38ff 	add.w	r8, r9, #4294967295
 8004dc0:	3701      	adds	r7, #1
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f7fb fbd2 	bl	800056c <__aeabi_i2d>
 8004dc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dcc:	f7fb fc38 	bl	8000640 <__aeabi_dmul>
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	4b62      	ldr	r3, [pc, #392]	; (8004f5c <_dtoa_r+0x5b4>)
 8004dd4:	f7fb fa7e 	bl	80002d4 <__adddf3>
 8004dd8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004ddc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004de0:	9611      	str	r6, [sp, #68]	; 0x44
 8004de2:	2c00      	cmp	r4, #0
 8004de4:	d15d      	bne.n	8004ea2 <_dtoa_r+0x4fa>
 8004de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dea:	2200      	movs	r2, #0
 8004dec:	4b5c      	ldr	r3, [pc, #368]	; (8004f60 <_dtoa_r+0x5b8>)
 8004dee:	f7fb fa6f 	bl	80002d0 <__aeabi_dsub>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004dfa:	4633      	mov	r3, r6
 8004dfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004dfe:	f7fb feaf 	bl	8000b60 <__aeabi_dcmpgt>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	f040 829e 	bne.w	8005344 <_dtoa_r+0x99c>
 8004e08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004e12:	f7fb fe87 	bl	8000b24 <__aeabi_dcmplt>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f040 8292 	bne.w	8005340 <_dtoa_r+0x998>
 8004e1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004e20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f2c0 8153 	blt.w	80050d2 <_dtoa_r+0x72a>
 8004e2c:	f1b9 0f0e 	cmp.w	r9, #14
 8004e30:	f300 814f 	bgt.w	80050d2 <_dtoa_r+0x72a>
 8004e34:	4b45      	ldr	r3, [pc, #276]	; (8004f4c <_dtoa_r+0x5a4>)
 8004e36:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004e3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004e42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f280 80db 	bge.w	8005000 <_dtoa_r+0x658>
 8004e4a:	9b02      	ldr	r3, [sp, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f300 80d7 	bgt.w	8005000 <_dtoa_r+0x658>
 8004e52:	f040 8274 	bne.w	800533e <_dtoa_r+0x996>
 8004e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	4b40      	ldr	r3, [pc, #256]	; (8004f60 <_dtoa_r+0x5b8>)
 8004e5e:	f7fb fbef 	bl	8000640 <__aeabi_dmul>
 8004e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e66:	f7fb fe71 	bl	8000b4c <__aeabi_dcmpge>
 8004e6a:	9c02      	ldr	r4, [sp, #8]
 8004e6c:	4626      	mov	r6, r4
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	f040 824a 	bne.w	8005308 <_dtoa_r+0x960>
 8004e74:	2331      	movs	r3, #49	; 0x31
 8004e76:	9f08      	ldr	r7, [sp, #32]
 8004e78:	f109 0901 	add.w	r9, r9, #1
 8004e7c:	f807 3b01 	strb.w	r3, [r7], #1
 8004e80:	e246      	b.n	8005310 <_dtoa_r+0x968>
 8004e82:	07e2      	lsls	r2, r4, #31
 8004e84:	d505      	bpl.n	8004e92 <_dtoa_r+0x4ea>
 8004e86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e8a:	f7fb fbd9 	bl	8000640 <__aeabi_dmul>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	3701      	adds	r7, #1
 8004e92:	1064      	asrs	r4, r4, #1
 8004e94:	3608      	adds	r6, #8
 8004e96:	e76d      	b.n	8004d74 <_dtoa_r+0x3cc>
 8004e98:	2702      	movs	r7, #2
 8004e9a:	e770      	b.n	8004d7e <_dtoa_r+0x3d6>
 8004e9c:	46c8      	mov	r8, r9
 8004e9e:	9c02      	ldr	r4, [sp, #8]
 8004ea0:	e78f      	b.n	8004dc2 <_dtoa_r+0x41a>
 8004ea2:	9908      	ldr	r1, [sp, #32]
 8004ea4:	4b29      	ldr	r3, [pc, #164]	; (8004f4c <_dtoa_r+0x5a4>)
 8004ea6:	4421      	add	r1, r4
 8004ea8:	9112      	str	r1, [sp, #72]	; 0x48
 8004eaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004eb0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004eb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004eb8:	2900      	cmp	r1, #0
 8004eba:	d055      	beq.n	8004f68 <_dtoa_r+0x5c0>
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	4929      	ldr	r1, [pc, #164]	; (8004f64 <_dtoa_r+0x5bc>)
 8004ec0:	f7fb fce8 	bl	8000894 <__aeabi_ddiv>
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	4632      	mov	r2, r6
 8004ec8:	f7fb fa02 	bl	80002d0 <__aeabi_dsub>
 8004ecc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ed0:	9f08      	ldr	r7, [sp, #32]
 8004ed2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ed6:	f7fb fe63 	bl	8000ba0 <__aeabi_d2iz>
 8004eda:	4604      	mov	r4, r0
 8004edc:	f7fb fb46 	bl	800056c <__aeabi_i2d>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ee8:	f7fb f9f2 	bl	80002d0 <__aeabi_dsub>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	3430      	adds	r4, #48	; 0x30
 8004ef2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ef6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004efa:	f807 4b01 	strb.w	r4, [r7], #1
 8004efe:	f7fb fe11 	bl	8000b24 <__aeabi_dcmplt>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d174      	bne.n	8004ff0 <_dtoa_r+0x648>
 8004f06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	4911      	ldr	r1, [pc, #68]	; (8004f54 <_dtoa_r+0x5ac>)
 8004f0e:	f7fb f9df 	bl	80002d0 <__aeabi_dsub>
 8004f12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f16:	f7fb fe05 	bl	8000b24 <__aeabi_dcmplt>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	f040 80b6 	bne.w	800508c <_dtoa_r+0x6e4>
 8004f20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f22:	429f      	cmp	r7, r3
 8004f24:	f43f af7a 	beq.w	8004e1c <_dtoa_r+0x474>
 8004f28:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <_dtoa_r+0x5b0>)
 8004f30:	f7fb fb86 	bl	8000640 <__aeabi_dmul>
 8004f34:	2200      	movs	r2, #0
 8004f36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <_dtoa_r+0x5b0>)
 8004f40:	f7fb fb7e 	bl	8000640 <__aeabi_dmul>
 8004f44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f48:	e7c3      	b.n	8004ed2 <_dtoa_r+0x52a>
 8004f4a:	bf00      	nop
 8004f4c:	080079b8 	.word	0x080079b8
 8004f50:	08007990 	.word	0x08007990
 8004f54:	3ff00000 	.word	0x3ff00000
 8004f58:	40240000 	.word	0x40240000
 8004f5c:	401c0000 	.word	0x401c0000
 8004f60:	40140000 	.word	0x40140000
 8004f64:	3fe00000 	.word	0x3fe00000
 8004f68:	4630      	mov	r0, r6
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	f7fb fb68 	bl	8000640 <__aeabi_dmul>
 8004f70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f72:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f76:	9c08      	ldr	r4, [sp, #32]
 8004f78:	9314      	str	r3, [sp, #80]	; 0x50
 8004f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f7e:	f7fb fe0f 	bl	8000ba0 <__aeabi_d2iz>
 8004f82:	9015      	str	r0, [sp, #84]	; 0x54
 8004f84:	f7fb faf2 	bl	800056c <__aeabi_i2d>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f90:	f7fb f99e 	bl	80002d0 <__aeabi_dsub>
 8004f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f96:	4606      	mov	r6, r0
 8004f98:	3330      	adds	r3, #48	; 0x30
 8004f9a:	f804 3b01 	strb.w	r3, [r4], #1
 8004f9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fa0:	460f      	mov	r7, r1
 8004fa2:	429c      	cmp	r4, r3
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	d124      	bne.n	8004ff4 <_dtoa_r+0x64c>
 8004faa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fae:	4bb3      	ldr	r3, [pc, #716]	; (800527c <_dtoa_r+0x8d4>)
 8004fb0:	f7fb f990 	bl	80002d4 <__adddf3>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4630      	mov	r0, r6
 8004fba:	4639      	mov	r1, r7
 8004fbc:	f7fb fdd0 	bl	8000b60 <__aeabi_dcmpgt>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d162      	bne.n	800508a <_dtoa_r+0x6e2>
 8004fc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fc8:	2000      	movs	r0, #0
 8004fca:	49ac      	ldr	r1, [pc, #688]	; (800527c <_dtoa_r+0x8d4>)
 8004fcc:	f7fb f980 	bl	80002d0 <__aeabi_dsub>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	f7fb fda4 	bl	8000b24 <__aeabi_dcmplt>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	f43f af1d 	beq.w	8004e1c <_dtoa_r+0x474>
 8004fe2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004fe4:	1e7b      	subs	r3, r7, #1
 8004fe6:	9314      	str	r3, [sp, #80]	; 0x50
 8004fe8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004fec:	2b30      	cmp	r3, #48	; 0x30
 8004fee:	d0f8      	beq.n	8004fe2 <_dtoa_r+0x63a>
 8004ff0:	46c1      	mov	r9, r8
 8004ff2:	e03a      	b.n	800506a <_dtoa_r+0x6c2>
 8004ff4:	4ba2      	ldr	r3, [pc, #648]	; (8005280 <_dtoa_r+0x8d8>)
 8004ff6:	f7fb fb23 	bl	8000640 <__aeabi_dmul>
 8004ffa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ffe:	e7bc      	b.n	8004f7a <_dtoa_r+0x5d2>
 8005000:	9f08      	ldr	r7, [sp, #32]
 8005002:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005006:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800500a:	f7fb fc43 	bl	8000894 <__aeabi_ddiv>
 800500e:	f7fb fdc7 	bl	8000ba0 <__aeabi_d2iz>
 8005012:	4604      	mov	r4, r0
 8005014:	f7fb faaa 	bl	800056c <__aeabi_i2d>
 8005018:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800501c:	f7fb fb10 	bl	8000640 <__aeabi_dmul>
 8005020:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005024:	460b      	mov	r3, r1
 8005026:	4602      	mov	r2, r0
 8005028:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800502c:	f7fb f950 	bl	80002d0 <__aeabi_dsub>
 8005030:	f807 6b01 	strb.w	r6, [r7], #1
 8005034:	9e08      	ldr	r6, [sp, #32]
 8005036:	9b02      	ldr	r3, [sp, #8]
 8005038:	1bbe      	subs	r6, r7, r6
 800503a:	42b3      	cmp	r3, r6
 800503c:	d13a      	bne.n	80050b4 <_dtoa_r+0x70c>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	f7fb f947 	bl	80002d4 <__adddf3>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800504e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005052:	f7fb fd85 	bl	8000b60 <__aeabi_dcmpgt>
 8005056:	bb58      	cbnz	r0, 80050b0 <_dtoa_r+0x708>
 8005058:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800505c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005060:	f7fb fd56 	bl	8000b10 <__aeabi_dcmpeq>
 8005064:	b108      	cbz	r0, 800506a <_dtoa_r+0x6c2>
 8005066:	07e1      	lsls	r1, r4, #31
 8005068:	d422      	bmi.n	80050b0 <_dtoa_r+0x708>
 800506a:	4628      	mov	r0, r5
 800506c:	4651      	mov	r1, sl
 800506e:	f000 fe69 	bl	8005d44 <_Bfree>
 8005072:	2300      	movs	r3, #0
 8005074:	703b      	strb	r3, [r7, #0]
 8005076:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005078:	f109 0001 	add.w	r0, r9, #1
 800507c:	6018      	str	r0, [r3, #0]
 800507e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005080:	2b00      	cmp	r3, #0
 8005082:	f43f acdf 	beq.w	8004a44 <_dtoa_r+0x9c>
 8005086:	601f      	str	r7, [r3, #0]
 8005088:	e4dc      	b.n	8004a44 <_dtoa_r+0x9c>
 800508a:	4627      	mov	r7, r4
 800508c:	463b      	mov	r3, r7
 800508e:	461f      	mov	r7, r3
 8005090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005094:	2a39      	cmp	r2, #57	; 0x39
 8005096:	d107      	bne.n	80050a8 <_dtoa_r+0x700>
 8005098:	9a08      	ldr	r2, [sp, #32]
 800509a:	429a      	cmp	r2, r3
 800509c:	d1f7      	bne.n	800508e <_dtoa_r+0x6e6>
 800509e:	2230      	movs	r2, #48	; 0x30
 80050a0:	9908      	ldr	r1, [sp, #32]
 80050a2:	f108 0801 	add.w	r8, r8, #1
 80050a6:	700a      	strb	r2, [r1, #0]
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	3201      	adds	r2, #1
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	e79f      	b.n	8004ff0 <_dtoa_r+0x648>
 80050b0:	46c8      	mov	r8, r9
 80050b2:	e7eb      	b.n	800508c <_dtoa_r+0x6e4>
 80050b4:	2200      	movs	r2, #0
 80050b6:	4b72      	ldr	r3, [pc, #456]	; (8005280 <_dtoa_r+0x8d8>)
 80050b8:	f7fb fac2 	bl	8000640 <__aeabi_dmul>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050c4:	2200      	movs	r2, #0
 80050c6:	2300      	movs	r3, #0
 80050c8:	f7fb fd22 	bl	8000b10 <__aeabi_dcmpeq>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d098      	beq.n	8005002 <_dtoa_r+0x65a>
 80050d0:	e7cb      	b.n	800506a <_dtoa_r+0x6c2>
 80050d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	f000 80cd 	beq.w	8005274 <_dtoa_r+0x8cc>
 80050da:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80050dc:	2a01      	cmp	r2, #1
 80050de:	f300 80af 	bgt.w	8005240 <_dtoa_r+0x898>
 80050e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80050e4:	2a00      	cmp	r2, #0
 80050e6:	f000 80a7 	beq.w	8005238 <_dtoa_r+0x890>
 80050ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050f0:	9f06      	ldr	r7, [sp, #24]
 80050f2:	9a06      	ldr	r2, [sp, #24]
 80050f4:	2101      	movs	r1, #1
 80050f6:	441a      	add	r2, r3
 80050f8:	9206      	str	r2, [sp, #24]
 80050fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050fc:	4628      	mov	r0, r5
 80050fe:	441a      	add	r2, r3
 8005100:	9209      	str	r2, [sp, #36]	; 0x24
 8005102:	f000 ff23 	bl	8005f4c <__i2b>
 8005106:	4606      	mov	r6, r0
 8005108:	2f00      	cmp	r7, #0
 800510a:	dd0c      	ble.n	8005126 <_dtoa_r+0x77e>
 800510c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	dd09      	ble.n	8005126 <_dtoa_r+0x77e>
 8005112:	42bb      	cmp	r3, r7
 8005114:	bfa8      	it	ge
 8005116:	463b      	movge	r3, r7
 8005118:	9a06      	ldr	r2, [sp, #24]
 800511a:	1aff      	subs	r7, r7, r3
 800511c:	1ad2      	subs	r2, r2, r3
 800511e:	9206      	str	r2, [sp, #24]
 8005120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	9309      	str	r3, [sp, #36]	; 0x24
 8005126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005128:	b1f3      	cbz	r3, 8005168 <_dtoa_r+0x7c0>
 800512a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80a9 	beq.w	8005284 <_dtoa_r+0x8dc>
 8005132:	2c00      	cmp	r4, #0
 8005134:	dd10      	ble.n	8005158 <_dtoa_r+0x7b0>
 8005136:	4631      	mov	r1, r6
 8005138:	4622      	mov	r2, r4
 800513a:	4628      	mov	r0, r5
 800513c:	f000 ffc0 	bl	80060c0 <__pow5mult>
 8005140:	4652      	mov	r2, sl
 8005142:	4601      	mov	r1, r0
 8005144:	4606      	mov	r6, r0
 8005146:	4628      	mov	r0, r5
 8005148:	f000 ff16 	bl	8005f78 <__multiply>
 800514c:	4680      	mov	r8, r0
 800514e:	4651      	mov	r1, sl
 8005150:	4628      	mov	r0, r5
 8005152:	f000 fdf7 	bl	8005d44 <_Bfree>
 8005156:	46c2      	mov	sl, r8
 8005158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800515a:	1b1a      	subs	r2, r3, r4
 800515c:	d004      	beq.n	8005168 <_dtoa_r+0x7c0>
 800515e:	4651      	mov	r1, sl
 8005160:	4628      	mov	r0, r5
 8005162:	f000 ffad 	bl	80060c0 <__pow5mult>
 8005166:	4682      	mov	sl, r0
 8005168:	2101      	movs	r1, #1
 800516a:	4628      	mov	r0, r5
 800516c:	f000 feee 	bl	8005f4c <__i2b>
 8005170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005172:	4604      	mov	r4, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	f340 8087 	ble.w	8005288 <_dtoa_r+0x8e0>
 800517a:	461a      	mov	r2, r3
 800517c:	4601      	mov	r1, r0
 800517e:	4628      	mov	r0, r5
 8005180:	f000 ff9e 	bl	80060c0 <__pow5mult>
 8005184:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005186:	4604      	mov	r4, r0
 8005188:	2b01      	cmp	r3, #1
 800518a:	f340 8080 	ble.w	800528e <_dtoa_r+0x8e6>
 800518e:	f04f 0800 	mov.w	r8, #0
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005198:	6918      	ldr	r0, [r3, #16]
 800519a:	f000 fe89 	bl	8005eb0 <__hi0bits>
 800519e:	f1c0 0020 	rsb	r0, r0, #32
 80051a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a4:	4418      	add	r0, r3
 80051a6:	f010 001f 	ands.w	r0, r0, #31
 80051aa:	f000 8092 	beq.w	80052d2 <_dtoa_r+0x92a>
 80051ae:	f1c0 0320 	rsb	r3, r0, #32
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	f340 808a 	ble.w	80052cc <_dtoa_r+0x924>
 80051b8:	f1c0 001c 	rsb	r0, r0, #28
 80051bc:	9b06      	ldr	r3, [sp, #24]
 80051be:	4407      	add	r7, r0
 80051c0:	4403      	add	r3, r0
 80051c2:	9306      	str	r3, [sp, #24]
 80051c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c6:	4403      	add	r3, r0
 80051c8:	9309      	str	r3, [sp, #36]	; 0x24
 80051ca:	9b06      	ldr	r3, [sp, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dd05      	ble.n	80051dc <_dtoa_r+0x834>
 80051d0:	4651      	mov	r1, sl
 80051d2:	461a      	mov	r2, r3
 80051d4:	4628      	mov	r0, r5
 80051d6:	f000 ffcd 	bl	8006174 <__lshift>
 80051da:	4682      	mov	sl, r0
 80051dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051de:	2b00      	cmp	r3, #0
 80051e0:	dd05      	ble.n	80051ee <_dtoa_r+0x846>
 80051e2:	4621      	mov	r1, r4
 80051e4:	461a      	mov	r2, r3
 80051e6:	4628      	mov	r0, r5
 80051e8:	f000 ffc4 	bl	8006174 <__lshift>
 80051ec:	4604      	mov	r4, r0
 80051ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d070      	beq.n	80052d6 <_dtoa_r+0x92e>
 80051f4:	4621      	mov	r1, r4
 80051f6:	4650      	mov	r0, sl
 80051f8:	f001 f828 	bl	800624c <__mcmp>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	da6a      	bge.n	80052d6 <_dtoa_r+0x92e>
 8005200:	2300      	movs	r3, #0
 8005202:	4651      	mov	r1, sl
 8005204:	220a      	movs	r2, #10
 8005206:	4628      	mov	r0, r5
 8005208:	f000 fdbe 	bl	8005d88 <__multadd>
 800520c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800520e:	4682      	mov	sl, r0
 8005210:	f109 39ff 	add.w	r9, r9, #4294967295
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8193 	beq.w	8005540 <_dtoa_r+0xb98>
 800521a:	4631      	mov	r1, r6
 800521c:	2300      	movs	r3, #0
 800521e:	220a      	movs	r2, #10
 8005220:	4628      	mov	r0, r5
 8005222:	f000 fdb1 	bl	8005d88 <__multadd>
 8005226:	f1bb 0f00 	cmp.w	fp, #0
 800522a:	4606      	mov	r6, r0
 800522c:	f300 8093 	bgt.w	8005356 <_dtoa_r+0x9ae>
 8005230:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005232:	2b02      	cmp	r3, #2
 8005234:	dc57      	bgt.n	80052e6 <_dtoa_r+0x93e>
 8005236:	e08e      	b.n	8005356 <_dtoa_r+0x9ae>
 8005238:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800523a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800523e:	e756      	b.n	80050ee <_dtoa_r+0x746>
 8005240:	9b02      	ldr	r3, [sp, #8]
 8005242:	1e5c      	subs	r4, r3, #1
 8005244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005246:	42a3      	cmp	r3, r4
 8005248:	bfb7      	itett	lt
 800524a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800524c:	1b1c      	subge	r4, r3, r4
 800524e:	1ae2      	sublt	r2, r4, r3
 8005250:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005252:	bfbe      	ittt	lt
 8005254:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005256:	189b      	addlt	r3, r3, r2
 8005258:	930e      	strlt	r3, [sp, #56]	; 0x38
 800525a:	9b02      	ldr	r3, [sp, #8]
 800525c:	bfb8      	it	lt
 800525e:	2400      	movlt	r4, #0
 8005260:	2b00      	cmp	r3, #0
 8005262:	bfbb      	ittet	lt
 8005264:	9b06      	ldrlt	r3, [sp, #24]
 8005266:	9a02      	ldrlt	r2, [sp, #8]
 8005268:	9f06      	ldrge	r7, [sp, #24]
 800526a:	1a9f      	sublt	r7, r3, r2
 800526c:	bfac      	ite	ge
 800526e:	9b02      	ldrge	r3, [sp, #8]
 8005270:	2300      	movlt	r3, #0
 8005272:	e73e      	b.n	80050f2 <_dtoa_r+0x74a>
 8005274:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005276:	9f06      	ldr	r7, [sp, #24]
 8005278:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800527a:	e745      	b.n	8005108 <_dtoa_r+0x760>
 800527c:	3fe00000 	.word	0x3fe00000
 8005280:	40240000 	.word	0x40240000
 8005284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005286:	e76a      	b.n	800515e <_dtoa_r+0x7b6>
 8005288:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800528a:	2b01      	cmp	r3, #1
 800528c:	dc19      	bgt.n	80052c2 <_dtoa_r+0x91a>
 800528e:	9b04      	ldr	r3, [sp, #16]
 8005290:	b9bb      	cbnz	r3, 80052c2 <_dtoa_r+0x91a>
 8005292:	9b05      	ldr	r3, [sp, #20]
 8005294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005298:	b99b      	cbnz	r3, 80052c2 <_dtoa_r+0x91a>
 800529a:	9b05      	ldr	r3, [sp, #20]
 800529c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052a0:	0d1b      	lsrs	r3, r3, #20
 80052a2:	051b      	lsls	r3, r3, #20
 80052a4:	b183      	cbz	r3, 80052c8 <_dtoa_r+0x920>
 80052a6:	f04f 0801 	mov.w	r8, #1
 80052aa:	9b06      	ldr	r3, [sp, #24]
 80052ac:	3301      	adds	r3, #1
 80052ae:	9306      	str	r3, [sp, #24]
 80052b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b2:	3301      	adds	r3, #1
 80052b4:	9309      	str	r3, [sp, #36]	; 0x24
 80052b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f47f af6a 	bne.w	8005192 <_dtoa_r+0x7ea>
 80052be:	2001      	movs	r0, #1
 80052c0:	e76f      	b.n	80051a2 <_dtoa_r+0x7fa>
 80052c2:	f04f 0800 	mov.w	r8, #0
 80052c6:	e7f6      	b.n	80052b6 <_dtoa_r+0x90e>
 80052c8:	4698      	mov	r8, r3
 80052ca:	e7f4      	b.n	80052b6 <_dtoa_r+0x90e>
 80052cc:	f43f af7d 	beq.w	80051ca <_dtoa_r+0x822>
 80052d0:	4618      	mov	r0, r3
 80052d2:	301c      	adds	r0, #28
 80052d4:	e772      	b.n	80051bc <_dtoa_r+0x814>
 80052d6:	9b02      	ldr	r3, [sp, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	dc36      	bgt.n	800534a <_dtoa_r+0x9a2>
 80052dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052de:	2b02      	cmp	r3, #2
 80052e0:	dd33      	ble.n	800534a <_dtoa_r+0x9a2>
 80052e2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80052e6:	f1bb 0f00 	cmp.w	fp, #0
 80052ea:	d10d      	bne.n	8005308 <_dtoa_r+0x960>
 80052ec:	4621      	mov	r1, r4
 80052ee:	465b      	mov	r3, fp
 80052f0:	2205      	movs	r2, #5
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 fd48 	bl	8005d88 <__multadd>
 80052f8:	4601      	mov	r1, r0
 80052fa:	4604      	mov	r4, r0
 80052fc:	4650      	mov	r0, sl
 80052fe:	f000 ffa5 	bl	800624c <__mcmp>
 8005302:	2800      	cmp	r0, #0
 8005304:	f73f adb6 	bgt.w	8004e74 <_dtoa_r+0x4cc>
 8005308:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800530a:	9f08      	ldr	r7, [sp, #32]
 800530c:	ea6f 0903 	mvn.w	r9, r3
 8005310:	f04f 0800 	mov.w	r8, #0
 8005314:	4621      	mov	r1, r4
 8005316:	4628      	mov	r0, r5
 8005318:	f000 fd14 	bl	8005d44 <_Bfree>
 800531c:	2e00      	cmp	r6, #0
 800531e:	f43f aea4 	beq.w	800506a <_dtoa_r+0x6c2>
 8005322:	f1b8 0f00 	cmp.w	r8, #0
 8005326:	d005      	beq.n	8005334 <_dtoa_r+0x98c>
 8005328:	45b0      	cmp	r8, r6
 800532a:	d003      	beq.n	8005334 <_dtoa_r+0x98c>
 800532c:	4641      	mov	r1, r8
 800532e:	4628      	mov	r0, r5
 8005330:	f000 fd08 	bl	8005d44 <_Bfree>
 8005334:	4631      	mov	r1, r6
 8005336:	4628      	mov	r0, r5
 8005338:	f000 fd04 	bl	8005d44 <_Bfree>
 800533c:	e695      	b.n	800506a <_dtoa_r+0x6c2>
 800533e:	2400      	movs	r4, #0
 8005340:	4626      	mov	r6, r4
 8005342:	e7e1      	b.n	8005308 <_dtoa_r+0x960>
 8005344:	46c1      	mov	r9, r8
 8005346:	4626      	mov	r6, r4
 8005348:	e594      	b.n	8004e74 <_dtoa_r+0x4cc>
 800534a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800534c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 80fc 	beq.w	800554e <_dtoa_r+0xba6>
 8005356:	2f00      	cmp	r7, #0
 8005358:	dd05      	ble.n	8005366 <_dtoa_r+0x9be>
 800535a:	4631      	mov	r1, r6
 800535c:	463a      	mov	r2, r7
 800535e:	4628      	mov	r0, r5
 8005360:	f000 ff08 	bl	8006174 <__lshift>
 8005364:	4606      	mov	r6, r0
 8005366:	f1b8 0f00 	cmp.w	r8, #0
 800536a:	d05c      	beq.n	8005426 <_dtoa_r+0xa7e>
 800536c:	4628      	mov	r0, r5
 800536e:	6871      	ldr	r1, [r6, #4]
 8005370:	f000 fca8 	bl	8005cc4 <_Balloc>
 8005374:	4607      	mov	r7, r0
 8005376:	b928      	cbnz	r0, 8005384 <_dtoa_r+0x9dc>
 8005378:	4602      	mov	r2, r0
 800537a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800537e:	4b7e      	ldr	r3, [pc, #504]	; (8005578 <_dtoa_r+0xbd0>)
 8005380:	f7ff bb26 	b.w	80049d0 <_dtoa_r+0x28>
 8005384:	6932      	ldr	r2, [r6, #16]
 8005386:	f106 010c 	add.w	r1, r6, #12
 800538a:	3202      	adds	r2, #2
 800538c:	0092      	lsls	r2, r2, #2
 800538e:	300c      	adds	r0, #12
 8005390:	f000 fc8a 	bl	8005ca8 <memcpy>
 8005394:	2201      	movs	r2, #1
 8005396:	4639      	mov	r1, r7
 8005398:	4628      	mov	r0, r5
 800539a:	f000 feeb 	bl	8006174 <__lshift>
 800539e:	46b0      	mov	r8, r6
 80053a0:	4606      	mov	r6, r0
 80053a2:	9b08      	ldr	r3, [sp, #32]
 80053a4:	3301      	adds	r3, #1
 80053a6:	9302      	str	r3, [sp, #8]
 80053a8:	9b08      	ldr	r3, [sp, #32]
 80053aa:	445b      	add	r3, fp
 80053ac:	930a      	str	r3, [sp, #40]	; 0x28
 80053ae:	9b04      	ldr	r3, [sp, #16]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	9309      	str	r3, [sp, #36]	; 0x24
 80053b6:	9b02      	ldr	r3, [sp, #8]
 80053b8:	4621      	mov	r1, r4
 80053ba:	4650      	mov	r0, sl
 80053bc:	f103 3bff 	add.w	fp, r3, #4294967295
 80053c0:	f7ff fa64 	bl	800488c <quorem>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4641      	mov	r1, r8
 80053c8:	3330      	adds	r3, #48	; 0x30
 80053ca:	9004      	str	r0, [sp, #16]
 80053cc:	4650      	mov	r0, sl
 80053ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80053d0:	f000 ff3c 	bl	800624c <__mcmp>
 80053d4:	4632      	mov	r2, r6
 80053d6:	9006      	str	r0, [sp, #24]
 80053d8:	4621      	mov	r1, r4
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 ff52 	bl	8006284 <__mdiff>
 80053e0:	68c2      	ldr	r2, [r0, #12]
 80053e2:	4607      	mov	r7, r0
 80053e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053e6:	bb02      	cbnz	r2, 800542a <_dtoa_r+0xa82>
 80053e8:	4601      	mov	r1, r0
 80053ea:	4650      	mov	r0, sl
 80053ec:	f000 ff2e 	bl	800624c <__mcmp>
 80053f0:	4602      	mov	r2, r0
 80053f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053f4:	4639      	mov	r1, r7
 80053f6:	4628      	mov	r0, r5
 80053f8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80053fc:	f000 fca2 	bl	8005d44 <_Bfree>
 8005400:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005404:	9f02      	ldr	r7, [sp, #8]
 8005406:	ea43 0102 	orr.w	r1, r3, r2
 800540a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800540c:	430b      	orrs	r3, r1
 800540e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005410:	d10d      	bne.n	800542e <_dtoa_r+0xa86>
 8005412:	2b39      	cmp	r3, #57	; 0x39
 8005414:	d027      	beq.n	8005466 <_dtoa_r+0xabe>
 8005416:	9a06      	ldr	r2, [sp, #24]
 8005418:	2a00      	cmp	r2, #0
 800541a:	dd01      	ble.n	8005420 <_dtoa_r+0xa78>
 800541c:	9b04      	ldr	r3, [sp, #16]
 800541e:	3331      	adds	r3, #49	; 0x31
 8005420:	f88b 3000 	strb.w	r3, [fp]
 8005424:	e776      	b.n	8005314 <_dtoa_r+0x96c>
 8005426:	4630      	mov	r0, r6
 8005428:	e7b9      	b.n	800539e <_dtoa_r+0x9f6>
 800542a:	2201      	movs	r2, #1
 800542c:	e7e2      	b.n	80053f4 <_dtoa_r+0xa4c>
 800542e:	9906      	ldr	r1, [sp, #24]
 8005430:	2900      	cmp	r1, #0
 8005432:	db04      	blt.n	800543e <_dtoa_r+0xa96>
 8005434:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005436:	4301      	orrs	r1, r0
 8005438:	9809      	ldr	r0, [sp, #36]	; 0x24
 800543a:	4301      	orrs	r1, r0
 800543c:	d120      	bne.n	8005480 <_dtoa_r+0xad8>
 800543e:	2a00      	cmp	r2, #0
 8005440:	ddee      	ble.n	8005420 <_dtoa_r+0xa78>
 8005442:	4651      	mov	r1, sl
 8005444:	2201      	movs	r2, #1
 8005446:	4628      	mov	r0, r5
 8005448:	9302      	str	r3, [sp, #8]
 800544a:	f000 fe93 	bl	8006174 <__lshift>
 800544e:	4621      	mov	r1, r4
 8005450:	4682      	mov	sl, r0
 8005452:	f000 fefb 	bl	800624c <__mcmp>
 8005456:	2800      	cmp	r0, #0
 8005458:	9b02      	ldr	r3, [sp, #8]
 800545a:	dc02      	bgt.n	8005462 <_dtoa_r+0xaba>
 800545c:	d1e0      	bne.n	8005420 <_dtoa_r+0xa78>
 800545e:	07da      	lsls	r2, r3, #31
 8005460:	d5de      	bpl.n	8005420 <_dtoa_r+0xa78>
 8005462:	2b39      	cmp	r3, #57	; 0x39
 8005464:	d1da      	bne.n	800541c <_dtoa_r+0xa74>
 8005466:	2339      	movs	r3, #57	; 0x39
 8005468:	f88b 3000 	strb.w	r3, [fp]
 800546c:	463b      	mov	r3, r7
 800546e:	461f      	mov	r7, r3
 8005470:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005474:	3b01      	subs	r3, #1
 8005476:	2a39      	cmp	r2, #57	; 0x39
 8005478:	d050      	beq.n	800551c <_dtoa_r+0xb74>
 800547a:	3201      	adds	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e749      	b.n	8005314 <_dtoa_r+0x96c>
 8005480:	2a00      	cmp	r2, #0
 8005482:	dd03      	ble.n	800548c <_dtoa_r+0xae4>
 8005484:	2b39      	cmp	r3, #57	; 0x39
 8005486:	d0ee      	beq.n	8005466 <_dtoa_r+0xabe>
 8005488:	3301      	adds	r3, #1
 800548a:	e7c9      	b.n	8005420 <_dtoa_r+0xa78>
 800548c:	9a02      	ldr	r2, [sp, #8]
 800548e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005490:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005494:	428a      	cmp	r2, r1
 8005496:	d02a      	beq.n	80054ee <_dtoa_r+0xb46>
 8005498:	4651      	mov	r1, sl
 800549a:	2300      	movs	r3, #0
 800549c:	220a      	movs	r2, #10
 800549e:	4628      	mov	r0, r5
 80054a0:	f000 fc72 	bl	8005d88 <__multadd>
 80054a4:	45b0      	cmp	r8, r6
 80054a6:	4682      	mov	sl, r0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	f04f 020a 	mov.w	r2, #10
 80054b0:	4641      	mov	r1, r8
 80054b2:	4628      	mov	r0, r5
 80054b4:	d107      	bne.n	80054c6 <_dtoa_r+0xb1e>
 80054b6:	f000 fc67 	bl	8005d88 <__multadd>
 80054ba:	4680      	mov	r8, r0
 80054bc:	4606      	mov	r6, r0
 80054be:	9b02      	ldr	r3, [sp, #8]
 80054c0:	3301      	adds	r3, #1
 80054c2:	9302      	str	r3, [sp, #8]
 80054c4:	e777      	b.n	80053b6 <_dtoa_r+0xa0e>
 80054c6:	f000 fc5f 	bl	8005d88 <__multadd>
 80054ca:	4631      	mov	r1, r6
 80054cc:	4680      	mov	r8, r0
 80054ce:	2300      	movs	r3, #0
 80054d0:	220a      	movs	r2, #10
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 fc58 	bl	8005d88 <__multadd>
 80054d8:	4606      	mov	r6, r0
 80054da:	e7f0      	b.n	80054be <_dtoa_r+0xb16>
 80054dc:	f1bb 0f00 	cmp.w	fp, #0
 80054e0:	bfcc      	ite	gt
 80054e2:	465f      	movgt	r7, fp
 80054e4:	2701      	movle	r7, #1
 80054e6:	f04f 0800 	mov.w	r8, #0
 80054ea:	9a08      	ldr	r2, [sp, #32]
 80054ec:	4417      	add	r7, r2
 80054ee:	4651      	mov	r1, sl
 80054f0:	2201      	movs	r2, #1
 80054f2:	4628      	mov	r0, r5
 80054f4:	9302      	str	r3, [sp, #8]
 80054f6:	f000 fe3d 	bl	8006174 <__lshift>
 80054fa:	4621      	mov	r1, r4
 80054fc:	4682      	mov	sl, r0
 80054fe:	f000 fea5 	bl	800624c <__mcmp>
 8005502:	2800      	cmp	r0, #0
 8005504:	dcb2      	bgt.n	800546c <_dtoa_r+0xac4>
 8005506:	d102      	bne.n	800550e <_dtoa_r+0xb66>
 8005508:	9b02      	ldr	r3, [sp, #8]
 800550a:	07db      	lsls	r3, r3, #31
 800550c:	d4ae      	bmi.n	800546c <_dtoa_r+0xac4>
 800550e:	463b      	mov	r3, r7
 8005510:	461f      	mov	r7, r3
 8005512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005516:	2a30      	cmp	r2, #48	; 0x30
 8005518:	d0fa      	beq.n	8005510 <_dtoa_r+0xb68>
 800551a:	e6fb      	b.n	8005314 <_dtoa_r+0x96c>
 800551c:	9a08      	ldr	r2, [sp, #32]
 800551e:	429a      	cmp	r2, r3
 8005520:	d1a5      	bne.n	800546e <_dtoa_r+0xac6>
 8005522:	2331      	movs	r3, #49	; 0x31
 8005524:	f109 0901 	add.w	r9, r9, #1
 8005528:	7013      	strb	r3, [r2, #0]
 800552a:	e6f3      	b.n	8005314 <_dtoa_r+0x96c>
 800552c:	4b13      	ldr	r3, [pc, #76]	; (800557c <_dtoa_r+0xbd4>)
 800552e:	f7ff baa7 	b.w	8004a80 <_dtoa_r+0xd8>
 8005532:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005534:	2b00      	cmp	r3, #0
 8005536:	f47f aa80 	bne.w	8004a3a <_dtoa_r+0x92>
 800553a:	4b11      	ldr	r3, [pc, #68]	; (8005580 <_dtoa_r+0xbd8>)
 800553c:	f7ff baa0 	b.w	8004a80 <_dtoa_r+0xd8>
 8005540:	f1bb 0f00 	cmp.w	fp, #0
 8005544:	dc03      	bgt.n	800554e <_dtoa_r+0xba6>
 8005546:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005548:	2b02      	cmp	r3, #2
 800554a:	f73f aecc 	bgt.w	80052e6 <_dtoa_r+0x93e>
 800554e:	9f08      	ldr	r7, [sp, #32]
 8005550:	4621      	mov	r1, r4
 8005552:	4650      	mov	r0, sl
 8005554:	f7ff f99a 	bl	800488c <quorem>
 8005558:	9a08      	ldr	r2, [sp, #32]
 800555a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800555e:	f807 3b01 	strb.w	r3, [r7], #1
 8005562:	1aba      	subs	r2, r7, r2
 8005564:	4593      	cmp	fp, r2
 8005566:	ddb9      	ble.n	80054dc <_dtoa_r+0xb34>
 8005568:	4651      	mov	r1, sl
 800556a:	2300      	movs	r3, #0
 800556c:	220a      	movs	r2, #10
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fc0a 	bl	8005d88 <__multadd>
 8005574:	4682      	mov	sl, r0
 8005576:	e7eb      	b.n	8005550 <_dtoa_r+0xba8>
 8005578:	0800789c 	.word	0x0800789c
 800557c:	08007698 	.word	0x08007698
 8005580:	08007819 	.word	0x08007819

08005584 <rshift>:
 8005584:	6903      	ldr	r3, [r0, #16]
 8005586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800558a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800558e:	f100 0414 	add.w	r4, r0, #20
 8005592:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005596:	dd46      	ble.n	8005626 <rshift+0xa2>
 8005598:	f011 011f 	ands.w	r1, r1, #31
 800559c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80055a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80055a4:	d10c      	bne.n	80055c0 <rshift+0x3c>
 80055a6:	4629      	mov	r1, r5
 80055a8:	f100 0710 	add.w	r7, r0, #16
 80055ac:	42b1      	cmp	r1, r6
 80055ae:	d335      	bcc.n	800561c <rshift+0x98>
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	1eea      	subs	r2, r5, #3
 80055b6:	4296      	cmp	r6, r2
 80055b8:	bf38      	it	cc
 80055ba:	2300      	movcc	r3, #0
 80055bc:	4423      	add	r3, r4
 80055be:	e015      	b.n	80055ec <rshift+0x68>
 80055c0:	46a1      	mov	r9, r4
 80055c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80055c6:	f1c1 0820 	rsb	r8, r1, #32
 80055ca:	40cf      	lsrs	r7, r1
 80055cc:	f105 0e04 	add.w	lr, r5, #4
 80055d0:	4576      	cmp	r6, lr
 80055d2:	46f4      	mov	ip, lr
 80055d4:	d816      	bhi.n	8005604 <rshift+0x80>
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009a      	lsls	r2, r3, #2
 80055da:	3a04      	subs	r2, #4
 80055dc:	3501      	adds	r5, #1
 80055de:	42ae      	cmp	r6, r5
 80055e0:	bf38      	it	cc
 80055e2:	2200      	movcc	r2, #0
 80055e4:	18a3      	adds	r3, r4, r2
 80055e6:	50a7      	str	r7, [r4, r2]
 80055e8:	b107      	cbz	r7, 80055ec <rshift+0x68>
 80055ea:	3304      	adds	r3, #4
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	eba3 0204 	sub.w	r2, r3, r4
 80055f2:	bf08      	it	eq
 80055f4:	2300      	moveq	r3, #0
 80055f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80055fa:	6102      	str	r2, [r0, #16]
 80055fc:	bf08      	it	eq
 80055fe:	6143      	streq	r3, [r0, #20]
 8005600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005604:	f8dc c000 	ldr.w	ip, [ip]
 8005608:	fa0c fc08 	lsl.w	ip, ip, r8
 800560c:	ea4c 0707 	orr.w	r7, ip, r7
 8005610:	f849 7b04 	str.w	r7, [r9], #4
 8005614:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005618:	40cf      	lsrs	r7, r1
 800561a:	e7d9      	b.n	80055d0 <rshift+0x4c>
 800561c:	f851 cb04 	ldr.w	ip, [r1], #4
 8005620:	f847 cf04 	str.w	ip, [r7, #4]!
 8005624:	e7c2      	b.n	80055ac <rshift+0x28>
 8005626:	4623      	mov	r3, r4
 8005628:	e7e0      	b.n	80055ec <rshift+0x68>

0800562a <__hexdig_fun>:
 800562a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800562e:	2b09      	cmp	r3, #9
 8005630:	d802      	bhi.n	8005638 <__hexdig_fun+0xe>
 8005632:	3820      	subs	r0, #32
 8005634:	b2c0      	uxtb	r0, r0
 8005636:	4770      	bx	lr
 8005638:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800563c:	2b05      	cmp	r3, #5
 800563e:	d801      	bhi.n	8005644 <__hexdig_fun+0x1a>
 8005640:	3847      	subs	r0, #71	; 0x47
 8005642:	e7f7      	b.n	8005634 <__hexdig_fun+0xa>
 8005644:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005648:	2b05      	cmp	r3, #5
 800564a:	d801      	bhi.n	8005650 <__hexdig_fun+0x26>
 800564c:	3827      	subs	r0, #39	; 0x27
 800564e:	e7f1      	b.n	8005634 <__hexdig_fun+0xa>
 8005650:	2000      	movs	r0, #0
 8005652:	4770      	bx	lr

08005654 <__gethex>:
 8005654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005658:	b08b      	sub	sp, #44	; 0x2c
 800565a:	9306      	str	r3, [sp, #24]
 800565c:	4bb9      	ldr	r3, [pc, #740]	; (8005944 <__gethex+0x2f0>)
 800565e:	9002      	str	r0, [sp, #8]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	468b      	mov	fp, r1
 8005664:	4618      	mov	r0, r3
 8005666:	4690      	mov	r8, r2
 8005668:	9303      	str	r3, [sp, #12]
 800566a:	f7fa fd71 	bl	8000150 <strlen>
 800566e:	4682      	mov	sl, r0
 8005670:	9b03      	ldr	r3, [sp, #12]
 8005672:	f8db 2000 	ldr.w	r2, [fp]
 8005676:	4403      	add	r3, r0
 8005678:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800567c:	9307      	str	r3, [sp, #28]
 800567e:	1c93      	adds	r3, r2, #2
 8005680:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005684:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005688:	32fe      	adds	r2, #254	; 0xfe
 800568a:	18d1      	adds	r1, r2, r3
 800568c:	461f      	mov	r7, r3
 800568e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005692:	9101      	str	r1, [sp, #4]
 8005694:	2830      	cmp	r0, #48	; 0x30
 8005696:	d0f8      	beq.n	800568a <__gethex+0x36>
 8005698:	f7ff ffc7 	bl	800562a <__hexdig_fun>
 800569c:	4604      	mov	r4, r0
 800569e:	2800      	cmp	r0, #0
 80056a0:	d13a      	bne.n	8005718 <__gethex+0xc4>
 80056a2:	4652      	mov	r2, sl
 80056a4:	4638      	mov	r0, r7
 80056a6:	9903      	ldr	r1, [sp, #12]
 80056a8:	f001 f9ea 	bl	8006a80 <strncmp>
 80056ac:	4605      	mov	r5, r0
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d166      	bne.n	8005780 <__gethex+0x12c>
 80056b2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80056b6:	eb07 060a 	add.w	r6, r7, sl
 80056ba:	f7ff ffb6 	bl	800562a <__hexdig_fun>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d060      	beq.n	8005784 <__gethex+0x130>
 80056c2:	4633      	mov	r3, r6
 80056c4:	7818      	ldrb	r0, [r3, #0]
 80056c6:	461f      	mov	r7, r3
 80056c8:	2830      	cmp	r0, #48	; 0x30
 80056ca:	f103 0301 	add.w	r3, r3, #1
 80056ce:	d0f9      	beq.n	80056c4 <__gethex+0x70>
 80056d0:	f7ff ffab 	bl	800562a <__hexdig_fun>
 80056d4:	2301      	movs	r3, #1
 80056d6:	fab0 f480 	clz	r4, r0
 80056da:	4635      	mov	r5, r6
 80056dc:	0964      	lsrs	r4, r4, #5
 80056de:	9301      	str	r3, [sp, #4]
 80056e0:	463a      	mov	r2, r7
 80056e2:	4616      	mov	r6, r2
 80056e4:	7830      	ldrb	r0, [r6, #0]
 80056e6:	3201      	adds	r2, #1
 80056e8:	f7ff ff9f 	bl	800562a <__hexdig_fun>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d1f8      	bne.n	80056e2 <__gethex+0x8e>
 80056f0:	4652      	mov	r2, sl
 80056f2:	4630      	mov	r0, r6
 80056f4:	9903      	ldr	r1, [sp, #12]
 80056f6:	f001 f9c3 	bl	8006a80 <strncmp>
 80056fa:	b980      	cbnz	r0, 800571e <__gethex+0xca>
 80056fc:	b94d      	cbnz	r5, 8005712 <__gethex+0xbe>
 80056fe:	eb06 050a 	add.w	r5, r6, sl
 8005702:	462a      	mov	r2, r5
 8005704:	4616      	mov	r6, r2
 8005706:	7830      	ldrb	r0, [r6, #0]
 8005708:	3201      	adds	r2, #1
 800570a:	f7ff ff8e 	bl	800562a <__hexdig_fun>
 800570e:	2800      	cmp	r0, #0
 8005710:	d1f8      	bne.n	8005704 <__gethex+0xb0>
 8005712:	1bad      	subs	r5, r5, r6
 8005714:	00ad      	lsls	r5, r5, #2
 8005716:	e004      	b.n	8005722 <__gethex+0xce>
 8005718:	2400      	movs	r4, #0
 800571a:	4625      	mov	r5, r4
 800571c:	e7e0      	b.n	80056e0 <__gethex+0x8c>
 800571e:	2d00      	cmp	r5, #0
 8005720:	d1f7      	bne.n	8005712 <__gethex+0xbe>
 8005722:	7833      	ldrb	r3, [r6, #0]
 8005724:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005728:	2b50      	cmp	r3, #80	; 0x50
 800572a:	d139      	bne.n	80057a0 <__gethex+0x14c>
 800572c:	7873      	ldrb	r3, [r6, #1]
 800572e:	2b2b      	cmp	r3, #43	; 0x2b
 8005730:	d02a      	beq.n	8005788 <__gethex+0x134>
 8005732:	2b2d      	cmp	r3, #45	; 0x2d
 8005734:	d02c      	beq.n	8005790 <__gethex+0x13c>
 8005736:	f04f 0900 	mov.w	r9, #0
 800573a:	1c71      	adds	r1, r6, #1
 800573c:	7808      	ldrb	r0, [r1, #0]
 800573e:	f7ff ff74 	bl	800562a <__hexdig_fun>
 8005742:	1e43      	subs	r3, r0, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b18      	cmp	r3, #24
 8005748:	d82a      	bhi.n	80057a0 <__gethex+0x14c>
 800574a:	f1a0 0210 	sub.w	r2, r0, #16
 800574e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005752:	f7ff ff6a 	bl	800562a <__hexdig_fun>
 8005756:	1e43      	subs	r3, r0, #1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b18      	cmp	r3, #24
 800575c:	d91b      	bls.n	8005796 <__gethex+0x142>
 800575e:	f1b9 0f00 	cmp.w	r9, #0
 8005762:	d000      	beq.n	8005766 <__gethex+0x112>
 8005764:	4252      	negs	r2, r2
 8005766:	4415      	add	r5, r2
 8005768:	f8cb 1000 	str.w	r1, [fp]
 800576c:	b1d4      	cbz	r4, 80057a4 <__gethex+0x150>
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	bf14      	ite	ne
 8005774:	2700      	movne	r7, #0
 8005776:	2706      	moveq	r7, #6
 8005778:	4638      	mov	r0, r7
 800577a:	b00b      	add	sp, #44	; 0x2c
 800577c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005780:	463e      	mov	r6, r7
 8005782:	4625      	mov	r5, r4
 8005784:	2401      	movs	r4, #1
 8005786:	e7cc      	b.n	8005722 <__gethex+0xce>
 8005788:	f04f 0900 	mov.w	r9, #0
 800578c:	1cb1      	adds	r1, r6, #2
 800578e:	e7d5      	b.n	800573c <__gethex+0xe8>
 8005790:	f04f 0901 	mov.w	r9, #1
 8005794:	e7fa      	b.n	800578c <__gethex+0x138>
 8005796:	230a      	movs	r3, #10
 8005798:	fb03 0202 	mla	r2, r3, r2, r0
 800579c:	3a10      	subs	r2, #16
 800579e:	e7d6      	b.n	800574e <__gethex+0xfa>
 80057a0:	4631      	mov	r1, r6
 80057a2:	e7e1      	b.n	8005768 <__gethex+0x114>
 80057a4:	4621      	mov	r1, r4
 80057a6:	1bf3      	subs	r3, r6, r7
 80057a8:	3b01      	subs	r3, #1
 80057aa:	2b07      	cmp	r3, #7
 80057ac:	dc0a      	bgt.n	80057c4 <__gethex+0x170>
 80057ae:	9802      	ldr	r0, [sp, #8]
 80057b0:	f000 fa88 	bl	8005cc4 <_Balloc>
 80057b4:	4604      	mov	r4, r0
 80057b6:	b940      	cbnz	r0, 80057ca <__gethex+0x176>
 80057b8:	4602      	mov	r2, r0
 80057ba:	21de      	movs	r1, #222	; 0xde
 80057bc:	4b62      	ldr	r3, [pc, #392]	; (8005948 <__gethex+0x2f4>)
 80057be:	4863      	ldr	r0, [pc, #396]	; (800594c <__gethex+0x2f8>)
 80057c0:	f001 f97e 	bl	8006ac0 <__assert_func>
 80057c4:	3101      	adds	r1, #1
 80057c6:	105b      	asrs	r3, r3, #1
 80057c8:	e7ef      	b.n	80057aa <__gethex+0x156>
 80057ca:	f04f 0b00 	mov.w	fp, #0
 80057ce:	f100 0914 	add.w	r9, r0, #20
 80057d2:	f1ca 0301 	rsb	r3, sl, #1
 80057d6:	f8cd 9010 	str.w	r9, [sp, #16]
 80057da:	f8cd b004 	str.w	fp, [sp, #4]
 80057de:	9308      	str	r3, [sp, #32]
 80057e0:	42b7      	cmp	r7, r6
 80057e2:	d33f      	bcc.n	8005864 <__gethex+0x210>
 80057e4:	9f04      	ldr	r7, [sp, #16]
 80057e6:	9b01      	ldr	r3, [sp, #4]
 80057e8:	f847 3b04 	str.w	r3, [r7], #4
 80057ec:	eba7 0709 	sub.w	r7, r7, r9
 80057f0:	10bf      	asrs	r7, r7, #2
 80057f2:	6127      	str	r7, [r4, #16]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fb5b 	bl	8005eb0 <__hi0bits>
 80057fa:	017f      	lsls	r7, r7, #5
 80057fc:	f8d8 6000 	ldr.w	r6, [r8]
 8005800:	1a3f      	subs	r7, r7, r0
 8005802:	42b7      	cmp	r7, r6
 8005804:	dd62      	ble.n	80058cc <__gethex+0x278>
 8005806:	1bbf      	subs	r7, r7, r6
 8005808:	4639      	mov	r1, r7
 800580a:	4620      	mov	r0, r4
 800580c:	f000 fef1 	bl	80065f2 <__any_on>
 8005810:	4682      	mov	sl, r0
 8005812:	b1a8      	cbz	r0, 8005840 <__gethex+0x1ec>
 8005814:	f04f 0a01 	mov.w	sl, #1
 8005818:	1e7b      	subs	r3, r7, #1
 800581a:	1159      	asrs	r1, r3, #5
 800581c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005820:	f003 021f 	and.w	r2, r3, #31
 8005824:	fa0a f202 	lsl.w	r2, sl, r2
 8005828:	420a      	tst	r2, r1
 800582a:	d009      	beq.n	8005840 <__gethex+0x1ec>
 800582c:	4553      	cmp	r3, sl
 800582e:	dd05      	ble.n	800583c <__gethex+0x1e8>
 8005830:	4620      	mov	r0, r4
 8005832:	1eb9      	subs	r1, r7, #2
 8005834:	f000 fedd 	bl	80065f2 <__any_on>
 8005838:	2800      	cmp	r0, #0
 800583a:	d144      	bne.n	80058c6 <__gethex+0x272>
 800583c:	f04f 0a02 	mov.w	sl, #2
 8005840:	4639      	mov	r1, r7
 8005842:	4620      	mov	r0, r4
 8005844:	f7ff fe9e 	bl	8005584 <rshift>
 8005848:	443d      	add	r5, r7
 800584a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800584e:	42ab      	cmp	r3, r5
 8005850:	da4a      	bge.n	80058e8 <__gethex+0x294>
 8005852:	4621      	mov	r1, r4
 8005854:	9802      	ldr	r0, [sp, #8]
 8005856:	f000 fa75 	bl	8005d44 <_Bfree>
 800585a:	2300      	movs	r3, #0
 800585c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800585e:	27a3      	movs	r7, #163	; 0xa3
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	e789      	b.n	8005778 <__gethex+0x124>
 8005864:	1e73      	subs	r3, r6, #1
 8005866:	9a07      	ldr	r2, [sp, #28]
 8005868:	9305      	str	r3, [sp, #20]
 800586a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800586e:	4293      	cmp	r3, r2
 8005870:	d019      	beq.n	80058a6 <__gethex+0x252>
 8005872:	f1bb 0f20 	cmp.w	fp, #32
 8005876:	d107      	bne.n	8005888 <__gethex+0x234>
 8005878:	9b04      	ldr	r3, [sp, #16]
 800587a:	9a01      	ldr	r2, [sp, #4]
 800587c:	f843 2b04 	str.w	r2, [r3], #4
 8005880:	9304      	str	r3, [sp, #16]
 8005882:	2300      	movs	r3, #0
 8005884:	469b      	mov	fp, r3
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800588c:	f7ff fecd 	bl	800562a <__hexdig_fun>
 8005890:	9b01      	ldr	r3, [sp, #4]
 8005892:	f000 000f 	and.w	r0, r0, #15
 8005896:	fa00 f00b 	lsl.w	r0, r0, fp
 800589a:	4303      	orrs	r3, r0
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	f10b 0b04 	add.w	fp, fp, #4
 80058a2:	9b05      	ldr	r3, [sp, #20]
 80058a4:	e00d      	b.n	80058c2 <__gethex+0x26e>
 80058a6:	9b05      	ldr	r3, [sp, #20]
 80058a8:	9a08      	ldr	r2, [sp, #32]
 80058aa:	4413      	add	r3, r2
 80058ac:	42bb      	cmp	r3, r7
 80058ae:	d3e0      	bcc.n	8005872 <__gethex+0x21e>
 80058b0:	4618      	mov	r0, r3
 80058b2:	4652      	mov	r2, sl
 80058b4:	9903      	ldr	r1, [sp, #12]
 80058b6:	9309      	str	r3, [sp, #36]	; 0x24
 80058b8:	f001 f8e2 	bl	8006a80 <strncmp>
 80058bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058be:	2800      	cmp	r0, #0
 80058c0:	d1d7      	bne.n	8005872 <__gethex+0x21e>
 80058c2:	461e      	mov	r6, r3
 80058c4:	e78c      	b.n	80057e0 <__gethex+0x18c>
 80058c6:	f04f 0a03 	mov.w	sl, #3
 80058ca:	e7b9      	b.n	8005840 <__gethex+0x1ec>
 80058cc:	da09      	bge.n	80058e2 <__gethex+0x28e>
 80058ce:	1bf7      	subs	r7, r6, r7
 80058d0:	4621      	mov	r1, r4
 80058d2:	463a      	mov	r2, r7
 80058d4:	9802      	ldr	r0, [sp, #8]
 80058d6:	f000 fc4d 	bl	8006174 <__lshift>
 80058da:	4604      	mov	r4, r0
 80058dc:	1bed      	subs	r5, r5, r7
 80058de:	f100 0914 	add.w	r9, r0, #20
 80058e2:	f04f 0a00 	mov.w	sl, #0
 80058e6:	e7b0      	b.n	800584a <__gethex+0x1f6>
 80058e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80058ec:	42a8      	cmp	r0, r5
 80058ee:	dd71      	ble.n	80059d4 <__gethex+0x380>
 80058f0:	1b45      	subs	r5, r0, r5
 80058f2:	42ae      	cmp	r6, r5
 80058f4:	dc34      	bgt.n	8005960 <__gethex+0x30c>
 80058f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d028      	beq.n	8005950 <__gethex+0x2fc>
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d02a      	beq.n	8005958 <__gethex+0x304>
 8005902:	2b01      	cmp	r3, #1
 8005904:	d115      	bne.n	8005932 <__gethex+0x2de>
 8005906:	42ae      	cmp	r6, r5
 8005908:	d113      	bne.n	8005932 <__gethex+0x2de>
 800590a:	2e01      	cmp	r6, #1
 800590c:	d10b      	bne.n	8005926 <__gethex+0x2d2>
 800590e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005912:	9a06      	ldr	r2, [sp, #24]
 8005914:	2762      	movs	r7, #98	; 0x62
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	2301      	movs	r3, #1
 800591a:	6123      	str	r3, [r4, #16]
 800591c:	f8c9 3000 	str.w	r3, [r9]
 8005920:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005922:	601c      	str	r4, [r3, #0]
 8005924:	e728      	b.n	8005778 <__gethex+0x124>
 8005926:	4620      	mov	r0, r4
 8005928:	1e71      	subs	r1, r6, #1
 800592a:	f000 fe62 	bl	80065f2 <__any_on>
 800592e:	2800      	cmp	r0, #0
 8005930:	d1ed      	bne.n	800590e <__gethex+0x2ba>
 8005932:	4621      	mov	r1, r4
 8005934:	9802      	ldr	r0, [sp, #8]
 8005936:	f000 fa05 	bl	8005d44 <_Bfree>
 800593a:	2300      	movs	r3, #0
 800593c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800593e:	2750      	movs	r7, #80	; 0x50
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	e719      	b.n	8005778 <__gethex+0x124>
 8005944:	08007918 	.word	0x08007918
 8005948:	0800789c 	.word	0x0800789c
 800594c:	080078ad 	.word	0x080078ad
 8005950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1ed      	bne.n	8005932 <__gethex+0x2de>
 8005956:	e7da      	b.n	800590e <__gethex+0x2ba>
 8005958:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1d7      	bne.n	800590e <__gethex+0x2ba>
 800595e:	e7e8      	b.n	8005932 <__gethex+0x2de>
 8005960:	1e6f      	subs	r7, r5, #1
 8005962:	f1ba 0f00 	cmp.w	sl, #0
 8005966:	d132      	bne.n	80059ce <__gethex+0x37a>
 8005968:	b127      	cbz	r7, 8005974 <__gethex+0x320>
 800596a:	4639      	mov	r1, r7
 800596c:	4620      	mov	r0, r4
 800596e:	f000 fe40 	bl	80065f2 <__any_on>
 8005972:	4682      	mov	sl, r0
 8005974:	2101      	movs	r1, #1
 8005976:	117b      	asrs	r3, r7, #5
 8005978:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800597c:	f007 071f 	and.w	r7, r7, #31
 8005980:	fa01 f707 	lsl.w	r7, r1, r7
 8005984:	421f      	tst	r7, r3
 8005986:	f04f 0702 	mov.w	r7, #2
 800598a:	4629      	mov	r1, r5
 800598c:	4620      	mov	r0, r4
 800598e:	bf18      	it	ne
 8005990:	f04a 0a02 	orrne.w	sl, sl, #2
 8005994:	1b76      	subs	r6, r6, r5
 8005996:	f7ff fdf5 	bl	8005584 <rshift>
 800599a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800599e:	f1ba 0f00 	cmp.w	sl, #0
 80059a2:	d048      	beq.n	8005a36 <__gethex+0x3e2>
 80059a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d015      	beq.n	80059d8 <__gethex+0x384>
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d017      	beq.n	80059e0 <__gethex+0x38c>
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d109      	bne.n	80059c8 <__gethex+0x374>
 80059b4:	f01a 0f02 	tst.w	sl, #2
 80059b8:	d006      	beq.n	80059c8 <__gethex+0x374>
 80059ba:	f8d9 0000 	ldr.w	r0, [r9]
 80059be:	ea4a 0a00 	orr.w	sl, sl, r0
 80059c2:	f01a 0f01 	tst.w	sl, #1
 80059c6:	d10e      	bne.n	80059e6 <__gethex+0x392>
 80059c8:	f047 0710 	orr.w	r7, r7, #16
 80059cc:	e033      	b.n	8005a36 <__gethex+0x3e2>
 80059ce:	f04f 0a01 	mov.w	sl, #1
 80059d2:	e7cf      	b.n	8005974 <__gethex+0x320>
 80059d4:	2701      	movs	r7, #1
 80059d6:	e7e2      	b.n	800599e <__gethex+0x34a>
 80059d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059da:	f1c3 0301 	rsb	r3, r3, #1
 80059de:	9315      	str	r3, [sp, #84]	; 0x54
 80059e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <__gethex+0x374>
 80059e6:	f04f 0c00 	mov.w	ip, #0
 80059ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80059ee:	f104 0314 	add.w	r3, r4, #20
 80059f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80059f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a00:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005a04:	d01c      	beq.n	8005a40 <__gethex+0x3ec>
 8005a06:	3201      	adds	r2, #1
 8005a08:	6002      	str	r2, [r0, #0]
 8005a0a:	2f02      	cmp	r7, #2
 8005a0c:	f104 0314 	add.w	r3, r4, #20
 8005a10:	d13d      	bne.n	8005a8e <__gethex+0x43a>
 8005a12:	f8d8 2000 	ldr.w	r2, [r8]
 8005a16:	3a01      	subs	r2, #1
 8005a18:	42b2      	cmp	r2, r6
 8005a1a:	d10a      	bne.n	8005a32 <__gethex+0x3de>
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	1171      	asrs	r1, r6, #5
 8005a20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a24:	f006 061f 	and.w	r6, r6, #31
 8005a28:	fa02 f606 	lsl.w	r6, r2, r6
 8005a2c:	421e      	tst	r6, r3
 8005a2e:	bf18      	it	ne
 8005a30:	4617      	movne	r7, r2
 8005a32:	f047 0720 	orr.w	r7, r7, #32
 8005a36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a38:	601c      	str	r4, [r3, #0]
 8005a3a:	9b06      	ldr	r3, [sp, #24]
 8005a3c:	601d      	str	r5, [r3, #0]
 8005a3e:	e69b      	b.n	8005778 <__gethex+0x124>
 8005a40:	4299      	cmp	r1, r3
 8005a42:	f843 cc04 	str.w	ip, [r3, #-4]
 8005a46:	d8d8      	bhi.n	80059fa <__gethex+0x3a6>
 8005a48:	68a3      	ldr	r3, [r4, #8]
 8005a4a:	459b      	cmp	fp, r3
 8005a4c:	db17      	blt.n	8005a7e <__gethex+0x42a>
 8005a4e:	6861      	ldr	r1, [r4, #4]
 8005a50:	9802      	ldr	r0, [sp, #8]
 8005a52:	3101      	adds	r1, #1
 8005a54:	f000 f936 	bl	8005cc4 <_Balloc>
 8005a58:	4681      	mov	r9, r0
 8005a5a:	b918      	cbnz	r0, 8005a64 <__gethex+0x410>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	2184      	movs	r1, #132	; 0x84
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <__gethex+0x474>)
 8005a62:	e6ac      	b.n	80057be <__gethex+0x16a>
 8005a64:	6922      	ldr	r2, [r4, #16]
 8005a66:	f104 010c 	add.w	r1, r4, #12
 8005a6a:	3202      	adds	r2, #2
 8005a6c:	0092      	lsls	r2, r2, #2
 8005a6e:	300c      	adds	r0, #12
 8005a70:	f000 f91a 	bl	8005ca8 <memcpy>
 8005a74:	4621      	mov	r1, r4
 8005a76:	9802      	ldr	r0, [sp, #8]
 8005a78:	f000 f964 	bl	8005d44 <_Bfree>
 8005a7c:	464c      	mov	r4, r9
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	6122      	str	r2, [r4, #16]
 8005a84:	2201      	movs	r2, #1
 8005a86:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a8a:	615a      	str	r2, [r3, #20]
 8005a8c:	e7bd      	b.n	8005a0a <__gethex+0x3b6>
 8005a8e:	6922      	ldr	r2, [r4, #16]
 8005a90:	455a      	cmp	r2, fp
 8005a92:	dd0b      	ble.n	8005aac <__gethex+0x458>
 8005a94:	2101      	movs	r1, #1
 8005a96:	4620      	mov	r0, r4
 8005a98:	f7ff fd74 	bl	8005584 <rshift>
 8005a9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005aa0:	3501      	adds	r5, #1
 8005aa2:	42ab      	cmp	r3, r5
 8005aa4:	f6ff aed5 	blt.w	8005852 <__gethex+0x1fe>
 8005aa8:	2701      	movs	r7, #1
 8005aaa:	e7c2      	b.n	8005a32 <__gethex+0x3de>
 8005aac:	f016 061f 	ands.w	r6, r6, #31
 8005ab0:	d0fa      	beq.n	8005aa8 <__gethex+0x454>
 8005ab2:	449a      	add	sl, r3
 8005ab4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005ab8:	f000 f9fa 	bl	8005eb0 <__hi0bits>
 8005abc:	f1c6 0620 	rsb	r6, r6, #32
 8005ac0:	42b0      	cmp	r0, r6
 8005ac2:	dbe7      	blt.n	8005a94 <__gethex+0x440>
 8005ac4:	e7f0      	b.n	8005aa8 <__gethex+0x454>
 8005ac6:	bf00      	nop
 8005ac8:	0800789c 	.word	0x0800789c

08005acc <L_shift>:
 8005acc:	f1c2 0208 	rsb	r2, r2, #8
 8005ad0:	0092      	lsls	r2, r2, #2
 8005ad2:	b570      	push	{r4, r5, r6, lr}
 8005ad4:	f1c2 0620 	rsb	r6, r2, #32
 8005ad8:	6843      	ldr	r3, [r0, #4]
 8005ada:	6804      	ldr	r4, [r0, #0]
 8005adc:	fa03 f506 	lsl.w	r5, r3, r6
 8005ae0:	432c      	orrs	r4, r5
 8005ae2:	40d3      	lsrs	r3, r2
 8005ae4:	6004      	str	r4, [r0, #0]
 8005ae6:	f840 3f04 	str.w	r3, [r0, #4]!
 8005aea:	4288      	cmp	r0, r1
 8005aec:	d3f4      	bcc.n	8005ad8 <L_shift+0xc>
 8005aee:	bd70      	pop	{r4, r5, r6, pc}

08005af0 <__match>:
 8005af0:	b530      	push	{r4, r5, lr}
 8005af2:	6803      	ldr	r3, [r0, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005afa:	b914      	cbnz	r4, 8005b02 <__match+0x12>
 8005afc:	6003      	str	r3, [r0, #0]
 8005afe:	2001      	movs	r0, #1
 8005b00:	bd30      	pop	{r4, r5, pc}
 8005b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005b0a:	2d19      	cmp	r5, #25
 8005b0c:	bf98      	it	ls
 8005b0e:	3220      	addls	r2, #32
 8005b10:	42a2      	cmp	r2, r4
 8005b12:	d0f0      	beq.n	8005af6 <__match+0x6>
 8005b14:	2000      	movs	r0, #0
 8005b16:	e7f3      	b.n	8005b00 <__match+0x10>

08005b18 <__hexnan>:
 8005b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	2500      	movs	r5, #0
 8005b1e:	680b      	ldr	r3, [r1, #0]
 8005b20:	4682      	mov	sl, r0
 8005b22:	115e      	asrs	r6, r3, #5
 8005b24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005b28:	f013 031f 	ands.w	r3, r3, #31
 8005b2c:	bf18      	it	ne
 8005b2e:	3604      	addne	r6, #4
 8005b30:	1f37      	subs	r7, r6, #4
 8005b32:	4690      	mov	r8, r2
 8005b34:	46b9      	mov	r9, r7
 8005b36:	463c      	mov	r4, r7
 8005b38:	46ab      	mov	fp, r5
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	6801      	ldr	r1, [r0, #0]
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	f846 5c04 	str.w	r5, [r6, #-4]
 8005b44:	9502      	str	r5, [sp, #8]
 8005b46:	784a      	ldrb	r2, [r1, #1]
 8005b48:	1c4b      	adds	r3, r1, #1
 8005b4a:	9303      	str	r3, [sp, #12]
 8005b4c:	b342      	cbz	r2, 8005ba0 <__hexnan+0x88>
 8005b4e:	4610      	mov	r0, r2
 8005b50:	9105      	str	r1, [sp, #20]
 8005b52:	9204      	str	r2, [sp, #16]
 8005b54:	f7ff fd69 	bl	800562a <__hexdig_fun>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d14f      	bne.n	8005bfc <__hexnan+0xe4>
 8005b5c:	9a04      	ldr	r2, [sp, #16]
 8005b5e:	9905      	ldr	r1, [sp, #20]
 8005b60:	2a20      	cmp	r2, #32
 8005b62:	d818      	bhi.n	8005b96 <__hexnan+0x7e>
 8005b64:	9b02      	ldr	r3, [sp, #8]
 8005b66:	459b      	cmp	fp, r3
 8005b68:	dd13      	ble.n	8005b92 <__hexnan+0x7a>
 8005b6a:	454c      	cmp	r4, r9
 8005b6c:	d206      	bcs.n	8005b7c <__hexnan+0x64>
 8005b6e:	2d07      	cmp	r5, #7
 8005b70:	dc04      	bgt.n	8005b7c <__hexnan+0x64>
 8005b72:	462a      	mov	r2, r5
 8005b74:	4649      	mov	r1, r9
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7ff ffa8 	bl	8005acc <L_shift>
 8005b7c:	4544      	cmp	r4, r8
 8005b7e:	d950      	bls.n	8005c22 <__hexnan+0x10a>
 8005b80:	2300      	movs	r3, #0
 8005b82:	f1a4 0904 	sub.w	r9, r4, #4
 8005b86:	f844 3c04 	str.w	r3, [r4, #-4]
 8005b8a:	461d      	mov	r5, r3
 8005b8c:	464c      	mov	r4, r9
 8005b8e:	f8cd b008 	str.w	fp, [sp, #8]
 8005b92:	9903      	ldr	r1, [sp, #12]
 8005b94:	e7d7      	b.n	8005b46 <__hexnan+0x2e>
 8005b96:	2a29      	cmp	r2, #41	; 0x29
 8005b98:	d156      	bne.n	8005c48 <__hexnan+0x130>
 8005b9a:	3102      	adds	r1, #2
 8005b9c:	f8ca 1000 	str.w	r1, [sl]
 8005ba0:	f1bb 0f00 	cmp.w	fp, #0
 8005ba4:	d050      	beq.n	8005c48 <__hexnan+0x130>
 8005ba6:	454c      	cmp	r4, r9
 8005ba8:	d206      	bcs.n	8005bb8 <__hexnan+0xa0>
 8005baa:	2d07      	cmp	r5, #7
 8005bac:	dc04      	bgt.n	8005bb8 <__hexnan+0xa0>
 8005bae:	462a      	mov	r2, r5
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f7ff ff8a 	bl	8005acc <L_shift>
 8005bb8:	4544      	cmp	r4, r8
 8005bba:	d934      	bls.n	8005c26 <__hexnan+0x10e>
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	f1a8 0204 	sub.w	r2, r8, #4
 8005bc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8005bc6:	429f      	cmp	r7, r3
 8005bc8:	f842 1f04 	str.w	r1, [r2, #4]!
 8005bcc:	d2f9      	bcs.n	8005bc2 <__hexnan+0xaa>
 8005bce:	1b3b      	subs	r3, r7, r4
 8005bd0:	f023 0303 	bic.w	r3, r3, #3
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	3401      	adds	r4, #1
 8005bd8:	3e03      	subs	r6, #3
 8005bda:	42b4      	cmp	r4, r6
 8005bdc:	bf88      	it	hi
 8005bde:	2304      	movhi	r3, #4
 8005be0:	2200      	movs	r2, #0
 8005be2:	4443      	add	r3, r8
 8005be4:	f843 2b04 	str.w	r2, [r3], #4
 8005be8:	429f      	cmp	r7, r3
 8005bea:	d2fb      	bcs.n	8005be4 <__hexnan+0xcc>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	b91b      	cbnz	r3, 8005bf8 <__hexnan+0xe0>
 8005bf0:	4547      	cmp	r7, r8
 8005bf2:	d127      	bne.n	8005c44 <__hexnan+0x12c>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	2005      	movs	r0, #5
 8005bfa:	e026      	b.n	8005c4a <__hexnan+0x132>
 8005bfc:	3501      	adds	r5, #1
 8005bfe:	2d08      	cmp	r5, #8
 8005c00:	f10b 0b01 	add.w	fp, fp, #1
 8005c04:	dd06      	ble.n	8005c14 <__hexnan+0xfc>
 8005c06:	4544      	cmp	r4, r8
 8005c08:	d9c3      	bls.n	8005b92 <__hexnan+0x7a>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2501      	movs	r5, #1
 8005c0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c12:	3c04      	subs	r4, #4
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	f000 000f 	and.w	r0, r0, #15
 8005c1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005c1e:	6022      	str	r2, [r4, #0]
 8005c20:	e7b7      	b.n	8005b92 <__hexnan+0x7a>
 8005c22:	2508      	movs	r5, #8
 8005c24:	e7b5      	b.n	8005b92 <__hexnan+0x7a>
 8005c26:	9b01      	ldr	r3, [sp, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0df      	beq.n	8005bec <__hexnan+0xd4>
 8005c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c30:	f1c3 0320 	rsb	r3, r3, #32
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
 8005c38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005c3c:	401a      	ands	r2, r3
 8005c3e:	f846 2c04 	str.w	r2, [r6, #-4]
 8005c42:	e7d3      	b.n	8005bec <__hexnan+0xd4>
 8005c44:	3f04      	subs	r7, #4
 8005c46:	e7d1      	b.n	8005bec <__hexnan+0xd4>
 8005c48:	2004      	movs	r0, #4
 8005c4a:	b007      	add	sp, #28
 8005c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c50 <_localeconv_r>:
 8005c50:	4800      	ldr	r0, [pc, #0]	; (8005c54 <_localeconv_r+0x4>)
 8005c52:	4770      	bx	lr
 8005c54:	20000164 	.word	0x20000164

08005c58 <malloc>:
 8005c58:	4b02      	ldr	r3, [pc, #8]	; (8005c64 <malloc+0xc>)
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	f000 bd43 	b.w	80066e8 <_malloc_r>
 8005c62:	bf00      	nop
 8005c64:	2000000c 	.word	0x2000000c

08005c68 <__ascii_mbtowc>:
 8005c68:	b082      	sub	sp, #8
 8005c6a:	b901      	cbnz	r1, 8005c6e <__ascii_mbtowc+0x6>
 8005c6c:	a901      	add	r1, sp, #4
 8005c6e:	b142      	cbz	r2, 8005c82 <__ascii_mbtowc+0x1a>
 8005c70:	b14b      	cbz	r3, 8005c86 <__ascii_mbtowc+0x1e>
 8005c72:	7813      	ldrb	r3, [r2, #0]
 8005c74:	600b      	str	r3, [r1, #0]
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	1e10      	subs	r0, r2, #0
 8005c7a:	bf18      	it	ne
 8005c7c:	2001      	movne	r0, #1
 8005c7e:	b002      	add	sp, #8
 8005c80:	4770      	bx	lr
 8005c82:	4610      	mov	r0, r2
 8005c84:	e7fb      	b.n	8005c7e <__ascii_mbtowc+0x16>
 8005c86:	f06f 0001 	mvn.w	r0, #1
 8005c8a:	e7f8      	b.n	8005c7e <__ascii_mbtowc+0x16>

08005c8c <memchr>:
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	b510      	push	{r4, lr}
 8005c90:	b2c9      	uxtb	r1, r1
 8005c92:	4402      	add	r2, r0
 8005c94:	4293      	cmp	r3, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	d101      	bne.n	8005c9e <memchr+0x12>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	e003      	b.n	8005ca6 <memchr+0x1a>
 8005c9e:	7804      	ldrb	r4, [r0, #0]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	428c      	cmp	r4, r1
 8005ca4:	d1f6      	bne.n	8005c94 <memchr+0x8>
 8005ca6:	bd10      	pop	{r4, pc}

08005ca8 <memcpy>:
 8005ca8:	440a      	add	r2, r1
 8005caa:	4291      	cmp	r1, r2
 8005cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cb0:	d100      	bne.n	8005cb4 <memcpy+0xc>
 8005cb2:	4770      	bx	lr
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cba:	4291      	cmp	r1, r2
 8005cbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cc0:	d1f9      	bne.n	8005cb6 <memcpy+0xe>
 8005cc2:	bd10      	pop	{r4, pc}

08005cc4 <_Balloc>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cc8:	4604      	mov	r4, r0
 8005cca:	460d      	mov	r5, r1
 8005ccc:	b976      	cbnz	r6, 8005cec <_Balloc+0x28>
 8005cce:	2010      	movs	r0, #16
 8005cd0:	f7ff ffc2 	bl	8005c58 <malloc>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6260      	str	r0, [r4, #36]	; 0x24
 8005cd8:	b920      	cbnz	r0, 8005ce4 <_Balloc+0x20>
 8005cda:	2166      	movs	r1, #102	; 0x66
 8005cdc:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <_Balloc+0x78>)
 8005cde:	4818      	ldr	r0, [pc, #96]	; (8005d40 <_Balloc+0x7c>)
 8005ce0:	f000 feee 	bl	8006ac0 <__assert_func>
 8005ce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ce8:	6006      	str	r6, [r0, #0]
 8005cea:	60c6      	str	r6, [r0, #12]
 8005cec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cee:	68f3      	ldr	r3, [r6, #12]
 8005cf0:	b183      	cbz	r3, 8005d14 <_Balloc+0x50>
 8005cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cfa:	b9b8      	cbnz	r0, 8005d2c <_Balloc+0x68>
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f605 	lsl.w	r6, r1, r5
 8005d02:	1d72      	adds	r2, r6, #5
 8005d04:	4620      	mov	r0, r4
 8005d06:	0092      	lsls	r2, r2, #2
 8005d08:	f000 fc94 	bl	8006634 <_calloc_r>
 8005d0c:	b160      	cbz	r0, 8005d28 <_Balloc+0x64>
 8005d0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d12:	e00e      	b.n	8005d32 <_Balloc+0x6e>
 8005d14:	2221      	movs	r2, #33	; 0x21
 8005d16:	2104      	movs	r1, #4
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fc8b 	bl	8006634 <_calloc_r>
 8005d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d20:	60f0      	str	r0, [r6, #12]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e4      	bne.n	8005cf2 <_Balloc+0x2e>
 8005d28:	2000      	movs	r0, #0
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	6802      	ldr	r2, [r0, #0]
 8005d2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d32:	2300      	movs	r3, #0
 8005d34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d38:	e7f7      	b.n	8005d2a <_Balloc+0x66>
 8005d3a:	bf00      	nop
 8005d3c:	08007826 	.word	0x08007826
 8005d40:	0800792c 	.word	0x0800792c

08005d44 <_Bfree>:
 8005d44:	b570      	push	{r4, r5, r6, lr}
 8005d46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d48:	4605      	mov	r5, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	b976      	cbnz	r6, 8005d6c <_Bfree+0x28>
 8005d4e:	2010      	movs	r0, #16
 8005d50:	f7ff ff82 	bl	8005c58 <malloc>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6268      	str	r0, [r5, #36]	; 0x24
 8005d58:	b920      	cbnz	r0, 8005d64 <_Bfree+0x20>
 8005d5a:	218a      	movs	r1, #138	; 0x8a
 8005d5c:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <_Bfree+0x3c>)
 8005d5e:	4809      	ldr	r0, [pc, #36]	; (8005d84 <_Bfree+0x40>)
 8005d60:	f000 feae 	bl	8006ac0 <__assert_func>
 8005d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d68:	6006      	str	r6, [r0, #0]
 8005d6a:	60c6      	str	r6, [r0, #12]
 8005d6c:	b13c      	cbz	r4, 8005d7e <_Bfree+0x3a>
 8005d6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d70:	6862      	ldr	r2, [r4, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d78:	6021      	str	r1, [r4, #0]
 8005d7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}
 8005d80:	08007826 	.word	0x08007826
 8005d84:	0800792c 	.word	0x0800792c

08005d88 <__multadd>:
 8005d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8c:	4698      	mov	r8, r3
 8005d8e:	460c      	mov	r4, r1
 8005d90:	2300      	movs	r3, #0
 8005d92:	690e      	ldr	r6, [r1, #16]
 8005d94:	4607      	mov	r7, r0
 8005d96:	f101 0014 	add.w	r0, r1, #20
 8005d9a:	6805      	ldr	r5, [r0, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	b2a9      	uxth	r1, r5
 8005da0:	fb02 8101 	mla	r1, r2, r1, r8
 8005da4:	0c2d      	lsrs	r5, r5, #16
 8005da6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005daa:	fb02 c505 	mla	r5, r2, r5, ip
 8005dae:	b289      	uxth	r1, r1
 8005db0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005db4:	429e      	cmp	r6, r3
 8005db6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005dba:	f840 1b04 	str.w	r1, [r0], #4
 8005dbe:	dcec      	bgt.n	8005d9a <__multadd+0x12>
 8005dc0:	f1b8 0f00 	cmp.w	r8, #0
 8005dc4:	d022      	beq.n	8005e0c <__multadd+0x84>
 8005dc6:	68a3      	ldr	r3, [r4, #8]
 8005dc8:	42b3      	cmp	r3, r6
 8005dca:	dc19      	bgt.n	8005e00 <__multadd+0x78>
 8005dcc:	6861      	ldr	r1, [r4, #4]
 8005dce:	4638      	mov	r0, r7
 8005dd0:	3101      	adds	r1, #1
 8005dd2:	f7ff ff77 	bl	8005cc4 <_Balloc>
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	b928      	cbnz	r0, 8005de6 <__multadd+0x5e>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	21b5      	movs	r1, #181	; 0xb5
 8005dde:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <__multadd+0x8c>)
 8005de0:	480d      	ldr	r0, [pc, #52]	; (8005e18 <__multadd+0x90>)
 8005de2:	f000 fe6d 	bl	8006ac0 <__assert_func>
 8005de6:	6922      	ldr	r2, [r4, #16]
 8005de8:	f104 010c 	add.w	r1, r4, #12
 8005dec:	3202      	adds	r2, #2
 8005dee:	0092      	lsls	r2, r2, #2
 8005df0:	300c      	adds	r0, #12
 8005df2:	f7ff ff59 	bl	8005ca8 <memcpy>
 8005df6:	4621      	mov	r1, r4
 8005df8:	4638      	mov	r0, r7
 8005dfa:	f7ff ffa3 	bl	8005d44 <_Bfree>
 8005dfe:	462c      	mov	r4, r5
 8005e00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005e04:	3601      	adds	r6, #1
 8005e06:	f8c3 8014 	str.w	r8, [r3, #20]
 8005e0a:	6126      	str	r6, [r4, #16]
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e12:	bf00      	nop
 8005e14:	0800789c 	.word	0x0800789c
 8005e18:	0800792c 	.word	0x0800792c

08005e1c <__s2b>:
 8005e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e20:	4615      	mov	r5, r2
 8005e22:	2209      	movs	r2, #9
 8005e24:	461f      	mov	r7, r3
 8005e26:	3308      	adds	r3, #8
 8005e28:	460c      	mov	r4, r1
 8005e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e2e:	4606      	mov	r6, r0
 8005e30:	2201      	movs	r2, #1
 8005e32:	2100      	movs	r1, #0
 8005e34:	429a      	cmp	r2, r3
 8005e36:	db09      	blt.n	8005e4c <__s2b+0x30>
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff ff43 	bl	8005cc4 <_Balloc>
 8005e3e:	b940      	cbnz	r0, 8005e52 <__s2b+0x36>
 8005e40:	4602      	mov	r2, r0
 8005e42:	21ce      	movs	r1, #206	; 0xce
 8005e44:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <__s2b+0x8c>)
 8005e46:	4819      	ldr	r0, [pc, #100]	; (8005eac <__s2b+0x90>)
 8005e48:	f000 fe3a 	bl	8006ac0 <__assert_func>
 8005e4c:	0052      	lsls	r2, r2, #1
 8005e4e:	3101      	adds	r1, #1
 8005e50:	e7f0      	b.n	8005e34 <__s2b+0x18>
 8005e52:	9b08      	ldr	r3, [sp, #32]
 8005e54:	2d09      	cmp	r5, #9
 8005e56:	6143      	str	r3, [r0, #20]
 8005e58:	f04f 0301 	mov.w	r3, #1
 8005e5c:	6103      	str	r3, [r0, #16]
 8005e5e:	dd16      	ble.n	8005e8e <__s2b+0x72>
 8005e60:	f104 0909 	add.w	r9, r4, #9
 8005e64:	46c8      	mov	r8, r9
 8005e66:	442c      	add	r4, r5
 8005e68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e6c:	4601      	mov	r1, r0
 8005e6e:	220a      	movs	r2, #10
 8005e70:	4630      	mov	r0, r6
 8005e72:	3b30      	subs	r3, #48	; 0x30
 8005e74:	f7ff ff88 	bl	8005d88 <__multadd>
 8005e78:	45a0      	cmp	r8, r4
 8005e7a:	d1f5      	bne.n	8005e68 <__s2b+0x4c>
 8005e7c:	f1a5 0408 	sub.w	r4, r5, #8
 8005e80:	444c      	add	r4, r9
 8005e82:	1b2d      	subs	r5, r5, r4
 8005e84:	1963      	adds	r3, r4, r5
 8005e86:	42bb      	cmp	r3, r7
 8005e88:	db04      	blt.n	8005e94 <__s2b+0x78>
 8005e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e8e:	2509      	movs	r5, #9
 8005e90:	340a      	adds	r4, #10
 8005e92:	e7f6      	b.n	8005e82 <__s2b+0x66>
 8005e94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e98:	4601      	mov	r1, r0
 8005e9a:	220a      	movs	r2, #10
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	3b30      	subs	r3, #48	; 0x30
 8005ea0:	f7ff ff72 	bl	8005d88 <__multadd>
 8005ea4:	e7ee      	b.n	8005e84 <__s2b+0x68>
 8005ea6:	bf00      	nop
 8005ea8:	0800789c 	.word	0x0800789c
 8005eac:	0800792c 	.word	0x0800792c

08005eb0 <__hi0bits>:
 8005eb0:	0c02      	lsrs	r2, r0, #16
 8005eb2:	0412      	lsls	r2, r2, #16
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	b9ca      	cbnz	r2, 8005eec <__hi0bits+0x3c>
 8005eb8:	0403      	lsls	r3, r0, #16
 8005eba:	2010      	movs	r0, #16
 8005ebc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ec0:	bf04      	itt	eq
 8005ec2:	021b      	lsleq	r3, r3, #8
 8005ec4:	3008      	addeq	r0, #8
 8005ec6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005eca:	bf04      	itt	eq
 8005ecc:	011b      	lsleq	r3, r3, #4
 8005ece:	3004      	addeq	r0, #4
 8005ed0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ed4:	bf04      	itt	eq
 8005ed6:	009b      	lsleq	r3, r3, #2
 8005ed8:	3002      	addeq	r0, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	db05      	blt.n	8005eea <__hi0bits+0x3a>
 8005ede:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ee2:	f100 0001 	add.w	r0, r0, #1
 8005ee6:	bf08      	it	eq
 8005ee8:	2020      	moveq	r0, #32
 8005eea:	4770      	bx	lr
 8005eec:	2000      	movs	r0, #0
 8005eee:	e7e5      	b.n	8005ebc <__hi0bits+0xc>

08005ef0 <__lo0bits>:
 8005ef0:	6803      	ldr	r3, [r0, #0]
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f013 0007 	ands.w	r0, r3, #7
 8005ef8:	d00b      	beq.n	8005f12 <__lo0bits+0x22>
 8005efa:	07d9      	lsls	r1, r3, #31
 8005efc:	d422      	bmi.n	8005f44 <__lo0bits+0x54>
 8005efe:	0798      	lsls	r0, r3, #30
 8005f00:	bf49      	itett	mi
 8005f02:	085b      	lsrmi	r3, r3, #1
 8005f04:	089b      	lsrpl	r3, r3, #2
 8005f06:	2001      	movmi	r0, #1
 8005f08:	6013      	strmi	r3, [r2, #0]
 8005f0a:	bf5c      	itt	pl
 8005f0c:	2002      	movpl	r0, #2
 8005f0e:	6013      	strpl	r3, [r2, #0]
 8005f10:	4770      	bx	lr
 8005f12:	b299      	uxth	r1, r3
 8005f14:	b909      	cbnz	r1, 8005f1a <__lo0bits+0x2a>
 8005f16:	2010      	movs	r0, #16
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f1e:	bf04      	itt	eq
 8005f20:	0a1b      	lsreq	r3, r3, #8
 8005f22:	3008      	addeq	r0, #8
 8005f24:	0719      	lsls	r1, r3, #28
 8005f26:	bf04      	itt	eq
 8005f28:	091b      	lsreq	r3, r3, #4
 8005f2a:	3004      	addeq	r0, #4
 8005f2c:	0799      	lsls	r1, r3, #30
 8005f2e:	bf04      	itt	eq
 8005f30:	089b      	lsreq	r3, r3, #2
 8005f32:	3002      	addeq	r0, #2
 8005f34:	07d9      	lsls	r1, r3, #31
 8005f36:	d403      	bmi.n	8005f40 <__lo0bits+0x50>
 8005f38:	085b      	lsrs	r3, r3, #1
 8005f3a:	f100 0001 	add.w	r0, r0, #1
 8005f3e:	d003      	beq.n	8005f48 <__lo0bits+0x58>
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	4770      	bx	lr
 8005f44:	2000      	movs	r0, #0
 8005f46:	4770      	bx	lr
 8005f48:	2020      	movs	r0, #32
 8005f4a:	4770      	bx	lr

08005f4c <__i2b>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	460c      	mov	r4, r1
 8005f50:	2101      	movs	r1, #1
 8005f52:	f7ff feb7 	bl	8005cc4 <_Balloc>
 8005f56:	4602      	mov	r2, r0
 8005f58:	b928      	cbnz	r0, 8005f66 <__i2b+0x1a>
 8005f5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <__i2b+0x24>)
 8005f60:	4804      	ldr	r0, [pc, #16]	; (8005f74 <__i2b+0x28>)
 8005f62:	f000 fdad 	bl	8006ac0 <__assert_func>
 8005f66:	2301      	movs	r3, #1
 8005f68:	6144      	str	r4, [r0, #20]
 8005f6a:	6103      	str	r3, [r0, #16]
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	bf00      	nop
 8005f70:	0800789c 	.word	0x0800789c
 8005f74:	0800792c 	.word	0x0800792c

08005f78 <__multiply>:
 8005f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	4614      	mov	r4, r2
 8005f7e:	690a      	ldr	r2, [r1, #16]
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	460d      	mov	r5, r1
 8005f84:	429a      	cmp	r2, r3
 8005f86:	bfbe      	ittt	lt
 8005f88:	460b      	movlt	r3, r1
 8005f8a:	4625      	movlt	r5, r4
 8005f8c:	461c      	movlt	r4, r3
 8005f8e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005f92:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f96:	68ab      	ldr	r3, [r5, #8]
 8005f98:	6869      	ldr	r1, [r5, #4]
 8005f9a:	eb0a 0709 	add.w	r7, sl, r9
 8005f9e:	42bb      	cmp	r3, r7
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	bfb8      	it	lt
 8005fa4:	3101      	addlt	r1, #1
 8005fa6:	f7ff fe8d 	bl	8005cc4 <_Balloc>
 8005faa:	b930      	cbnz	r0, 8005fba <__multiply+0x42>
 8005fac:	4602      	mov	r2, r0
 8005fae:	f240 115d 	movw	r1, #349	; 0x15d
 8005fb2:	4b41      	ldr	r3, [pc, #260]	; (80060b8 <__multiply+0x140>)
 8005fb4:	4841      	ldr	r0, [pc, #260]	; (80060bc <__multiply+0x144>)
 8005fb6:	f000 fd83 	bl	8006ac0 <__assert_func>
 8005fba:	f100 0614 	add.w	r6, r0, #20
 8005fbe:	4633      	mov	r3, r6
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005fc6:	4543      	cmp	r3, r8
 8005fc8:	d31e      	bcc.n	8006008 <__multiply+0x90>
 8005fca:	f105 0c14 	add.w	ip, r5, #20
 8005fce:	f104 0314 	add.w	r3, r4, #20
 8005fd2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005fd6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005fda:	9202      	str	r2, [sp, #8]
 8005fdc:	ebac 0205 	sub.w	r2, ip, r5
 8005fe0:	3a15      	subs	r2, #21
 8005fe2:	f022 0203 	bic.w	r2, r2, #3
 8005fe6:	3204      	adds	r2, #4
 8005fe8:	f105 0115 	add.w	r1, r5, #21
 8005fec:	458c      	cmp	ip, r1
 8005fee:	bf38      	it	cc
 8005ff0:	2204      	movcc	r2, #4
 8005ff2:	9201      	str	r2, [sp, #4]
 8005ff4:	9a02      	ldr	r2, [sp, #8]
 8005ff6:	9303      	str	r3, [sp, #12]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d808      	bhi.n	800600e <__multiply+0x96>
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	dc55      	bgt.n	80060ac <__multiply+0x134>
 8006000:	6107      	str	r7, [r0, #16]
 8006002:	b005      	add	sp, #20
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	f843 2b04 	str.w	r2, [r3], #4
 800600c:	e7db      	b.n	8005fc6 <__multiply+0x4e>
 800600e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006012:	f1ba 0f00 	cmp.w	sl, #0
 8006016:	d020      	beq.n	800605a <__multiply+0xe2>
 8006018:	46b1      	mov	r9, r6
 800601a:	2200      	movs	r2, #0
 800601c:	f105 0e14 	add.w	lr, r5, #20
 8006020:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006024:	f8d9 b000 	ldr.w	fp, [r9]
 8006028:	b2a1      	uxth	r1, r4
 800602a:	fa1f fb8b 	uxth.w	fp, fp
 800602e:	fb0a b101 	mla	r1, sl, r1, fp
 8006032:	4411      	add	r1, r2
 8006034:	f8d9 2000 	ldr.w	r2, [r9]
 8006038:	0c24      	lsrs	r4, r4, #16
 800603a:	0c12      	lsrs	r2, r2, #16
 800603c:	fb0a 2404 	mla	r4, sl, r4, r2
 8006040:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006044:	b289      	uxth	r1, r1
 8006046:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800604a:	45f4      	cmp	ip, lr
 800604c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006050:	f849 1b04 	str.w	r1, [r9], #4
 8006054:	d8e4      	bhi.n	8006020 <__multiply+0xa8>
 8006056:	9901      	ldr	r1, [sp, #4]
 8006058:	5072      	str	r2, [r6, r1]
 800605a:	9a03      	ldr	r2, [sp, #12]
 800605c:	3304      	adds	r3, #4
 800605e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006062:	f1b9 0f00 	cmp.w	r9, #0
 8006066:	d01f      	beq.n	80060a8 <__multiply+0x130>
 8006068:	46b6      	mov	lr, r6
 800606a:	f04f 0a00 	mov.w	sl, #0
 800606e:	6834      	ldr	r4, [r6, #0]
 8006070:	f105 0114 	add.w	r1, r5, #20
 8006074:	880a      	ldrh	r2, [r1, #0]
 8006076:	f8be b002 	ldrh.w	fp, [lr, #2]
 800607a:	b2a4      	uxth	r4, r4
 800607c:	fb09 b202 	mla	r2, r9, r2, fp
 8006080:	4492      	add	sl, r2
 8006082:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006086:	f84e 4b04 	str.w	r4, [lr], #4
 800608a:	f851 4b04 	ldr.w	r4, [r1], #4
 800608e:	f8be 2000 	ldrh.w	r2, [lr]
 8006092:	0c24      	lsrs	r4, r4, #16
 8006094:	fb09 2404 	mla	r4, r9, r4, r2
 8006098:	458c      	cmp	ip, r1
 800609a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800609e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80060a2:	d8e7      	bhi.n	8006074 <__multiply+0xfc>
 80060a4:	9a01      	ldr	r2, [sp, #4]
 80060a6:	50b4      	str	r4, [r6, r2]
 80060a8:	3604      	adds	r6, #4
 80060aa:	e7a3      	b.n	8005ff4 <__multiply+0x7c>
 80060ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1a5      	bne.n	8006000 <__multiply+0x88>
 80060b4:	3f01      	subs	r7, #1
 80060b6:	e7a1      	b.n	8005ffc <__multiply+0x84>
 80060b8:	0800789c 	.word	0x0800789c
 80060bc:	0800792c 	.word	0x0800792c

080060c0 <__pow5mult>:
 80060c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c4:	4615      	mov	r5, r2
 80060c6:	f012 0203 	ands.w	r2, r2, #3
 80060ca:	4606      	mov	r6, r0
 80060cc:	460f      	mov	r7, r1
 80060ce:	d007      	beq.n	80060e0 <__pow5mult+0x20>
 80060d0:	4c25      	ldr	r4, [pc, #148]	; (8006168 <__pow5mult+0xa8>)
 80060d2:	3a01      	subs	r2, #1
 80060d4:	2300      	movs	r3, #0
 80060d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060da:	f7ff fe55 	bl	8005d88 <__multadd>
 80060de:	4607      	mov	r7, r0
 80060e0:	10ad      	asrs	r5, r5, #2
 80060e2:	d03d      	beq.n	8006160 <__pow5mult+0xa0>
 80060e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060e6:	b97c      	cbnz	r4, 8006108 <__pow5mult+0x48>
 80060e8:	2010      	movs	r0, #16
 80060ea:	f7ff fdb5 	bl	8005c58 <malloc>
 80060ee:	4602      	mov	r2, r0
 80060f0:	6270      	str	r0, [r6, #36]	; 0x24
 80060f2:	b928      	cbnz	r0, 8006100 <__pow5mult+0x40>
 80060f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80060f8:	4b1c      	ldr	r3, [pc, #112]	; (800616c <__pow5mult+0xac>)
 80060fa:	481d      	ldr	r0, [pc, #116]	; (8006170 <__pow5mult+0xb0>)
 80060fc:	f000 fce0 	bl	8006ac0 <__assert_func>
 8006100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006104:	6004      	str	r4, [r0, #0]
 8006106:	60c4      	str	r4, [r0, #12]
 8006108:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800610c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006110:	b94c      	cbnz	r4, 8006126 <__pow5mult+0x66>
 8006112:	f240 2171 	movw	r1, #625	; 0x271
 8006116:	4630      	mov	r0, r6
 8006118:	f7ff ff18 	bl	8005f4c <__i2b>
 800611c:	2300      	movs	r3, #0
 800611e:	4604      	mov	r4, r0
 8006120:	f8c8 0008 	str.w	r0, [r8, #8]
 8006124:	6003      	str	r3, [r0, #0]
 8006126:	f04f 0900 	mov.w	r9, #0
 800612a:	07eb      	lsls	r3, r5, #31
 800612c:	d50a      	bpl.n	8006144 <__pow5mult+0x84>
 800612e:	4639      	mov	r1, r7
 8006130:	4622      	mov	r2, r4
 8006132:	4630      	mov	r0, r6
 8006134:	f7ff ff20 	bl	8005f78 <__multiply>
 8006138:	4680      	mov	r8, r0
 800613a:	4639      	mov	r1, r7
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff fe01 	bl	8005d44 <_Bfree>
 8006142:	4647      	mov	r7, r8
 8006144:	106d      	asrs	r5, r5, #1
 8006146:	d00b      	beq.n	8006160 <__pow5mult+0xa0>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	b938      	cbnz	r0, 800615c <__pow5mult+0x9c>
 800614c:	4622      	mov	r2, r4
 800614e:	4621      	mov	r1, r4
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff ff11 	bl	8005f78 <__multiply>
 8006156:	6020      	str	r0, [r4, #0]
 8006158:	f8c0 9000 	str.w	r9, [r0]
 800615c:	4604      	mov	r4, r0
 800615e:	e7e4      	b.n	800612a <__pow5mult+0x6a>
 8006160:	4638      	mov	r0, r7
 8006162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006166:	bf00      	nop
 8006168:	08007a80 	.word	0x08007a80
 800616c:	08007826 	.word	0x08007826
 8006170:	0800792c 	.word	0x0800792c

08006174 <__lshift>:
 8006174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	460c      	mov	r4, r1
 800617a:	4607      	mov	r7, r0
 800617c:	4691      	mov	r9, r2
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	6849      	ldr	r1, [r1, #4]
 8006182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006186:	68a3      	ldr	r3, [r4, #8]
 8006188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800618c:	f108 0601 	add.w	r6, r8, #1
 8006190:	42b3      	cmp	r3, r6
 8006192:	db0b      	blt.n	80061ac <__lshift+0x38>
 8006194:	4638      	mov	r0, r7
 8006196:	f7ff fd95 	bl	8005cc4 <_Balloc>
 800619a:	4605      	mov	r5, r0
 800619c:	b948      	cbnz	r0, 80061b2 <__lshift+0x3e>
 800619e:	4602      	mov	r2, r0
 80061a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80061a4:	4b27      	ldr	r3, [pc, #156]	; (8006244 <__lshift+0xd0>)
 80061a6:	4828      	ldr	r0, [pc, #160]	; (8006248 <__lshift+0xd4>)
 80061a8:	f000 fc8a 	bl	8006ac0 <__assert_func>
 80061ac:	3101      	adds	r1, #1
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	e7ee      	b.n	8006190 <__lshift+0x1c>
 80061b2:	2300      	movs	r3, #0
 80061b4:	f100 0114 	add.w	r1, r0, #20
 80061b8:	f100 0210 	add.w	r2, r0, #16
 80061bc:	4618      	mov	r0, r3
 80061be:	4553      	cmp	r3, sl
 80061c0:	db33      	blt.n	800622a <__lshift+0xb6>
 80061c2:	6920      	ldr	r0, [r4, #16]
 80061c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061c8:	f104 0314 	add.w	r3, r4, #20
 80061cc:	f019 091f 	ands.w	r9, r9, #31
 80061d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061d8:	d02b      	beq.n	8006232 <__lshift+0xbe>
 80061da:	468a      	mov	sl, r1
 80061dc:	2200      	movs	r2, #0
 80061de:	f1c9 0e20 	rsb	lr, r9, #32
 80061e2:	6818      	ldr	r0, [r3, #0]
 80061e4:	fa00 f009 	lsl.w	r0, r0, r9
 80061e8:	4302      	orrs	r2, r0
 80061ea:	f84a 2b04 	str.w	r2, [sl], #4
 80061ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f2:	459c      	cmp	ip, r3
 80061f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80061f8:	d8f3      	bhi.n	80061e2 <__lshift+0x6e>
 80061fa:	ebac 0304 	sub.w	r3, ip, r4
 80061fe:	3b15      	subs	r3, #21
 8006200:	f023 0303 	bic.w	r3, r3, #3
 8006204:	3304      	adds	r3, #4
 8006206:	f104 0015 	add.w	r0, r4, #21
 800620a:	4584      	cmp	ip, r0
 800620c:	bf38      	it	cc
 800620e:	2304      	movcc	r3, #4
 8006210:	50ca      	str	r2, [r1, r3]
 8006212:	b10a      	cbz	r2, 8006218 <__lshift+0xa4>
 8006214:	f108 0602 	add.w	r6, r8, #2
 8006218:	3e01      	subs	r6, #1
 800621a:	4638      	mov	r0, r7
 800621c:	4621      	mov	r1, r4
 800621e:	612e      	str	r6, [r5, #16]
 8006220:	f7ff fd90 	bl	8005d44 <_Bfree>
 8006224:	4628      	mov	r0, r5
 8006226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622a:	f842 0f04 	str.w	r0, [r2, #4]!
 800622e:	3301      	adds	r3, #1
 8006230:	e7c5      	b.n	80061be <__lshift+0x4a>
 8006232:	3904      	subs	r1, #4
 8006234:	f853 2b04 	ldr.w	r2, [r3], #4
 8006238:	459c      	cmp	ip, r3
 800623a:	f841 2f04 	str.w	r2, [r1, #4]!
 800623e:	d8f9      	bhi.n	8006234 <__lshift+0xc0>
 8006240:	e7ea      	b.n	8006218 <__lshift+0xa4>
 8006242:	bf00      	nop
 8006244:	0800789c 	.word	0x0800789c
 8006248:	0800792c 	.word	0x0800792c

0800624c <__mcmp>:
 800624c:	4603      	mov	r3, r0
 800624e:	690a      	ldr	r2, [r1, #16]
 8006250:	6900      	ldr	r0, [r0, #16]
 8006252:	b530      	push	{r4, r5, lr}
 8006254:	1a80      	subs	r0, r0, r2
 8006256:	d10d      	bne.n	8006274 <__mcmp+0x28>
 8006258:	3314      	adds	r3, #20
 800625a:	3114      	adds	r1, #20
 800625c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800626c:	4295      	cmp	r5, r2
 800626e:	d002      	beq.n	8006276 <__mcmp+0x2a>
 8006270:	d304      	bcc.n	800627c <__mcmp+0x30>
 8006272:	2001      	movs	r0, #1
 8006274:	bd30      	pop	{r4, r5, pc}
 8006276:	42a3      	cmp	r3, r4
 8006278:	d3f4      	bcc.n	8006264 <__mcmp+0x18>
 800627a:	e7fb      	b.n	8006274 <__mcmp+0x28>
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	e7f8      	b.n	8006274 <__mcmp+0x28>
	...

08006284 <__mdiff>:
 8006284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	460c      	mov	r4, r1
 800628a:	4606      	mov	r6, r0
 800628c:	4611      	mov	r1, r2
 800628e:	4620      	mov	r0, r4
 8006290:	4692      	mov	sl, r2
 8006292:	f7ff ffdb 	bl	800624c <__mcmp>
 8006296:	1e05      	subs	r5, r0, #0
 8006298:	d111      	bne.n	80062be <__mdiff+0x3a>
 800629a:	4629      	mov	r1, r5
 800629c:	4630      	mov	r0, r6
 800629e:	f7ff fd11 	bl	8005cc4 <_Balloc>
 80062a2:	4602      	mov	r2, r0
 80062a4:	b928      	cbnz	r0, 80062b2 <__mdiff+0x2e>
 80062a6:	f240 2132 	movw	r1, #562	; 0x232
 80062aa:	4b3c      	ldr	r3, [pc, #240]	; (800639c <__mdiff+0x118>)
 80062ac:	483c      	ldr	r0, [pc, #240]	; (80063a0 <__mdiff+0x11c>)
 80062ae:	f000 fc07 	bl	8006ac0 <__assert_func>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062b8:	4610      	mov	r0, r2
 80062ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062be:	bfa4      	itt	ge
 80062c0:	4653      	movge	r3, sl
 80062c2:	46a2      	movge	sl, r4
 80062c4:	4630      	mov	r0, r6
 80062c6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80062ca:	bfa6      	itte	ge
 80062cc:	461c      	movge	r4, r3
 80062ce:	2500      	movge	r5, #0
 80062d0:	2501      	movlt	r5, #1
 80062d2:	f7ff fcf7 	bl	8005cc4 <_Balloc>
 80062d6:	4602      	mov	r2, r0
 80062d8:	b918      	cbnz	r0, 80062e2 <__mdiff+0x5e>
 80062da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80062de:	4b2f      	ldr	r3, [pc, #188]	; (800639c <__mdiff+0x118>)
 80062e0:	e7e4      	b.n	80062ac <__mdiff+0x28>
 80062e2:	f100 0814 	add.w	r8, r0, #20
 80062e6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80062ea:	60c5      	str	r5, [r0, #12]
 80062ec:	f04f 0c00 	mov.w	ip, #0
 80062f0:	f10a 0514 	add.w	r5, sl, #20
 80062f4:	f10a 0010 	add.w	r0, sl, #16
 80062f8:	46c2      	mov	sl, r8
 80062fa:	6926      	ldr	r6, [r4, #16]
 80062fc:	f104 0914 	add.w	r9, r4, #20
 8006300:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006304:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006308:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800630c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006310:	fa1f f18b 	uxth.w	r1, fp
 8006314:	4461      	add	r1, ip
 8006316:	fa1f fc83 	uxth.w	ip, r3
 800631a:	0c1b      	lsrs	r3, r3, #16
 800631c:	eba1 010c 	sub.w	r1, r1, ip
 8006320:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006324:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006328:	b289      	uxth	r1, r1
 800632a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800632e:	454e      	cmp	r6, r9
 8006330:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006334:	f84a 3b04 	str.w	r3, [sl], #4
 8006338:	d8e6      	bhi.n	8006308 <__mdiff+0x84>
 800633a:	1b33      	subs	r3, r6, r4
 800633c:	3b15      	subs	r3, #21
 800633e:	f023 0303 	bic.w	r3, r3, #3
 8006342:	3415      	adds	r4, #21
 8006344:	3304      	adds	r3, #4
 8006346:	42a6      	cmp	r6, r4
 8006348:	bf38      	it	cc
 800634a:	2304      	movcc	r3, #4
 800634c:	441d      	add	r5, r3
 800634e:	4443      	add	r3, r8
 8006350:	461e      	mov	r6, r3
 8006352:	462c      	mov	r4, r5
 8006354:	4574      	cmp	r4, lr
 8006356:	d30e      	bcc.n	8006376 <__mdiff+0xf2>
 8006358:	f10e 0103 	add.w	r1, lr, #3
 800635c:	1b49      	subs	r1, r1, r5
 800635e:	f021 0103 	bic.w	r1, r1, #3
 8006362:	3d03      	subs	r5, #3
 8006364:	45ae      	cmp	lr, r5
 8006366:	bf38      	it	cc
 8006368:	2100      	movcc	r1, #0
 800636a:	4419      	add	r1, r3
 800636c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006370:	b18b      	cbz	r3, 8006396 <__mdiff+0x112>
 8006372:	6117      	str	r7, [r2, #16]
 8006374:	e7a0      	b.n	80062b8 <__mdiff+0x34>
 8006376:	f854 8b04 	ldr.w	r8, [r4], #4
 800637a:	fa1f f188 	uxth.w	r1, r8
 800637e:	4461      	add	r1, ip
 8006380:	1408      	asrs	r0, r1, #16
 8006382:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006386:	b289      	uxth	r1, r1
 8006388:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800638c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006390:	f846 1b04 	str.w	r1, [r6], #4
 8006394:	e7de      	b.n	8006354 <__mdiff+0xd0>
 8006396:	3f01      	subs	r7, #1
 8006398:	e7e8      	b.n	800636c <__mdiff+0xe8>
 800639a:	bf00      	nop
 800639c:	0800789c 	.word	0x0800789c
 80063a0:	0800792c 	.word	0x0800792c

080063a4 <__ulp>:
 80063a4:	4b11      	ldr	r3, [pc, #68]	; (80063ec <__ulp+0x48>)
 80063a6:	400b      	ands	r3, r1
 80063a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dd02      	ble.n	80063b6 <__ulp+0x12>
 80063b0:	2000      	movs	r0, #0
 80063b2:	4619      	mov	r1, r3
 80063b4:	4770      	bx	lr
 80063b6:	425b      	negs	r3, r3
 80063b8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80063bc:	f04f 0000 	mov.w	r0, #0
 80063c0:	f04f 0100 	mov.w	r1, #0
 80063c4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80063c8:	da04      	bge.n	80063d4 <__ulp+0x30>
 80063ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80063ce:	fa43 f102 	asr.w	r1, r3, r2
 80063d2:	4770      	bx	lr
 80063d4:	f1a2 0314 	sub.w	r3, r2, #20
 80063d8:	2b1e      	cmp	r3, #30
 80063da:	bfd6      	itet	le
 80063dc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80063e0:	2301      	movgt	r3, #1
 80063e2:	fa22 f303 	lsrle.w	r3, r2, r3
 80063e6:	4618      	mov	r0, r3
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	7ff00000 	.word	0x7ff00000

080063f0 <__b2d>:
 80063f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f4:	6907      	ldr	r7, [r0, #16]
 80063f6:	f100 0914 	add.w	r9, r0, #20
 80063fa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80063fe:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006402:	f1a7 0804 	sub.w	r8, r7, #4
 8006406:	4630      	mov	r0, r6
 8006408:	f7ff fd52 	bl	8005eb0 <__hi0bits>
 800640c:	f1c0 0320 	rsb	r3, r0, #32
 8006410:	280a      	cmp	r0, #10
 8006412:	600b      	str	r3, [r1, #0]
 8006414:	491f      	ldr	r1, [pc, #124]	; (8006494 <__b2d+0xa4>)
 8006416:	dc17      	bgt.n	8006448 <__b2d+0x58>
 8006418:	45c1      	cmp	r9, r8
 800641a:	bf28      	it	cs
 800641c:	2200      	movcs	r2, #0
 800641e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006422:	fa26 f30c 	lsr.w	r3, r6, ip
 8006426:	bf38      	it	cc
 8006428:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800642c:	ea43 0501 	orr.w	r5, r3, r1
 8006430:	f100 0315 	add.w	r3, r0, #21
 8006434:	fa06 f303 	lsl.w	r3, r6, r3
 8006438:	fa22 f20c 	lsr.w	r2, r2, ip
 800643c:	ea43 0402 	orr.w	r4, r3, r2
 8006440:	4620      	mov	r0, r4
 8006442:	4629      	mov	r1, r5
 8006444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006448:	45c1      	cmp	r9, r8
 800644a:	bf2e      	itee	cs
 800644c:	2200      	movcs	r2, #0
 800644e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006452:	f1a7 0808 	subcc.w	r8, r7, #8
 8006456:	f1b0 030b 	subs.w	r3, r0, #11
 800645a:	d016      	beq.n	800648a <__b2d+0x9a>
 800645c:	f1c3 0720 	rsb	r7, r3, #32
 8006460:	fa22 f107 	lsr.w	r1, r2, r7
 8006464:	45c8      	cmp	r8, r9
 8006466:	fa06 f603 	lsl.w	r6, r6, r3
 800646a:	ea46 0601 	orr.w	r6, r6, r1
 800646e:	bf94      	ite	ls
 8006470:	2100      	movls	r1, #0
 8006472:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006476:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800647a:	fa02 f003 	lsl.w	r0, r2, r3
 800647e:	40f9      	lsrs	r1, r7
 8006480:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006484:	ea40 0401 	orr.w	r4, r0, r1
 8006488:	e7da      	b.n	8006440 <__b2d+0x50>
 800648a:	4614      	mov	r4, r2
 800648c:	ea46 0501 	orr.w	r5, r6, r1
 8006490:	e7d6      	b.n	8006440 <__b2d+0x50>
 8006492:	bf00      	nop
 8006494:	3ff00000 	.word	0x3ff00000

08006498 <__d2b>:
 8006498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800649c:	2101      	movs	r1, #1
 800649e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80064a2:	4690      	mov	r8, r2
 80064a4:	461d      	mov	r5, r3
 80064a6:	f7ff fc0d 	bl	8005cc4 <_Balloc>
 80064aa:	4604      	mov	r4, r0
 80064ac:	b930      	cbnz	r0, 80064bc <__d2b+0x24>
 80064ae:	4602      	mov	r2, r0
 80064b0:	f240 310a 	movw	r1, #778	; 0x30a
 80064b4:	4b24      	ldr	r3, [pc, #144]	; (8006548 <__d2b+0xb0>)
 80064b6:	4825      	ldr	r0, [pc, #148]	; (800654c <__d2b+0xb4>)
 80064b8:	f000 fb02 	bl	8006ac0 <__assert_func>
 80064bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80064c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80064c4:	bb2d      	cbnz	r5, 8006512 <__d2b+0x7a>
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	f1b8 0300 	subs.w	r3, r8, #0
 80064cc:	d026      	beq.n	800651c <__d2b+0x84>
 80064ce:	4668      	mov	r0, sp
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	f7ff fd0d 	bl	8005ef0 <__lo0bits>
 80064d6:	9900      	ldr	r1, [sp, #0]
 80064d8:	b1f0      	cbz	r0, 8006518 <__d2b+0x80>
 80064da:	9a01      	ldr	r2, [sp, #4]
 80064dc:	f1c0 0320 	rsb	r3, r0, #32
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	430b      	orrs	r3, r1
 80064e6:	40c2      	lsrs	r2, r0
 80064e8:	6163      	str	r3, [r4, #20]
 80064ea:	9201      	str	r2, [sp, #4]
 80064ec:	9b01      	ldr	r3, [sp, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bf14      	ite	ne
 80064f2:	2102      	movne	r1, #2
 80064f4:	2101      	moveq	r1, #1
 80064f6:	61a3      	str	r3, [r4, #24]
 80064f8:	6121      	str	r1, [r4, #16]
 80064fa:	b1c5      	cbz	r5, 800652e <__d2b+0x96>
 80064fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006500:	4405      	add	r5, r0
 8006502:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006506:	603d      	str	r5, [r7, #0]
 8006508:	6030      	str	r0, [r6, #0]
 800650a:	4620      	mov	r0, r4
 800650c:	b002      	add	sp, #8
 800650e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006516:	e7d6      	b.n	80064c6 <__d2b+0x2e>
 8006518:	6161      	str	r1, [r4, #20]
 800651a:	e7e7      	b.n	80064ec <__d2b+0x54>
 800651c:	a801      	add	r0, sp, #4
 800651e:	f7ff fce7 	bl	8005ef0 <__lo0bits>
 8006522:	2101      	movs	r1, #1
 8006524:	9b01      	ldr	r3, [sp, #4]
 8006526:	6121      	str	r1, [r4, #16]
 8006528:	6163      	str	r3, [r4, #20]
 800652a:	3020      	adds	r0, #32
 800652c:	e7e5      	b.n	80064fa <__d2b+0x62>
 800652e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006532:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006536:	6038      	str	r0, [r7, #0]
 8006538:	6918      	ldr	r0, [r3, #16]
 800653a:	f7ff fcb9 	bl	8005eb0 <__hi0bits>
 800653e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006542:	6031      	str	r1, [r6, #0]
 8006544:	e7e1      	b.n	800650a <__d2b+0x72>
 8006546:	bf00      	nop
 8006548:	0800789c 	.word	0x0800789c
 800654c:	0800792c 	.word	0x0800792c

08006550 <__ratio>:
 8006550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	4688      	mov	r8, r1
 8006556:	4669      	mov	r1, sp
 8006558:	4681      	mov	r9, r0
 800655a:	f7ff ff49 	bl	80063f0 <__b2d>
 800655e:	460f      	mov	r7, r1
 8006560:	4604      	mov	r4, r0
 8006562:	460d      	mov	r5, r1
 8006564:	4640      	mov	r0, r8
 8006566:	a901      	add	r1, sp, #4
 8006568:	f7ff ff42 	bl	80063f0 <__b2d>
 800656c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006570:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006574:	468b      	mov	fp, r1
 8006576:	eba3 0c02 	sub.w	ip, r3, r2
 800657a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006584:	2b00      	cmp	r3, #0
 8006586:	bfd5      	itete	le
 8006588:	460a      	movle	r2, r1
 800658a:	462a      	movgt	r2, r5
 800658c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006590:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006594:	bfd8      	it	le
 8006596:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800659a:	465b      	mov	r3, fp
 800659c:	4602      	mov	r2, r0
 800659e:	4639      	mov	r1, r7
 80065a0:	4620      	mov	r0, r4
 80065a2:	f7fa f977 	bl	8000894 <__aeabi_ddiv>
 80065a6:	b003      	add	sp, #12
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065ac <__copybits>:
 80065ac:	3901      	subs	r1, #1
 80065ae:	b570      	push	{r4, r5, r6, lr}
 80065b0:	1149      	asrs	r1, r1, #5
 80065b2:	6914      	ldr	r4, [r2, #16]
 80065b4:	3101      	adds	r1, #1
 80065b6:	f102 0314 	add.w	r3, r2, #20
 80065ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80065c2:	1f05      	subs	r5, r0, #4
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d30c      	bcc.n	80065e2 <__copybits+0x36>
 80065c8:	1aa3      	subs	r3, r4, r2
 80065ca:	3b11      	subs	r3, #17
 80065cc:	f023 0303 	bic.w	r3, r3, #3
 80065d0:	3211      	adds	r2, #17
 80065d2:	42a2      	cmp	r2, r4
 80065d4:	bf88      	it	hi
 80065d6:	2300      	movhi	r3, #0
 80065d8:	4418      	add	r0, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	4288      	cmp	r0, r1
 80065de:	d305      	bcc.n	80065ec <__copybits+0x40>
 80065e0:	bd70      	pop	{r4, r5, r6, pc}
 80065e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80065e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80065ea:	e7eb      	b.n	80065c4 <__copybits+0x18>
 80065ec:	f840 3b04 	str.w	r3, [r0], #4
 80065f0:	e7f4      	b.n	80065dc <__copybits+0x30>

080065f2 <__any_on>:
 80065f2:	f100 0214 	add.w	r2, r0, #20
 80065f6:	6900      	ldr	r0, [r0, #16]
 80065f8:	114b      	asrs	r3, r1, #5
 80065fa:	4298      	cmp	r0, r3
 80065fc:	b510      	push	{r4, lr}
 80065fe:	db11      	blt.n	8006624 <__any_on+0x32>
 8006600:	dd0a      	ble.n	8006618 <__any_on+0x26>
 8006602:	f011 011f 	ands.w	r1, r1, #31
 8006606:	d007      	beq.n	8006618 <__any_on+0x26>
 8006608:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800660c:	fa24 f001 	lsr.w	r0, r4, r1
 8006610:	fa00 f101 	lsl.w	r1, r0, r1
 8006614:	428c      	cmp	r4, r1
 8006616:	d10b      	bne.n	8006630 <__any_on+0x3e>
 8006618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800661c:	4293      	cmp	r3, r2
 800661e:	d803      	bhi.n	8006628 <__any_on+0x36>
 8006620:	2000      	movs	r0, #0
 8006622:	bd10      	pop	{r4, pc}
 8006624:	4603      	mov	r3, r0
 8006626:	e7f7      	b.n	8006618 <__any_on+0x26>
 8006628:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800662c:	2900      	cmp	r1, #0
 800662e:	d0f5      	beq.n	800661c <__any_on+0x2a>
 8006630:	2001      	movs	r0, #1
 8006632:	e7f6      	b.n	8006622 <__any_on+0x30>

08006634 <_calloc_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	fb02 f501 	mul.w	r5, r2, r1
 800663a:	4629      	mov	r1, r5
 800663c:	f000 f854 	bl	80066e8 <_malloc_r>
 8006640:	4604      	mov	r4, r0
 8006642:	b118      	cbz	r0, 800664c <_calloc_r+0x18>
 8006644:	462a      	mov	r2, r5
 8006646:	2100      	movs	r1, #0
 8006648:	f7fc fbde 	bl	8002e08 <memset>
 800664c:	4620      	mov	r0, r4
 800664e:	bd38      	pop	{r3, r4, r5, pc}

08006650 <_free_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4605      	mov	r5, r0
 8006654:	2900      	cmp	r1, #0
 8006656:	d043      	beq.n	80066e0 <_free_r+0x90>
 8006658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800665c:	1f0c      	subs	r4, r1, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	bfb8      	it	lt
 8006662:	18e4      	addlt	r4, r4, r3
 8006664:	f000 fa76 	bl	8006b54 <__malloc_lock>
 8006668:	4a1e      	ldr	r2, [pc, #120]	; (80066e4 <_free_r+0x94>)
 800666a:	6813      	ldr	r3, [r2, #0]
 800666c:	4610      	mov	r0, r2
 800666e:	b933      	cbnz	r3, 800667e <_free_r+0x2e>
 8006670:	6063      	str	r3, [r4, #4]
 8006672:	6014      	str	r4, [r2, #0]
 8006674:	4628      	mov	r0, r5
 8006676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800667a:	f000 ba71 	b.w	8006b60 <__malloc_unlock>
 800667e:	42a3      	cmp	r3, r4
 8006680:	d90a      	bls.n	8006698 <_free_r+0x48>
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	1862      	adds	r2, r4, r1
 8006686:	4293      	cmp	r3, r2
 8006688:	bf01      	itttt	eq
 800668a:	681a      	ldreq	r2, [r3, #0]
 800668c:	685b      	ldreq	r3, [r3, #4]
 800668e:	1852      	addeq	r2, r2, r1
 8006690:	6022      	streq	r2, [r4, #0]
 8006692:	6063      	str	r3, [r4, #4]
 8006694:	6004      	str	r4, [r0, #0]
 8006696:	e7ed      	b.n	8006674 <_free_r+0x24>
 8006698:	461a      	mov	r2, r3
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	b10b      	cbz	r3, 80066a2 <_free_r+0x52>
 800669e:	42a3      	cmp	r3, r4
 80066a0:	d9fa      	bls.n	8006698 <_free_r+0x48>
 80066a2:	6811      	ldr	r1, [r2, #0]
 80066a4:	1850      	adds	r0, r2, r1
 80066a6:	42a0      	cmp	r0, r4
 80066a8:	d10b      	bne.n	80066c2 <_free_r+0x72>
 80066aa:	6820      	ldr	r0, [r4, #0]
 80066ac:	4401      	add	r1, r0
 80066ae:	1850      	adds	r0, r2, r1
 80066b0:	4283      	cmp	r3, r0
 80066b2:	6011      	str	r1, [r2, #0]
 80066b4:	d1de      	bne.n	8006674 <_free_r+0x24>
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	4401      	add	r1, r0
 80066bc:	6011      	str	r1, [r2, #0]
 80066be:	6053      	str	r3, [r2, #4]
 80066c0:	e7d8      	b.n	8006674 <_free_r+0x24>
 80066c2:	d902      	bls.n	80066ca <_free_r+0x7a>
 80066c4:	230c      	movs	r3, #12
 80066c6:	602b      	str	r3, [r5, #0]
 80066c8:	e7d4      	b.n	8006674 <_free_r+0x24>
 80066ca:	6820      	ldr	r0, [r4, #0]
 80066cc:	1821      	adds	r1, r4, r0
 80066ce:	428b      	cmp	r3, r1
 80066d0:	bf01      	itttt	eq
 80066d2:	6819      	ldreq	r1, [r3, #0]
 80066d4:	685b      	ldreq	r3, [r3, #4]
 80066d6:	1809      	addeq	r1, r1, r0
 80066d8:	6021      	streq	r1, [r4, #0]
 80066da:	6063      	str	r3, [r4, #4]
 80066dc:	6054      	str	r4, [r2, #4]
 80066de:	e7c9      	b.n	8006674 <_free_r+0x24>
 80066e0:	bd38      	pop	{r3, r4, r5, pc}
 80066e2:	bf00      	nop
 80066e4:	20000254 	.word	0x20000254

080066e8 <_malloc_r>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	1ccd      	adds	r5, r1, #3
 80066ec:	f025 0503 	bic.w	r5, r5, #3
 80066f0:	3508      	adds	r5, #8
 80066f2:	2d0c      	cmp	r5, #12
 80066f4:	bf38      	it	cc
 80066f6:	250c      	movcc	r5, #12
 80066f8:	2d00      	cmp	r5, #0
 80066fa:	4606      	mov	r6, r0
 80066fc:	db01      	blt.n	8006702 <_malloc_r+0x1a>
 80066fe:	42a9      	cmp	r1, r5
 8006700:	d903      	bls.n	800670a <_malloc_r+0x22>
 8006702:	230c      	movs	r3, #12
 8006704:	6033      	str	r3, [r6, #0]
 8006706:	2000      	movs	r0, #0
 8006708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670a:	f000 fa23 	bl	8006b54 <__malloc_lock>
 800670e:	4921      	ldr	r1, [pc, #132]	; (8006794 <_malloc_r+0xac>)
 8006710:	680a      	ldr	r2, [r1, #0]
 8006712:	4614      	mov	r4, r2
 8006714:	b99c      	cbnz	r4, 800673e <_malloc_r+0x56>
 8006716:	4f20      	ldr	r7, [pc, #128]	; (8006798 <_malloc_r+0xb0>)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	b923      	cbnz	r3, 8006726 <_malloc_r+0x3e>
 800671c:	4621      	mov	r1, r4
 800671e:	4630      	mov	r0, r6
 8006720:	f000 f99e 	bl	8006a60 <_sbrk_r>
 8006724:	6038      	str	r0, [r7, #0]
 8006726:	4629      	mov	r1, r5
 8006728:	4630      	mov	r0, r6
 800672a:	f000 f999 	bl	8006a60 <_sbrk_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	d123      	bne.n	800677a <_malloc_r+0x92>
 8006732:	230c      	movs	r3, #12
 8006734:	4630      	mov	r0, r6
 8006736:	6033      	str	r3, [r6, #0]
 8006738:	f000 fa12 	bl	8006b60 <__malloc_unlock>
 800673c:	e7e3      	b.n	8006706 <_malloc_r+0x1e>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	1b5b      	subs	r3, r3, r5
 8006742:	d417      	bmi.n	8006774 <_malloc_r+0x8c>
 8006744:	2b0b      	cmp	r3, #11
 8006746:	d903      	bls.n	8006750 <_malloc_r+0x68>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	441c      	add	r4, r3
 800674c:	6025      	str	r5, [r4, #0]
 800674e:	e004      	b.n	800675a <_malloc_r+0x72>
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	42a2      	cmp	r2, r4
 8006754:	bf0c      	ite	eq
 8006756:	600b      	streq	r3, [r1, #0]
 8006758:	6053      	strne	r3, [r2, #4]
 800675a:	4630      	mov	r0, r6
 800675c:	f000 fa00 	bl	8006b60 <__malloc_unlock>
 8006760:	f104 000b 	add.w	r0, r4, #11
 8006764:	1d23      	adds	r3, r4, #4
 8006766:	f020 0007 	bic.w	r0, r0, #7
 800676a:	1ac2      	subs	r2, r0, r3
 800676c:	d0cc      	beq.n	8006708 <_malloc_r+0x20>
 800676e:	1a1b      	subs	r3, r3, r0
 8006770:	50a3      	str	r3, [r4, r2]
 8006772:	e7c9      	b.n	8006708 <_malloc_r+0x20>
 8006774:	4622      	mov	r2, r4
 8006776:	6864      	ldr	r4, [r4, #4]
 8006778:	e7cc      	b.n	8006714 <_malloc_r+0x2c>
 800677a:	1cc4      	adds	r4, r0, #3
 800677c:	f024 0403 	bic.w	r4, r4, #3
 8006780:	42a0      	cmp	r0, r4
 8006782:	d0e3      	beq.n	800674c <_malloc_r+0x64>
 8006784:	1a21      	subs	r1, r4, r0
 8006786:	4630      	mov	r0, r6
 8006788:	f000 f96a 	bl	8006a60 <_sbrk_r>
 800678c:	3001      	adds	r0, #1
 800678e:	d1dd      	bne.n	800674c <_malloc_r+0x64>
 8006790:	e7cf      	b.n	8006732 <_malloc_r+0x4a>
 8006792:	bf00      	nop
 8006794:	20000254 	.word	0x20000254
 8006798:	20000258 	.word	0x20000258

0800679c <__ssputs_r>:
 800679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	688e      	ldr	r6, [r1, #8]
 80067a2:	4682      	mov	sl, r0
 80067a4:	429e      	cmp	r6, r3
 80067a6:	460c      	mov	r4, r1
 80067a8:	4690      	mov	r8, r2
 80067aa:	461f      	mov	r7, r3
 80067ac:	d838      	bhi.n	8006820 <__ssputs_r+0x84>
 80067ae:	898a      	ldrh	r2, [r1, #12]
 80067b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067b4:	d032      	beq.n	800681c <__ssputs_r+0x80>
 80067b6:	6825      	ldr	r5, [r4, #0]
 80067b8:	6909      	ldr	r1, [r1, #16]
 80067ba:	3301      	adds	r3, #1
 80067bc:	eba5 0901 	sub.w	r9, r5, r1
 80067c0:	6965      	ldr	r5, [r4, #20]
 80067c2:	444b      	add	r3, r9
 80067c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067cc:	106d      	asrs	r5, r5, #1
 80067ce:	429d      	cmp	r5, r3
 80067d0:	bf38      	it	cc
 80067d2:	461d      	movcc	r5, r3
 80067d4:	0553      	lsls	r3, r2, #21
 80067d6:	d531      	bpl.n	800683c <__ssputs_r+0xa0>
 80067d8:	4629      	mov	r1, r5
 80067da:	f7ff ff85 	bl	80066e8 <_malloc_r>
 80067de:	4606      	mov	r6, r0
 80067e0:	b950      	cbnz	r0, 80067f8 <__ssputs_r+0x5c>
 80067e2:	230c      	movs	r3, #12
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
 80067e8:	f8ca 3000 	str.w	r3, [sl]
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f2:	81a3      	strh	r3, [r4, #12]
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	464a      	mov	r2, r9
 80067fa:	6921      	ldr	r1, [r4, #16]
 80067fc:	f7ff fa54 	bl	8005ca8 <memcpy>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	6126      	str	r6, [r4, #16]
 800680e:	444e      	add	r6, r9
 8006810:	6026      	str	r6, [r4, #0]
 8006812:	463e      	mov	r6, r7
 8006814:	6165      	str	r5, [r4, #20]
 8006816:	eba5 0509 	sub.w	r5, r5, r9
 800681a:	60a5      	str	r5, [r4, #8]
 800681c:	42be      	cmp	r6, r7
 800681e:	d900      	bls.n	8006822 <__ssputs_r+0x86>
 8006820:	463e      	mov	r6, r7
 8006822:	4632      	mov	r2, r6
 8006824:	4641      	mov	r1, r8
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	f000 f97a 	bl	8006b20 <memmove>
 800682c:	68a3      	ldr	r3, [r4, #8]
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	1b9b      	subs	r3, r3, r6
 8006832:	4432      	add	r2, r6
 8006834:	2000      	movs	r0, #0
 8006836:	60a3      	str	r3, [r4, #8]
 8006838:	6022      	str	r2, [r4, #0]
 800683a:	e7db      	b.n	80067f4 <__ssputs_r+0x58>
 800683c:	462a      	mov	r2, r5
 800683e:	f000 f995 	bl	8006b6c <_realloc_r>
 8006842:	4606      	mov	r6, r0
 8006844:	2800      	cmp	r0, #0
 8006846:	d1e1      	bne.n	800680c <__ssputs_r+0x70>
 8006848:	4650      	mov	r0, sl
 800684a:	6921      	ldr	r1, [r4, #16]
 800684c:	f7ff ff00 	bl	8006650 <_free_r>
 8006850:	e7c7      	b.n	80067e2 <__ssputs_r+0x46>
	...

08006854 <_svfiprintf_r>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	4698      	mov	r8, r3
 800685a:	898b      	ldrh	r3, [r1, #12]
 800685c:	4607      	mov	r7, r0
 800685e:	061b      	lsls	r3, r3, #24
 8006860:	460d      	mov	r5, r1
 8006862:	4614      	mov	r4, r2
 8006864:	b09d      	sub	sp, #116	; 0x74
 8006866:	d50e      	bpl.n	8006886 <_svfiprintf_r+0x32>
 8006868:	690b      	ldr	r3, [r1, #16]
 800686a:	b963      	cbnz	r3, 8006886 <_svfiprintf_r+0x32>
 800686c:	2140      	movs	r1, #64	; 0x40
 800686e:	f7ff ff3b 	bl	80066e8 <_malloc_r>
 8006872:	6028      	str	r0, [r5, #0]
 8006874:	6128      	str	r0, [r5, #16]
 8006876:	b920      	cbnz	r0, 8006882 <_svfiprintf_r+0x2e>
 8006878:	230c      	movs	r3, #12
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e0d1      	b.n	8006a26 <_svfiprintf_r+0x1d2>
 8006882:	2340      	movs	r3, #64	; 0x40
 8006884:	616b      	str	r3, [r5, #20]
 8006886:	2300      	movs	r3, #0
 8006888:	9309      	str	r3, [sp, #36]	; 0x24
 800688a:	2320      	movs	r3, #32
 800688c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006890:	2330      	movs	r3, #48	; 0x30
 8006892:	f04f 0901 	mov.w	r9, #1
 8006896:	f8cd 800c 	str.w	r8, [sp, #12]
 800689a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006a40 <_svfiprintf_r+0x1ec>
 800689e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068a2:	4623      	mov	r3, r4
 80068a4:	469a      	mov	sl, r3
 80068a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068aa:	b10a      	cbz	r2, 80068b0 <_svfiprintf_r+0x5c>
 80068ac:	2a25      	cmp	r2, #37	; 0x25
 80068ae:	d1f9      	bne.n	80068a4 <_svfiprintf_r+0x50>
 80068b0:	ebba 0b04 	subs.w	fp, sl, r4
 80068b4:	d00b      	beq.n	80068ce <_svfiprintf_r+0x7a>
 80068b6:	465b      	mov	r3, fp
 80068b8:	4622      	mov	r2, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff ff6d 	bl	800679c <__ssputs_r>
 80068c2:	3001      	adds	r0, #1
 80068c4:	f000 80aa 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ca:	445a      	add	r2, fp
 80068cc:	9209      	str	r2, [sp, #36]	; 0x24
 80068ce:	f89a 3000 	ldrb.w	r3, [sl]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80a2 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068d8:	2300      	movs	r3, #0
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e2:	f10a 0a01 	add.w	sl, sl, #1
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	9307      	str	r3, [sp, #28]
 80068ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ee:	931a      	str	r3, [sp, #104]	; 0x68
 80068f0:	4654      	mov	r4, sl
 80068f2:	2205      	movs	r2, #5
 80068f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f8:	4851      	ldr	r0, [pc, #324]	; (8006a40 <_svfiprintf_r+0x1ec>)
 80068fa:	f7ff f9c7 	bl	8005c8c <memchr>
 80068fe:	9a04      	ldr	r2, [sp, #16]
 8006900:	b9d8      	cbnz	r0, 800693a <_svfiprintf_r+0xe6>
 8006902:	06d0      	lsls	r0, r2, #27
 8006904:	bf44      	itt	mi
 8006906:	2320      	movmi	r3, #32
 8006908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800690c:	0711      	lsls	r1, r2, #28
 800690e:	bf44      	itt	mi
 8006910:	232b      	movmi	r3, #43	; 0x2b
 8006912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006916:	f89a 3000 	ldrb.w	r3, [sl]
 800691a:	2b2a      	cmp	r3, #42	; 0x2a
 800691c:	d015      	beq.n	800694a <_svfiprintf_r+0xf6>
 800691e:	4654      	mov	r4, sl
 8006920:	2000      	movs	r0, #0
 8006922:	f04f 0c0a 	mov.w	ip, #10
 8006926:	9a07      	ldr	r2, [sp, #28]
 8006928:	4621      	mov	r1, r4
 800692a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800692e:	3b30      	subs	r3, #48	; 0x30
 8006930:	2b09      	cmp	r3, #9
 8006932:	d94e      	bls.n	80069d2 <_svfiprintf_r+0x17e>
 8006934:	b1b0      	cbz	r0, 8006964 <_svfiprintf_r+0x110>
 8006936:	9207      	str	r2, [sp, #28]
 8006938:	e014      	b.n	8006964 <_svfiprintf_r+0x110>
 800693a:	eba0 0308 	sub.w	r3, r0, r8
 800693e:	fa09 f303 	lsl.w	r3, r9, r3
 8006942:	4313      	orrs	r3, r2
 8006944:	46a2      	mov	sl, r4
 8006946:	9304      	str	r3, [sp, #16]
 8006948:	e7d2      	b.n	80068f0 <_svfiprintf_r+0x9c>
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	1d19      	adds	r1, r3, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	9103      	str	r1, [sp, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	bfbb      	ittet	lt
 8006956:	425b      	neglt	r3, r3
 8006958:	f042 0202 	orrlt.w	r2, r2, #2
 800695c:	9307      	strge	r3, [sp, #28]
 800695e:	9307      	strlt	r3, [sp, #28]
 8006960:	bfb8      	it	lt
 8006962:	9204      	strlt	r2, [sp, #16]
 8006964:	7823      	ldrb	r3, [r4, #0]
 8006966:	2b2e      	cmp	r3, #46	; 0x2e
 8006968:	d10c      	bne.n	8006984 <_svfiprintf_r+0x130>
 800696a:	7863      	ldrb	r3, [r4, #1]
 800696c:	2b2a      	cmp	r3, #42	; 0x2a
 800696e:	d135      	bne.n	80069dc <_svfiprintf_r+0x188>
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	3402      	adds	r4, #2
 8006974:	1d1a      	adds	r2, r3, #4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	9203      	str	r2, [sp, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	bfb8      	it	lt
 800697e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a50 <_svfiprintf_r+0x1fc>
 8006988:	2203      	movs	r2, #3
 800698a:	4650      	mov	r0, sl
 800698c:	7821      	ldrb	r1, [r4, #0]
 800698e:	f7ff f97d 	bl	8005c8c <memchr>
 8006992:	b140      	cbz	r0, 80069a6 <_svfiprintf_r+0x152>
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	eba0 000a 	sub.w	r0, r0, sl
 800699a:	fa03 f000 	lsl.w	r0, r3, r0
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	3401      	adds	r4, #1
 80069a2:	4303      	orrs	r3, r0
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069aa:	2206      	movs	r2, #6
 80069ac:	4825      	ldr	r0, [pc, #148]	; (8006a44 <_svfiprintf_r+0x1f0>)
 80069ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b2:	f7ff f96b 	bl	8005c8c <memchr>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d038      	beq.n	8006a2c <_svfiprintf_r+0x1d8>
 80069ba:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <_svfiprintf_r+0x1f4>)
 80069bc:	bb1b      	cbnz	r3, 8006a06 <_svfiprintf_r+0x1b2>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	3307      	adds	r3, #7
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	3308      	adds	r3, #8
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	4433      	add	r3, r6
 80069ce:	9309      	str	r3, [sp, #36]	; 0x24
 80069d0:	e767      	b.n	80068a2 <_svfiprintf_r+0x4e>
 80069d2:	460c      	mov	r4, r1
 80069d4:	2001      	movs	r0, #1
 80069d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80069da:	e7a5      	b.n	8006928 <_svfiprintf_r+0xd4>
 80069dc:	2300      	movs	r3, #0
 80069de:	f04f 0c0a 	mov.w	ip, #10
 80069e2:	4619      	mov	r1, r3
 80069e4:	3401      	adds	r4, #1
 80069e6:	9305      	str	r3, [sp, #20]
 80069e8:	4620      	mov	r0, r4
 80069ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ee:	3a30      	subs	r2, #48	; 0x30
 80069f0:	2a09      	cmp	r2, #9
 80069f2:	d903      	bls.n	80069fc <_svfiprintf_r+0x1a8>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0c5      	beq.n	8006984 <_svfiprintf_r+0x130>
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	e7c3      	b.n	8006984 <_svfiprintf_r+0x130>
 80069fc:	4604      	mov	r4, r0
 80069fe:	2301      	movs	r3, #1
 8006a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a04:	e7f0      	b.n	80069e8 <_svfiprintf_r+0x194>
 8006a06:	ab03      	add	r3, sp, #12
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a10:	a904      	add	r1, sp, #16
 8006a12:	f7fc fa9f 	bl	8002f54 <_printf_float>
 8006a16:	1c42      	adds	r2, r0, #1
 8006a18:	4606      	mov	r6, r0
 8006a1a:	d1d6      	bne.n	80069ca <_svfiprintf_r+0x176>
 8006a1c:	89ab      	ldrh	r3, [r5, #12]
 8006a1e:	065b      	lsls	r3, r3, #25
 8006a20:	f53f af2c 	bmi.w	800687c <_svfiprintf_r+0x28>
 8006a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a26:	b01d      	add	sp, #116	; 0x74
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	ab03      	add	r3, sp, #12
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	462a      	mov	r2, r5
 8006a32:	4638      	mov	r0, r7
 8006a34:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a36:	a904      	add	r1, sp, #16
 8006a38:	f7fc fd28 	bl	800348c <_printf_i>
 8006a3c:	e7eb      	b.n	8006a16 <_svfiprintf_r+0x1c2>
 8006a3e:	bf00      	nop
 8006a40:	08007a8c 	.word	0x08007a8c
 8006a44:	08007a96 	.word	0x08007a96
 8006a48:	08002f55 	.word	0x08002f55
 8006a4c:	0800679d 	.word	0x0800679d
 8006a50:	08007a92 	.word	0x08007a92

08006a54 <nan>:
 8006a54:	2000      	movs	r0, #0
 8006a56:	4901      	ldr	r1, [pc, #4]	; (8006a5c <nan+0x8>)
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	7ff80000 	.word	0x7ff80000

08006a60 <_sbrk_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	2300      	movs	r3, #0
 8006a64:	4d05      	ldr	r5, [pc, #20]	; (8006a7c <_sbrk_r+0x1c>)
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	f7fa fdba 	bl	80015e4 <_sbrk>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_sbrk_r+0x1a>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_sbrk_r+0x1a>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	20000344 	.word	0x20000344

08006a80 <strncmp>:
 8006a80:	b510      	push	{r4, lr}
 8006a82:	b16a      	cbz	r2, 8006aa0 <strncmp+0x20>
 8006a84:	3901      	subs	r1, #1
 8006a86:	1884      	adds	r4, r0, r2
 8006a88:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006a8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d103      	bne.n	8006a9c <strncmp+0x1c>
 8006a94:	42a0      	cmp	r0, r4
 8006a96:	d001      	beq.n	8006a9c <strncmp+0x1c>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f5      	bne.n	8006a88 <strncmp+0x8>
 8006a9c:	1a98      	subs	r0, r3, r2
 8006a9e:	bd10      	pop	{r4, pc}
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	e7fc      	b.n	8006a9e <strncmp+0x1e>

08006aa4 <__ascii_wctomb>:
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	4608      	mov	r0, r1
 8006aa8:	b141      	cbz	r1, 8006abc <__ascii_wctomb+0x18>
 8006aaa:	2aff      	cmp	r2, #255	; 0xff
 8006aac:	d904      	bls.n	8006ab8 <__ascii_wctomb+0x14>
 8006aae:	228a      	movs	r2, #138	; 0x8a
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	4770      	bx	lr
 8006ab8:	2001      	movs	r0, #1
 8006aba:	700a      	strb	r2, [r1, #0]
 8006abc:	4770      	bx	lr
	...

08006ac0 <__assert_func>:
 8006ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ac2:	4614      	mov	r4, r2
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	4b09      	ldr	r3, [pc, #36]	; (8006aec <__assert_func+0x2c>)
 8006ac8:	4605      	mov	r5, r0
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68d8      	ldr	r0, [r3, #12]
 8006ace:	b14c      	cbz	r4, 8006ae4 <__assert_func+0x24>
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <__assert_func+0x30>)
 8006ad2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ad6:	9100      	str	r1, [sp, #0]
 8006ad8:	462b      	mov	r3, r5
 8006ada:	4906      	ldr	r1, [pc, #24]	; (8006af4 <__assert_func+0x34>)
 8006adc:	f000 f80e 	bl	8006afc <fiprintf>
 8006ae0:	f000 fa82 	bl	8006fe8 <abort>
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <__assert_func+0x38>)
 8006ae6:	461c      	mov	r4, r3
 8006ae8:	e7f3      	b.n	8006ad2 <__assert_func+0x12>
 8006aea:	bf00      	nop
 8006aec:	2000000c 	.word	0x2000000c
 8006af0:	08007a9d 	.word	0x08007a9d
 8006af4:	08007aaa 	.word	0x08007aaa
 8006af8:	08007657 	.word	0x08007657

08006afc <fiprintf>:
 8006afc:	b40e      	push	{r1, r2, r3}
 8006afe:	b503      	push	{r0, r1, lr}
 8006b00:	4601      	mov	r1, r0
 8006b02:	ab03      	add	r3, sp, #12
 8006b04:	4805      	ldr	r0, [pc, #20]	; (8006b1c <fiprintf+0x20>)
 8006b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	9301      	str	r3, [sp, #4]
 8006b0e:	f000 f87b 	bl	8006c08 <_vfiprintf_r>
 8006b12:	b002      	add	sp, #8
 8006b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b18:	b003      	add	sp, #12
 8006b1a:	4770      	bx	lr
 8006b1c:	2000000c 	.word	0x2000000c

08006b20 <memmove>:
 8006b20:	4288      	cmp	r0, r1
 8006b22:	b510      	push	{r4, lr}
 8006b24:	eb01 0402 	add.w	r4, r1, r2
 8006b28:	d902      	bls.n	8006b30 <memmove+0x10>
 8006b2a:	4284      	cmp	r4, r0
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	d807      	bhi.n	8006b40 <memmove+0x20>
 8006b30:	1e43      	subs	r3, r0, #1
 8006b32:	42a1      	cmp	r1, r4
 8006b34:	d008      	beq.n	8006b48 <memmove+0x28>
 8006b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b3e:	e7f8      	b.n	8006b32 <memmove+0x12>
 8006b40:	4601      	mov	r1, r0
 8006b42:	4402      	add	r2, r0
 8006b44:	428a      	cmp	r2, r1
 8006b46:	d100      	bne.n	8006b4a <memmove+0x2a>
 8006b48:	bd10      	pop	{r4, pc}
 8006b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b52:	e7f7      	b.n	8006b44 <memmove+0x24>

08006b54 <__malloc_lock>:
 8006b54:	4801      	ldr	r0, [pc, #4]	; (8006b5c <__malloc_lock+0x8>)
 8006b56:	f000 bc07 	b.w	8007368 <__retarget_lock_acquire_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	2000034c 	.word	0x2000034c

08006b60 <__malloc_unlock>:
 8006b60:	4801      	ldr	r0, [pc, #4]	; (8006b68 <__malloc_unlock+0x8>)
 8006b62:	f000 bc02 	b.w	800736a <__retarget_lock_release_recursive>
 8006b66:	bf00      	nop
 8006b68:	2000034c 	.word	0x2000034c

08006b6c <_realloc_r>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	4607      	mov	r7, r0
 8006b70:	4614      	mov	r4, r2
 8006b72:	460e      	mov	r6, r1
 8006b74:	b921      	cbnz	r1, 8006b80 <_realloc_r+0x14>
 8006b76:	4611      	mov	r1, r2
 8006b78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b7c:	f7ff bdb4 	b.w	80066e8 <_malloc_r>
 8006b80:	b922      	cbnz	r2, 8006b8c <_realloc_r+0x20>
 8006b82:	f7ff fd65 	bl	8006650 <_free_r>
 8006b86:	4625      	mov	r5, r4
 8006b88:	4628      	mov	r0, r5
 8006b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b8c:	f000 fc52 	bl	8007434 <_malloc_usable_size_r>
 8006b90:	42a0      	cmp	r0, r4
 8006b92:	d20f      	bcs.n	8006bb4 <_realloc_r+0x48>
 8006b94:	4621      	mov	r1, r4
 8006b96:	4638      	mov	r0, r7
 8006b98:	f7ff fda6 	bl	80066e8 <_malloc_r>
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d0f2      	beq.n	8006b88 <_realloc_r+0x1c>
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	f7ff f87f 	bl	8005ca8 <memcpy>
 8006baa:	4631      	mov	r1, r6
 8006bac:	4638      	mov	r0, r7
 8006bae:	f7ff fd4f 	bl	8006650 <_free_r>
 8006bb2:	e7e9      	b.n	8006b88 <_realloc_r+0x1c>
 8006bb4:	4635      	mov	r5, r6
 8006bb6:	e7e7      	b.n	8006b88 <_realloc_r+0x1c>

08006bb8 <__sfputc_r>:
 8006bb8:	6893      	ldr	r3, [r2, #8]
 8006bba:	b410      	push	{r4}
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	6093      	str	r3, [r2, #8]
 8006bc2:	da07      	bge.n	8006bd4 <__sfputc_r+0x1c>
 8006bc4:	6994      	ldr	r4, [r2, #24]
 8006bc6:	42a3      	cmp	r3, r4
 8006bc8:	db01      	blt.n	8006bce <__sfputc_r+0x16>
 8006bca:	290a      	cmp	r1, #10
 8006bcc:	d102      	bne.n	8006bd4 <__sfputc_r+0x1c>
 8006bce:	bc10      	pop	{r4}
 8006bd0:	f000 b94a 	b.w	8006e68 <__swbuf_r>
 8006bd4:	6813      	ldr	r3, [r2, #0]
 8006bd6:	1c58      	adds	r0, r3, #1
 8006bd8:	6010      	str	r0, [r2, #0]
 8006bda:	7019      	strb	r1, [r3, #0]
 8006bdc:	4608      	mov	r0, r1
 8006bde:	bc10      	pop	{r4}
 8006be0:	4770      	bx	lr

08006be2 <__sfputs_r>:
 8006be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be4:	4606      	mov	r6, r0
 8006be6:	460f      	mov	r7, r1
 8006be8:	4614      	mov	r4, r2
 8006bea:	18d5      	adds	r5, r2, r3
 8006bec:	42ac      	cmp	r4, r5
 8006bee:	d101      	bne.n	8006bf4 <__sfputs_r+0x12>
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	e007      	b.n	8006c04 <__sfputs_r+0x22>
 8006bf4:	463a      	mov	r2, r7
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfc:	f7ff ffdc 	bl	8006bb8 <__sfputc_r>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d1f3      	bne.n	8006bec <__sfputs_r+0xa>
 8006c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c08 <_vfiprintf_r>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	460d      	mov	r5, r1
 8006c0e:	4614      	mov	r4, r2
 8006c10:	4698      	mov	r8, r3
 8006c12:	4606      	mov	r6, r0
 8006c14:	b09d      	sub	sp, #116	; 0x74
 8006c16:	b118      	cbz	r0, 8006c20 <_vfiprintf_r+0x18>
 8006c18:	6983      	ldr	r3, [r0, #24]
 8006c1a:	b90b      	cbnz	r3, 8006c20 <_vfiprintf_r+0x18>
 8006c1c:	f000 fb06 	bl	800722c <__sinit>
 8006c20:	4b89      	ldr	r3, [pc, #548]	; (8006e48 <_vfiprintf_r+0x240>)
 8006c22:	429d      	cmp	r5, r3
 8006c24:	d11b      	bne.n	8006c5e <_vfiprintf_r+0x56>
 8006c26:	6875      	ldr	r5, [r6, #4]
 8006c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c2a:	07d9      	lsls	r1, r3, #31
 8006c2c:	d405      	bmi.n	8006c3a <_vfiprintf_r+0x32>
 8006c2e:	89ab      	ldrh	r3, [r5, #12]
 8006c30:	059a      	lsls	r2, r3, #22
 8006c32:	d402      	bmi.n	8006c3a <_vfiprintf_r+0x32>
 8006c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c36:	f000 fb97 	bl	8007368 <__retarget_lock_acquire_recursive>
 8006c3a:	89ab      	ldrh	r3, [r5, #12]
 8006c3c:	071b      	lsls	r3, r3, #28
 8006c3e:	d501      	bpl.n	8006c44 <_vfiprintf_r+0x3c>
 8006c40:	692b      	ldr	r3, [r5, #16]
 8006c42:	b9eb      	cbnz	r3, 8006c80 <_vfiprintf_r+0x78>
 8006c44:	4629      	mov	r1, r5
 8006c46:	4630      	mov	r0, r6
 8006c48:	f000 f960 	bl	8006f0c <__swsetup_r>
 8006c4c:	b1c0      	cbz	r0, 8006c80 <_vfiprintf_r+0x78>
 8006c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c50:	07dc      	lsls	r4, r3, #31
 8006c52:	d50e      	bpl.n	8006c72 <_vfiprintf_r+0x6a>
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	b01d      	add	sp, #116	; 0x74
 8006c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5e:	4b7b      	ldr	r3, [pc, #492]	; (8006e4c <_vfiprintf_r+0x244>)
 8006c60:	429d      	cmp	r5, r3
 8006c62:	d101      	bne.n	8006c68 <_vfiprintf_r+0x60>
 8006c64:	68b5      	ldr	r5, [r6, #8]
 8006c66:	e7df      	b.n	8006c28 <_vfiprintf_r+0x20>
 8006c68:	4b79      	ldr	r3, [pc, #484]	; (8006e50 <_vfiprintf_r+0x248>)
 8006c6a:	429d      	cmp	r5, r3
 8006c6c:	bf08      	it	eq
 8006c6e:	68f5      	ldreq	r5, [r6, #12]
 8006c70:	e7da      	b.n	8006c28 <_vfiprintf_r+0x20>
 8006c72:	89ab      	ldrh	r3, [r5, #12]
 8006c74:	0598      	lsls	r0, r3, #22
 8006c76:	d4ed      	bmi.n	8006c54 <_vfiprintf_r+0x4c>
 8006c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c7a:	f000 fb76 	bl	800736a <__retarget_lock_release_recursive>
 8006c7e:	e7e9      	b.n	8006c54 <_vfiprintf_r+0x4c>
 8006c80:	2300      	movs	r3, #0
 8006c82:	9309      	str	r3, [sp, #36]	; 0x24
 8006c84:	2320      	movs	r3, #32
 8006c86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c8a:	2330      	movs	r3, #48	; 0x30
 8006c8c:	f04f 0901 	mov.w	r9, #1
 8006c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c94:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006e54 <_vfiprintf_r+0x24c>
 8006c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	469a      	mov	sl, r3
 8006ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca4:	b10a      	cbz	r2, 8006caa <_vfiprintf_r+0xa2>
 8006ca6:	2a25      	cmp	r2, #37	; 0x25
 8006ca8:	d1f9      	bne.n	8006c9e <_vfiprintf_r+0x96>
 8006caa:	ebba 0b04 	subs.w	fp, sl, r4
 8006cae:	d00b      	beq.n	8006cc8 <_vfiprintf_r+0xc0>
 8006cb0:	465b      	mov	r3, fp
 8006cb2:	4622      	mov	r2, r4
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f7ff ff93 	bl	8006be2 <__sfputs_r>
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f000 80aa 	beq.w	8006e16 <_vfiprintf_r+0x20e>
 8006cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc4:	445a      	add	r2, fp
 8006cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8006cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 80a2 	beq.w	8006e16 <_vfiprintf_r+0x20e>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cdc:	f10a 0a01 	add.w	sl, sl, #1
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	9307      	str	r3, [sp, #28]
 8006ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8006cea:	4654      	mov	r4, sl
 8006cec:	2205      	movs	r2, #5
 8006cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf2:	4858      	ldr	r0, [pc, #352]	; (8006e54 <_vfiprintf_r+0x24c>)
 8006cf4:	f7fe ffca 	bl	8005c8c <memchr>
 8006cf8:	9a04      	ldr	r2, [sp, #16]
 8006cfa:	b9d8      	cbnz	r0, 8006d34 <_vfiprintf_r+0x12c>
 8006cfc:	06d1      	lsls	r1, r2, #27
 8006cfe:	bf44      	itt	mi
 8006d00:	2320      	movmi	r3, #32
 8006d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d06:	0713      	lsls	r3, r2, #28
 8006d08:	bf44      	itt	mi
 8006d0a:	232b      	movmi	r3, #43	; 0x2b
 8006d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d10:	f89a 3000 	ldrb.w	r3, [sl]
 8006d14:	2b2a      	cmp	r3, #42	; 0x2a
 8006d16:	d015      	beq.n	8006d44 <_vfiprintf_r+0x13c>
 8006d18:	4654      	mov	r4, sl
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f04f 0c0a 	mov.w	ip, #10
 8006d20:	9a07      	ldr	r2, [sp, #28]
 8006d22:	4621      	mov	r1, r4
 8006d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d28:	3b30      	subs	r3, #48	; 0x30
 8006d2a:	2b09      	cmp	r3, #9
 8006d2c:	d94e      	bls.n	8006dcc <_vfiprintf_r+0x1c4>
 8006d2e:	b1b0      	cbz	r0, 8006d5e <_vfiprintf_r+0x156>
 8006d30:	9207      	str	r2, [sp, #28]
 8006d32:	e014      	b.n	8006d5e <_vfiprintf_r+0x156>
 8006d34:	eba0 0308 	sub.w	r3, r0, r8
 8006d38:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	46a2      	mov	sl, r4
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	e7d2      	b.n	8006cea <_vfiprintf_r+0xe2>
 8006d44:	9b03      	ldr	r3, [sp, #12]
 8006d46:	1d19      	adds	r1, r3, #4
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	9103      	str	r1, [sp, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bfbb      	ittet	lt
 8006d50:	425b      	neglt	r3, r3
 8006d52:	f042 0202 	orrlt.w	r2, r2, #2
 8006d56:	9307      	strge	r3, [sp, #28]
 8006d58:	9307      	strlt	r3, [sp, #28]
 8006d5a:	bfb8      	it	lt
 8006d5c:	9204      	strlt	r2, [sp, #16]
 8006d5e:	7823      	ldrb	r3, [r4, #0]
 8006d60:	2b2e      	cmp	r3, #46	; 0x2e
 8006d62:	d10c      	bne.n	8006d7e <_vfiprintf_r+0x176>
 8006d64:	7863      	ldrb	r3, [r4, #1]
 8006d66:	2b2a      	cmp	r3, #42	; 0x2a
 8006d68:	d135      	bne.n	8006dd6 <_vfiprintf_r+0x1ce>
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	3402      	adds	r4, #2
 8006d6e:	1d1a      	adds	r2, r3, #4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	9203      	str	r2, [sp, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	bfb8      	it	lt
 8006d78:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d7c:	9305      	str	r3, [sp, #20]
 8006d7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e64 <_vfiprintf_r+0x25c>
 8006d82:	2203      	movs	r2, #3
 8006d84:	4650      	mov	r0, sl
 8006d86:	7821      	ldrb	r1, [r4, #0]
 8006d88:	f7fe ff80 	bl	8005c8c <memchr>
 8006d8c:	b140      	cbz	r0, 8006da0 <_vfiprintf_r+0x198>
 8006d8e:	2340      	movs	r3, #64	; 0x40
 8006d90:	eba0 000a 	sub.w	r0, r0, sl
 8006d94:	fa03 f000 	lsl.w	r0, r3, r0
 8006d98:	9b04      	ldr	r3, [sp, #16]
 8006d9a:	3401      	adds	r4, #1
 8006d9c:	4303      	orrs	r3, r0
 8006d9e:	9304      	str	r3, [sp, #16]
 8006da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da4:	2206      	movs	r2, #6
 8006da6:	482c      	ldr	r0, [pc, #176]	; (8006e58 <_vfiprintf_r+0x250>)
 8006da8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dac:	f7fe ff6e 	bl	8005c8c <memchr>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d03f      	beq.n	8006e34 <_vfiprintf_r+0x22c>
 8006db4:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <_vfiprintf_r+0x254>)
 8006db6:	bb1b      	cbnz	r3, 8006e00 <_vfiprintf_r+0x1f8>
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	3307      	adds	r3, #7
 8006dbc:	f023 0307 	bic.w	r3, r3, #7
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	9303      	str	r3, [sp, #12]
 8006dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc6:	443b      	add	r3, r7
 8006dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dca:	e767      	b.n	8006c9c <_vfiprintf_r+0x94>
 8006dcc:	460c      	mov	r4, r1
 8006dce:	2001      	movs	r0, #1
 8006dd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dd4:	e7a5      	b.n	8006d22 <_vfiprintf_r+0x11a>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f04f 0c0a 	mov.w	ip, #10
 8006ddc:	4619      	mov	r1, r3
 8006dde:	3401      	adds	r4, #1
 8006de0:	9305      	str	r3, [sp, #20]
 8006de2:	4620      	mov	r0, r4
 8006de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de8:	3a30      	subs	r2, #48	; 0x30
 8006dea:	2a09      	cmp	r2, #9
 8006dec:	d903      	bls.n	8006df6 <_vfiprintf_r+0x1ee>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0c5      	beq.n	8006d7e <_vfiprintf_r+0x176>
 8006df2:	9105      	str	r1, [sp, #20]
 8006df4:	e7c3      	b.n	8006d7e <_vfiprintf_r+0x176>
 8006df6:	4604      	mov	r4, r0
 8006df8:	2301      	movs	r3, #1
 8006dfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dfe:	e7f0      	b.n	8006de2 <_vfiprintf_r+0x1da>
 8006e00:	ab03      	add	r3, sp, #12
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	462a      	mov	r2, r5
 8006e06:	4630      	mov	r0, r6
 8006e08:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <_vfiprintf_r+0x258>)
 8006e0a:	a904      	add	r1, sp, #16
 8006e0c:	f7fc f8a2 	bl	8002f54 <_printf_float>
 8006e10:	4607      	mov	r7, r0
 8006e12:	1c78      	adds	r0, r7, #1
 8006e14:	d1d6      	bne.n	8006dc4 <_vfiprintf_r+0x1bc>
 8006e16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e18:	07d9      	lsls	r1, r3, #31
 8006e1a:	d405      	bmi.n	8006e28 <_vfiprintf_r+0x220>
 8006e1c:	89ab      	ldrh	r3, [r5, #12]
 8006e1e:	059a      	lsls	r2, r3, #22
 8006e20:	d402      	bmi.n	8006e28 <_vfiprintf_r+0x220>
 8006e22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e24:	f000 faa1 	bl	800736a <__retarget_lock_release_recursive>
 8006e28:	89ab      	ldrh	r3, [r5, #12]
 8006e2a:	065b      	lsls	r3, r3, #25
 8006e2c:	f53f af12 	bmi.w	8006c54 <_vfiprintf_r+0x4c>
 8006e30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e32:	e711      	b.n	8006c58 <_vfiprintf_r+0x50>
 8006e34:	ab03      	add	r3, sp, #12
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	462a      	mov	r2, r5
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <_vfiprintf_r+0x258>)
 8006e3e:	a904      	add	r1, sp, #16
 8006e40:	f7fc fb24 	bl	800348c <_printf_i>
 8006e44:	e7e4      	b.n	8006e10 <_vfiprintf_r+0x208>
 8006e46:	bf00      	nop
 8006e48:	08007afc 	.word	0x08007afc
 8006e4c:	08007b1c 	.word	0x08007b1c
 8006e50:	08007adc 	.word	0x08007adc
 8006e54:	08007a8c 	.word	0x08007a8c
 8006e58:	08007a96 	.word	0x08007a96
 8006e5c:	08002f55 	.word	0x08002f55
 8006e60:	08006be3 	.word	0x08006be3
 8006e64:	08007a92 	.word	0x08007a92

08006e68 <__swbuf_r>:
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	460e      	mov	r6, r1
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	4605      	mov	r5, r0
 8006e70:	b118      	cbz	r0, 8006e7a <__swbuf_r+0x12>
 8006e72:	6983      	ldr	r3, [r0, #24]
 8006e74:	b90b      	cbnz	r3, 8006e7a <__swbuf_r+0x12>
 8006e76:	f000 f9d9 	bl	800722c <__sinit>
 8006e7a:	4b21      	ldr	r3, [pc, #132]	; (8006f00 <__swbuf_r+0x98>)
 8006e7c:	429c      	cmp	r4, r3
 8006e7e:	d12b      	bne.n	8006ed8 <__swbuf_r+0x70>
 8006e80:	686c      	ldr	r4, [r5, #4]
 8006e82:	69a3      	ldr	r3, [r4, #24]
 8006e84:	60a3      	str	r3, [r4, #8]
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	071a      	lsls	r2, r3, #28
 8006e8a:	d52f      	bpl.n	8006eec <__swbuf_r+0x84>
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	b36b      	cbz	r3, 8006eec <__swbuf_r+0x84>
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	6820      	ldr	r0, [r4, #0]
 8006e94:	b2f6      	uxtb	r6, r6
 8006e96:	1ac0      	subs	r0, r0, r3
 8006e98:	6963      	ldr	r3, [r4, #20]
 8006e9a:	4637      	mov	r7, r6
 8006e9c:	4283      	cmp	r3, r0
 8006e9e:	dc04      	bgt.n	8006eaa <__swbuf_r+0x42>
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f000 f92e 	bl	8007104 <_fflush_r>
 8006ea8:	bb30      	cbnz	r0, 8006ef8 <__swbuf_r+0x90>
 8006eaa:	68a3      	ldr	r3, [r4, #8]
 8006eac:	3001      	adds	r0, #1
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	60a3      	str	r3, [r4, #8]
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	6022      	str	r2, [r4, #0]
 8006eb8:	701e      	strb	r6, [r3, #0]
 8006eba:	6963      	ldr	r3, [r4, #20]
 8006ebc:	4283      	cmp	r3, r0
 8006ebe:	d004      	beq.n	8006eca <__swbuf_r+0x62>
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	07db      	lsls	r3, r3, #31
 8006ec4:	d506      	bpl.n	8006ed4 <__swbuf_r+0x6c>
 8006ec6:	2e0a      	cmp	r6, #10
 8006ec8:	d104      	bne.n	8006ed4 <__swbuf_r+0x6c>
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f000 f919 	bl	8007104 <_fflush_r>
 8006ed2:	b988      	cbnz	r0, 8006ef8 <__swbuf_r+0x90>
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ed8:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <__swbuf_r+0x9c>)
 8006eda:	429c      	cmp	r4, r3
 8006edc:	d101      	bne.n	8006ee2 <__swbuf_r+0x7a>
 8006ede:	68ac      	ldr	r4, [r5, #8]
 8006ee0:	e7cf      	b.n	8006e82 <__swbuf_r+0x1a>
 8006ee2:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <__swbuf_r+0xa0>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	bf08      	it	eq
 8006ee8:	68ec      	ldreq	r4, [r5, #12]
 8006eea:	e7ca      	b.n	8006e82 <__swbuf_r+0x1a>
 8006eec:	4621      	mov	r1, r4
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 f80c 	bl	8006f0c <__swsetup_r>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d0cb      	beq.n	8006e90 <__swbuf_r+0x28>
 8006ef8:	f04f 37ff 	mov.w	r7, #4294967295
 8006efc:	e7ea      	b.n	8006ed4 <__swbuf_r+0x6c>
 8006efe:	bf00      	nop
 8006f00:	08007afc 	.word	0x08007afc
 8006f04:	08007b1c 	.word	0x08007b1c
 8006f08:	08007adc 	.word	0x08007adc

08006f0c <__swsetup_r>:
 8006f0c:	4b32      	ldr	r3, [pc, #200]	; (8006fd8 <__swsetup_r+0xcc>)
 8006f0e:	b570      	push	{r4, r5, r6, lr}
 8006f10:	681d      	ldr	r5, [r3, #0]
 8006f12:	4606      	mov	r6, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	b125      	cbz	r5, 8006f22 <__swsetup_r+0x16>
 8006f18:	69ab      	ldr	r3, [r5, #24]
 8006f1a:	b913      	cbnz	r3, 8006f22 <__swsetup_r+0x16>
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f000 f985 	bl	800722c <__sinit>
 8006f22:	4b2e      	ldr	r3, [pc, #184]	; (8006fdc <__swsetup_r+0xd0>)
 8006f24:	429c      	cmp	r4, r3
 8006f26:	d10f      	bne.n	8006f48 <__swsetup_r+0x3c>
 8006f28:	686c      	ldr	r4, [r5, #4]
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f30:	0719      	lsls	r1, r3, #28
 8006f32:	d42c      	bmi.n	8006f8e <__swsetup_r+0x82>
 8006f34:	06dd      	lsls	r5, r3, #27
 8006f36:	d411      	bmi.n	8006f5c <__swsetup_r+0x50>
 8006f38:	2309      	movs	r3, #9
 8006f3a:	6033      	str	r3, [r6, #0]
 8006f3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	e03e      	b.n	8006fc6 <__swsetup_r+0xba>
 8006f48:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <__swsetup_r+0xd4>)
 8006f4a:	429c      	cmp	r4, r3
 8006f4c:	d101      	bne.n	8006f52 <__swsetup_r+0x46>
 8006f4e:	68ac      	ldr	r4, [r5, #8]
 8006f50:	e7eb      	b.n	8006f2a <__swsetup_r+0x1e>
 8006f52:	4b24      	ldr	r3, [pc, #144]	; (8006fe4 <__swsetup_r+0xd8>)
 8006f54:	429c      	cmp	r4, r3
 8006f56:	bf08      	it	eq
 8006f58:	68ec      	ldreq	r4, [r5, #12]
 8006f5a:	e7e6      	b.n	8006f2a <__swsetup_r+0x1e>
 8006f5c:	0758      	lsls	r0, r3, #29
 8006f5e:	d512      	bpl.n	8006f86 <__swsetup_r+0x7a>
 8006f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f62:	b141      	cbz	r1, 8006f76 <__swsetup_r+0x6a>
 8006f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f68:	4299      	cmp	r1, r3
 8006f6a:	d002      	beq.n	8006f72 <__swsetup_r+0x66>
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f7ff fb6f 	bl	8006650 <_free_r>
 8006f72:	2300      	movs	r3, #0
 8006f74:	6363      	str	r3, [r4, #52]	; 0x34
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f7c:	81a3      	strh	r3, [r4, #12]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6063      	str	r3, [r4, #4]
 8006f82:	6923      	ldr	r3, [r4, #16]
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	f043 0308 	orr.w	r3, r3, #8
 8006f8c:	81a3      	strh	r3, [r4, #12]
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	b94b      	cbnz	r3, 8006fa6 <__swsetup_r+0x9a>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f9c:	d003      	beq.n	8006fa6 <__swsetup_r+0x9a>
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f000 fa07 	bl	80073b4 <__smakebuf_r>
 8006fa6:	89a0      	ldrh	r0, [r4, #12]
 8006fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fac:	f010 0301 	ands.w	r3, r0, #1
 8006fb0:	d00a      	beq.n	8006fc8 <__swsetup_r+0xbc>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60a3      	str	r3, [r4, #8]
 8006fb6:	6963      	ldr	r3, [r4, #20]
 8006fb8:	425b      	negs	r3, r3
 8006fba:	61a3      	str	r3, [r4, #24]
 8006fbc:	6923      	ldr	r3, [r4, #16]
 8006fbe:	b943      	cbnz	r3, 8006fd2 <__swsetup_r+0xc6>
 8006fc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fc4:	d1ba      	bne.n	8006f3c <__swsetup_r+0x30>
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	0781      	lsls	r1, r0, #30
 8006fca:	bf58      	it	pl
 8006fcc:	6963      	ldrpl	r3, [r4, #20]
 8006fce:	60a3      	str	r3, [r4, #8]
 8006fd0:	e7f4      	b.n	8006fbc <__swsetup_r+0xb0>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e7f7      	b.n	8006fc6 <__swsetup_r+0xba>
 8006fd6:	bf00      	nop
 8006fd8:	2000000c 	.word	0x2000000c
 8006fdc:	08007afc 	.word	0x08007afc
 8006fe0:	08007b1c 	.word	0x08007b1c
 8006fe4:	08007adc 	.word	0x08007adc

08006fe8 <abort>:
 8006fe8:	2006      	movs	r0, #6
 8006fea:	b508      	push	{r3, lr}
 8006fec:	f000 fa52 	bl	8007494 <raise>
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	f7fa facb 	bl	800158c <_exit>
	...

08006ff8 <__sflush_r>:
 8006ff8:	898a      	ldrh	r2, [r1, #12]
 8006ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffe:	4605      	mov	r5, r0
 8007000:	0710      	lsls	r0, r2, #28
 8007002:	460c      	mov	r4, r1
 8007004:	d458      	bmi.n	80070b8 <__sflush_r+0xc0>
 8007006:	684b      	ldr	r3, [r1, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	dc05      	bgt.n	8007018 <__sflush_r+0x20>
 800700c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	dc02      	bgt.n	8007018 <__sflush_r+0x20>
 8007012:	2000      	movs	r0, #0
 8007014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800701a:	2e00      	cmp	r6, #0
 800701c:	d0f9      	beq.n	8007012 <__sflush_r+0x1a>
 800701e:	2300      	movs	r3, #0
 8007020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007024:	682f      	ldr	r7, [r5, #0]
 8007026:	602b      	str	r3, [r5, #0]
 8007028:	d032      	beq.n	8007090 <__sflush_r+0x98>
 800702a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	075a      	lsls	r2, r3, #29
 8007030:	d505      	bpl.n	800703e <__sflush_r+0x46>
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	1ac0      	subs	r0, r0, r3
 8007036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007038:	b10b      	cbz	r3, 800703e <__sflush_r+0x46>
 800703a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800703c:	1ac0      	subs	r0, r0, r3
 800703e:	2300      	movs	r3, #0
 8007040:	4602      	mov	r2, r0
 8007042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007044:	4628      	mov	r0, r5
 8007046:	6a21      	ldr	r1, [r4, #32]
 8007048:	47b0      	blx	r6
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	d106      	bne.n	800705e <__sflush_r+0x66>
 8007050:	6829      	ldr	r1, [r5, #0]
 8007052:	291d      	cmp	r1, #29
 8007054:	d82c      	bhi.n	80070b0 <__sflush_r+0xb8>
 8007056:	4a2a      	ldr	r2, [pc, #168]	; (8007100 <__sflush_r+0x108>)
 8007058:	40ca      	lsrs	r2, r1
 800705a:	07d6      	lsls	r6, r2, #31
 800705c:	d528      	bpl.n	80070b0 <__sflush_r+0xb8>
 800705e:	2200      	movs	r2, #0
 8007060:	6062      	str	r2, [r4, #4]
 8007062:	6922      	ldr	r2, [r4, #16]
 8007064:	04d9      	lsls	r1, r3, #19
 8007066:	6022      	str	r2, [r4, #0]
 8007068:	d504      	bpl.n	8007074 <__sflush_r+0x7c>
 800706a:	1c42      	adds	r2, r0, #1
 800706c:	d101      	bne.n	8007072 <__sflush_r+0x7a>
 800706e:	682b      	ldr	r3, [r5, #0]
 8007070:	b903      	cbnz	r3, 8007074 <__sflush_r+0x7c>
 8007072:	6560      	str	r0, [r4, #84]	; 0x54
 8007074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007076:	602f      	str	r7, [r5, #0]
 8007078:	2900      	cmp	r1, #0
 800707a:	d0ca      	beq.n	8007012 <__sflush_r+0x1a>
 800707c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007080:	4299      	cmp	r1, r3
 8007082:	d002      	beq.n	800708a <__sflush_r+0x92>
 8007084:	4628      	mov	r0, r5
 8007086:	f7ff fae3 	bl	8006650 <_free_r>
 800708a:	2000      	movs	r0, #0
 800708c:	6360      	str	r0, [r4, #52]	; 0x34
 800708e:	e7c1      	b.n	8007014 <__sflush_r+0x1c>
 8007090:	6a21      	ldr	r1, [r4, #32]
 8007092:	2301      	movs	r3, #1
 8007094:	4628      	mov	r0, r5
 8007096:	47b0      	blx	r6
 8007098:	1c41      	adds	r1, r0, #1
 800709a:	d1c7      	bne.n	800702c <__sflush_r+0x34>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0c4      	beq.n	800702c <__sflush_r+0x34>
 80070a2:	2b1d      	cmp	r3, #29
 80070a4:	d001      	beq.n	80070aa <__sflush_r+0xb2>
 80070a6:	2b16      	cmp	r3, #22
 80070a8:	d101      	bne.n	80070ae <__sflush_r+0xb6>
 80070aa:	602f      	str	r7, [r5, #0]
 80070ac:	e7b1      	b.n	8007012 <__sflush_r+0x1a>
 80070ae:	89a3      	ldrh	r3, [r4, #12]
 80070b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b4:	81a3      	strh	r3, [r4, #12]
 80070b6:	e7ad      	b.n	8007014 <__sflush_r+0x1c>
 80070b8:	690f      	ldr	r7, [r1, #16]
 80070ba:	2f00      	cmp	r7, #0
 80070bc:	d0a9      	beq.n	8007012 <__sflush_r+0x1a>
 80070be:	0793      	lsls	r3, r2, #30
 80070c0:	bf18      	it	ne
 80070c2:	2300      	movne	r3, #0
 80070c4:	680e      	ldr	r6, [r1, #0]
 80070c6:	bf08      	it	eq
 80070c8:	694b      	ldreq	r3, [r1, #20]
 80070ca:	eba6 0807 	sub.w	r8, r6, r7
 80070ce:	600f      	str	r7, [r1, #0]
 80070d0:	608b      	str	r3, [r1, #8]
 80070d2:	f1b8 0f00 	cmp.w	r8, #0
 80070d6:	dd9c      	ble.n	8007012 <__sflush_r+0x1a>
 80070d8:	4643      	mov	r3, r8
 80070da:	463a      	mov	r2, r7
 80070dc:	4628      	mov	r0, r5
 80070de:	6a21      	ldr	r1, [r4, #32]
 80070e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070e2:	47b0      	blx	r6
 80070e4:	2800      	cmp	r0, #0
 80070e6:	dc06      	bgt.n	80070f6 <__sflush_r+0xfe>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f04f 30ff 	mov.w	r0, #4294967295
 80070ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	e78e      	b.n	8007014 <__sflush_r+0x1c>
 80070f6:	4407      	add	r7, r0
 80070f8:	eba8 0800 	sub.w	r8, r8, r0
 80070fc:	e7e9      	b.n	80070d2 <__sflush_r+0xda>
 80070fe:	bf00      	nop
 8007100:	20400001 	.word	0x20400001

08007104 <_fflush_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	690b      	ldr	r3, [r1, #16]
 8007108:	4605      	mov	r5, r0
 800710a:	460c      	mov	r4, r1
 800710c:	b913      	cbnz	r3, 8007114 <_fflush_r+0x10>
 800710e:	2500      	movs	r5, #0
 8007110:	4628      	mov	r0, r5
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	b118      	cbz	r0, 800711e <_fflush_r+0x1a>
 8007116:	6983      	ldr	r3, [r0, #24]
 8007118:	b90b      	cbnz	r3, 800711e <_fflush_r+0x1a>
 800711a:	f000 f887 	bl	800722c <__sinit>
 800711e:	4b14      	ldr	r3, [pc, #80]	; (8007170 <_fflush_r+0x6c>)
 8007120:	429c      	cmp	r4, r3
 8007122:	d11b      	bne.n	800715c <_fflush_r+0x58>
 8007124:	686c      	ldr	r4, [r5, #4]
 8007126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0ef      	beq.n	800710e <_fflush_r+0xa>
 800712e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007130:	07d0      	lsls	r0, r2, #31
 8007132:	d404      	bmi.n	800713e <_fflush_r+0x3a>
 8007134:	0599      	lsls	r1, r3, #22
 8007136:	d402      	bmi.n	800713e <_fflush_r+0x3a>
 8007138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800713a:	f000 f915 	bl	8007368 <__retarget_lock_acquire_recursive>
 800713e:	4628      	mov	r0, r5
 8007140:	4621      	mov	r1, r4
 8007142:	f7ff ff59 	bl	8006ff8 <__sflush_r>
 8007146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007148:	4605      	mov	r5, r0
 800714a:	07da      	lsls	r2, r3, #31
 800714c:	d4e0      	bmi.n	8007110 <_fflush_r+0xc>
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	059b      	lsls	r3, r3, #22
 8007152:	d4dd      	bmi.n	8007110 <_fflush_r+0xc>
 8007154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007156:	f000 f908 	bl	800736a <__retarget_lock_release_recursive>
 800715a:	e7d9      	b.n	8007110 <_fflush_r+0xc>
 800715c:	4b05      	ldr	r3, [pc, #20]	; (8007174 <_fflush_r+0x70>)
 800715e:	429c      	cmp	r4, r3
 8007160:	d101      	bne.n	8007166 <_fflush_r+0x62>
 8007162:	68ac      	ldr	r4, [r5, #8]
 8007164:	e7df      	b.n	8007126 <_fflush_r+0x22>
 8007166:	4b04      	ldr	r3, [pc, #16]	; (8007178 <_fflush_r+0x74>)
 8007168:	429c      	cmp	r4, r3
 800716a:	bf08      	it	eq
 800716c:	68ec      	ldreq	r4, [r5, #12]
 800716e:	e7da      	b.n	8007126 <_fflush_r+0x22>
 8007170:	08007afc 	.word	0x08007afc
 8007174:	08007b1c 	.word	0x08007b1c
 8007178:	08007adc 	.word	0x08007adc

0800717c <std>:
 800717c:	2300      	movs	r3, #0
 800717e:	b510      	push	{r4, lr}
 8007180:	4604      	mov	r4, r0
 8007182:	e9c0 3300 	strd	r3, r3, [r0]
 8007186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800718a:	6083      	str	r3, [r0, #8]
 800718c:	8181      	strh	r1, [r0, #12]
 800718e:	6643      	str	r3, [r0, #100]	; 0x64
 8007190:	81c2      	strh	r2, [r0, #14]
 8007192:	6183      	str	r3, [r0, #24]
 8007194:	4619      	mov	r1, r3
 8007196:	2208      	movs	r2, #8
 8007198:	305c      	adds	r0, #92	; 0x5c
 800719a:	f7fb fe35 	bl	8002e08 <memset>
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <std+0x38>)
 80071a0:	6224      	str	r4, [r4, #32]
 80071a2:	6263      	str	r3, [r4, #36]	; 0x24
 80071a4:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <std+0x3c>)
 80071a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80071a8:	4b04      	ldr	r3, [pc, #16]	; (80071bc <std+0x40>)
 80071aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071ac:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <std+0x44>)
 80071ae:	6323      	str	r3, [r4, #48]	; 0x30
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	bf00      	nop
 80071b4:	080074cd 	.word	0x080074cd
 80071b8:	080074ef 	.word	0x080074ef
 80071bc:	08007527 	.word	0x08007527
 80071c0:	0800754b 	.word	0x0800754b

080071c4 <_cleanup_r>:
 80071c4:	4901      	ldr	r1, [pc, #4]	; (80071cc <_cleanup_r+0x8>)
 80071c6:	f000 b8af 	b.w	8007328 <_fwalk_reent>
 80071ca:	bf00      	nop
 80071cc:	08007105 	.word	0x08007105

080071d0 <__sfmoreglue>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	2568      	movs	r5, #104	; 0x68
 80071d4:	1e4a      	subs	r2, r1, #1
 80071d6:	4355      	muls	r5, r2
 80071d8:	460e      	mov	r6, r1
 80071da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071de:	f7ff fa83 	bl	80066e8 <_malloc_r>
 80071e2:	4604      	mov	r4, r0
 80071e4:	b140      	cbz	r0, 80071f8 <__sfmoreglue+0x28>
 80071e6:	2100      	movs	r1, #0
 80071e8:	e9c0 1600 	strd	r1, r6, [r0]
 80071ec:	300c      	adds	r0, #12
 80071ee:	60a0      	str	r0, [r4, #8]
 80071f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071f4:	f7fb fe08 	bl	8002e08 <memset>
 80071f8:	4620      	mov	r0, r4
 80071fa:	bd70      	pop	{r4, r5, r6, pc}

080071fc <__sfp_lock_acquire>:
 80071fc:	4801      	ldr	r0, [pc, #4]	; (8007204 <__sfp_lock_acquire+0x8>)
 80071fe:	f000 b8b3 	b.w	8007368 <__retarget_lock_acquire_recursive>
 8007202:	bf00      	nop
 8007204:	20000350 	.word	0x20000350

08007208 <__sfp_lock_release>:
 8007208:	4801      	ldr	r0, [pc, #4]	; (8007210 <__sfp_lock_release+0x8>)
 800720a:	f000 b8ae 	b.w	800736a <__retarget_lock_release_recursive>
 800720e:	bf00      	nop
 8007210:	20000350 	.word	0x20000350

08007214 <__sinit_lock_acquire>:
 8007214:	4801      	ldr	r0, [pc, #4]	; (800721c <__sinit_lock_acquire+0x8>)
 8007216:	f000 b8a7 	b.w	8007368 <__retarget_lock_acquire_recursive>
 800721a:	bf00      	nop
 800721c:	2000034b 	.word	0x2000034b

08007220 <__sinit_lock_release>:
 8007220:	4801      	ldr	r0, [pc, #4]	; (8007228 <__sinit_lock_release+0x8>)
 8007222:	f000 b8a2 	b.w	800736a <__retarget_lock_release_recursive>
 8007226:	bf00      	nop
 8007228:	2000034b 	.word	0x2000034b

0800722c <__sinit>:
 800722c:	b510      	push	{r4, lr}
 800722e:	4604      	mov	r4, r0
 8007230:	f7ff fff0 	bl	8007214 <__sinit_lock_acquire>
 8007234:	69a3      	ldr	r3, [r4, #24]
 8007236:	b11b      	cbz	r3, 8007240 <__sinit+0x14>
 8007238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800723c:	f7ff bff0 	b.w	8007220 <__sinit_lock_release>
 8007240:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007244:	6523      	str	r3, [r4, #80]	; 0x50
 8007246:	4b13      	ldr	r3, [pc, #76]	; (8007294 <__sinit+0x68>)
 8007248:	4a13      	ldr	r2, [pc, #76]	; (8007298 <__sinit+0x6c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	62a2      	str	r2, [r4, #40]	; 0x28
 800724e:	42a3      	cmp	r3, r4
 8007250:	bf08      	it	eq
 8007252:	2301      	moveq	r3, #1
 8007254:	4620      	mov	r0, r4
 8007256:	bf08      	it	eq
 8007258:	61a3      	streq	r3, [r4, #24]
 800725a:	f000 f81f 	bl	800729c <__sfp>
 800725e:	6060      	str	r0, [r4, #4]
 8007260:	4620      	mov	r0, r4
 8007262:	f000 f81b 	bl	800729c <__sfp>
 8007266:	60a0      	str	r0, [r4, #8]
 8007268:	4620      	mov	r0, r4
 800726a:	f000 f817 	bl	800729c <__sfp>
 800726e:	2200      	movs	r2, #0
 8007270:	2104      	movs	r1, #4
 8007272:	60e0      	str	r0, [r4, #12]
 8007274:	6860      	ldr	r0, [r4, #4]
 8007276:	f7ff ff81 	bl	800717c <std>
 800727a:	2201      	movs	r2, #1
 800727c:	2109      	movs	r1, #9
 800727e:	68a0      	ldr	r0, [r4, #8]
 8007280:	f7ff ff7c 	bl	800717c <std>
 8007284:	2202      	movs	r2, #2
 8007286:	2112      	movs	r1, #18
 8007288:	68e0      	ldr	r0, [r4, #12]
 800728a:	f7ff ff77 	bl	800717c <std>
 800728e:	2301      	movs	r3, #1
 8007290:	61a3      	str	r3, [r4, #24]
 8007292:	e7d1      	b.n	8007238 <__sinit+0xc>
 8007294:	08007684 	.word	0x08007684
 8007298:	080071c5 	.word	0x080071c5

0800729c <__sfp>:
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729e:	4607      	mov	r7, r0
 80072a0:	f7ff ffac 	bl	80071fc <__sfp_lock_acquire>
 80072a4:	4b1e      	ldr	r3, [pc, #120]	; (8007320 <__sfp+0x84>)
 80072a6:	681e      	ldr	r6, [r3, #0]
 80072a8:	69b3      	ldr	r3, [r6, #24]
 80072aa:	b913      	cbnz	r3, 80072b2 <__sfp+0x16>
 80072ac:	4630      	mov	r0, r6
 80072ae:	f7ff ffbd 	bl	800722c <__sinit>
 80072b2:	3648      	adds	r6, #72	; 0x48
 80072b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	d503      	bpl.n	80072c4 <__sfp+0x28>
 80072bc:	6833      	ldr	r3, [r6, #0]
 80072be:	b30b      	cbz	r3, 8007304 <__sfp+0x68>
 80072c0:	6836      	ldr	r6, [r6, #0]
 80072c2:	e7f7      	b.n	80072b4 <__sfp+0x18>
 80072c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80072c8:	b9d5      	cbnz	r5, 8007300 <__sfp+0x64>
 80072ca:	4b16      	ldr	r3, [pc, #88]	; (8007324 <__sfp+0x88>)
 80072cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072d0:	60e3      	str	r3, [r4, #12]
 80072d2:	6665      	str	r5, [r4, #100]	; 0x64
 80072d4:	f000 f847 	bl	8007366 <__retarget_lock_init_recursive>
 80072d8:	f7ff ff96 	bl	8007208 <__sfp_lock_release>
 80072dc:	2208      	movs	r2, #8
 80072de:	4629      	mov	r1, r5
 80072e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072e8:	6025      	str	r5, [r4, #0]
 80072ea:	61a5      	str	r5, [r4, #24]
 80072ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072f0:	f7fb fd8a 	bl	8002e08 <memset>
 80072f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072fc:	4620      	mov	r0, r4
 80072fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007300:	3468      	adds	r4, #104	; 0x68
 8007302:	e7d9      	b.n	80072b8 <__sfp+0x1c>
 8007304:	2104      	movs	r1, #4
 8007306:	4638      	mov	r0, r7
 8007308:	f7ff ff62 	bl	80071d0 <__sfmoreglue>
 800730c:	4604      	mov	r4, r0
 800730e:	6030      	str	r0, [r6, #0]
 8007310:	2800      	cmp	r0, #0
 8007312:	d1d5      	bne.n	80072c0 <__sfp+0x24>
 8007314:	f7ff ff78 	bl	8007208 <__sfp_lock_release>
 8007318:	230c      	movs	r3, #12
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	e7ee      	b.n	80072fc <__sfp+0x60>
 800731e:	bf00      	nop
 8007320:	08007684 	.word	0x08007684
 8007324:	ffff0001 	.word	0xffff0001

08007328 <_fwalk_reent>:
 8007328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800732c:	4606      	mov	r6, r0
 800732e:	4688      	mov	r8, r1
 8007330:	2700      	movs	r7, #0
 8007332:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007336:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800733a:	f1b9 0901 	subs.w	r9, r9, #1
 800733e:	d505      	bpl.n	800734c <_fwalk_reent+0x24>
 8007340:	6824      	ldr	r4, [r4, #0]
 8007342:	2c00      	cmp	r4, #0
 8007344:	d1f7      	bne.n	8007336 <_fwalk_reent+0xe>
 8007346:	4638      	mov	r0, r7
 8007348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800734c:	89ab      	ldrh	r3, [r5, #12]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d907      	bls.n	8007362 <_fwalk_reent+0x3a>
 8007352:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007356:	3301      	adds	r3, #1
 8007358:	d003      	beq.n	8007362 <_fwalk_reent+0x3a>
 800735a:	4629      	mov	r1, r5
 800735c:	4630      	mov	r0, r6
 800735e:	47c0      	blx	r8
 8007360:	4307      	orrs	r7, r0
 8007362:	3568      	adds	r5, #104	; 0x68
 8007364:	e7e9      	b.n	800733a <_fwalk_reent+0x12>

08007366 <__retarget_lock_init_recursive>:
 8007366:	4770      	bx	lr

08007368 <__retarget_lock_acquire_recursive>:
 8007368:	4770      	bx	lr

0800736a <__retarget_lock_release_recursive>:
 800736a:	4770      	bx	lr

0800736c <__swhatbuf_r>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	460e      	mov	r6, r1
 8007370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007374:	4614      	mov	r4, r2
 8007376:	2900      	cmp	r1, #0
 8007378:	461d      	mov	r5, r3
 800737a:	b096      	sub	sp, #88	; 0x58
 800737c:	da07      	bge.n	800738e <__swhatbuf_r+0x22>
 800737e:	2300      	movs	r3, #0
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	89b3      	ldrh	r3, [r6, #12]
 8007384:	061a      	lsls	r2, r3, #24
 8007386:	d410      	bmi.n	80073aa <__swhatbuf_r+0x3e>
 8007388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800738c:	e00e      	b.n	80073ac <__swhatbuf_r+0x40>
 800738e:	466a      	mov	r2, sp
 8007390:	f000 f902 	bl	8007598 <_fstat_r>
 8007394:	2800      	cmp	r0, #0
 8007396:	dbf2      	blt.n	800737e <__swhatbuf_r+0x12>
 8007398:	9a01      	ldr	r2, [sp, #4]
 800739a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800739e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073a2:	425a      	negs	r2, r3
 80073a4:	415a      	adcs	r2, r3
 80073a6:	602a      	str	r2, [r5, #0]
 80073a8:	e7ee      	b.n	8007388 <__swhatbuf_r+0x1c>
 80073aa:	2340      	movs	r3, #64	; 0x40
 80073ac:	2000      	movs	r0, #0
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	b016      	add	sp, #88	; 0x58
 80073b2:	bd70      	pop	{r4, r5, r6, pc}

080073b4 <__smakebuf_r>:
 80073b4:	898b      	ldrh	r3, [r1, #12]
 80073b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80073b8:	079d      	lsls	r5, r3, #30
 80073ba:	4606      	mov	r6, r0
 80073bc:	460c      	mov	r4, r1
 80073be:	d507      	bpl.n	80073d0 <__smakebuf_r+0x1c>
 80073c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	2301      	movs	r3, #1
 80073ca:	6163      	str	r3, [r4, #20]
 80073cc:	b002      	add	sp, #8
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	466a      	mov	r2, sp
 80073d2:	ab01      	add	r3, sp, #4
 80073d4:	f7ff ffca 	bl	800736c <__swhatbuf_r>
 80073d8:	9900      	ldr	r1, [sp, #0]
 80073da:	4605      	mov	r5, r0
 80073dc:	4630      	mov	r0, r6
 80073de:	f7ff f983 	bl	80066e8 <_malloc_r>
 80073e2:	b948      	cbnz	r0, 80073f8 <__smakebuf_r+0x44>
 80073e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e8:	059a      	lsls	r2, r3, #22
 80073ea:	d4ef      	bmi.n	80073cc <__smakebuf_r+0x18>
 80073ec:	f023 0303 	bic.w	r3, r3, #3
 80073f0:	f043 0302 	orr.w	r3, r3, #2
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	e7e3      	b.n	80073c0 <__smakebuf_r+0xc>
 80073f8:	4b0d      	ldr	r3, [pc, #52]	; (8007430 <__smakebuf_r+0x7c>)
 80073fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	6020      	str	r0, [r4, #0]
 8007400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	9b00      	ldr	r3, [sp, #0]
 8007408:	6120      	str	r0, [r4, #16]
 800740a:	6163      	str	r3, [r4, #20]
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	b15b      	cbz	r3, 8007428 <__smakebuf_r+0x74>
 8007410:	4630      	mov	r0, r6
 8007412:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007416:	f000 f8d1 	bl	80075bc <_isatty_r>
 800741a:	b128      	cbz	r0, 8007428 <__smakebuf_r+0x74>
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	81a3      	strh	r3, [r4, #12]
 8007428:	89a0      	ldrh	r0, [r4, #12]
 800742a:	4305      	orrs	r5, r0
 800742c:	81a5      	strh	r5, [r4, #12]
 800742e:	e7cd      	b.n	80073cc <__smakebuf_r+0x18>
 8007430:	080071c5 	.word	0x080071c5

08007434 <_malloc_usable_size_r>:
 8007434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007438:	1f18      	subs	r0, r3, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	bfbc      	itt	lt
 800743e:	580b      	ldrlt	r3, [r1, r0]
 8007440:	18c0      	addlt	r0, r0, r3
 8007442:	4770      	bx	lr

08007444 <_raise_r>:
 8007444:	291f      	cmp	r1, #31
 8007446:	b538      	push	{r3, r4, r5, lr}
 8007448:	4604      	mov	r4, r0
 800744a:	460d      	mov	r5, r1
 800744c:	d904      	bls.n	8007458 <_raise_r+0x14>
 800744e:	2316      	movs	r3, #22
 8007450:	6003      	str	r3, [r0, #0]
 8007452:	f04f 30ff 	mov.w	r0, #4294967295
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800745a:	b112      	cbz	r2, 8007462 <_raise_r+0x1e>
 800745c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007460:	b94b      	cbnz	r3, 8007476 <_raise_r+0x32>
 8007462:	4620      	mov	r0, r4
 8007464:	f000 f830 	bl	80074c8 <_getpid_r>
 8007468:	462a      	mov	r2, r5
 800746a:	4601      	mov	r1, r0
 800746c:	4620      	mov	r0, r4
 800746e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007472:	f000 b817 	b.w	80074a4 <_kill_r>
 8007476:	2b01      	cmp	r3, #1
 8007478:	d00a      	beq.n	8007490 <_raise_r+0x4c>
 800747a:	1c59      	adds	r1, r3, #1
 800747c:	d103      	bne.n	8007486 <_raise_r+0x42>
 800747e:	2316      	movs	r3, #22
 8007480:	6003      	str	r3, [r0, #0]
 8007482:	2001      	movs	r0, #1
 8007484:	e7e7      	b.n	8007456 <_raise_r+0x12>
 8007486:	2400      	movs	r4, #0
 8007488:	4628      	mov	r0, r5
 800748a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800748e:	4798      	blx	r3
 8007490:	2000      	movs	r0, #0
 8007492:	e7e0      	b.n	8007456 <_raise_r+0x12>

08007494 <raise>:
 8007494:	4b02      	ldr	r3, [pc, #8]	; (80074a0 <raise+0xc>)
 8007496:	4601      	mov	r1, r0
 8007498:	6818      	ldr	r0, [r3, #0]
 800749a:	f7ff bfd3 	b.w	8007444 <_raise_r>
 800749e:	bf00      	nop
 80074a0:	2000000c 	.word	0x2000000c

080074a4 <_kill_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	2300      	movs	r3, #0
 80074a8:	4d06      	ldr	r5, [pc, #24]	; (80074c4 <_kill_r+0x20>)
 80074aa:	4604      	mov	r4, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	602b      	str	r3, [r5, #0]
 80074b2:	f7fa f863 	bl	800157c <_kill>
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	d102      	bne.n	80074c0 <_kill_r+0x1c>
 80074ba:	682b      	ldr	r3, [r5, #0]
 80074bc:	b103      	cbz	r3, 80074c0 <_kill_r+0x1c>
 80074be:	6023      	str	r3, [r4, #0]
 80074c0:	bd38      	pop	{r3, r4, r5, pc}
 80074c2:	bf00      	nop
 80074c4:	20000344 	.word	0x20000344

080074c8 <_getpid_r>:
 80074c8:	f7fa b856 	b.w	8001578 <_getpid>

080074cc <__sread>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	460c      	mov	r4, r1
 80074d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d4:	f000 f894 	bl	8007600 <_read_r>
 80074d8:	2800      	cmp	r0, #0
 80074da:	bfab      	itete	ge
 80074dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074de:	89a3      	ldrhlt	r3, [r4, #12]
 80074e0:	181b      	addge	r3, r3, r0
 80074e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074e6:	bfac      	ite	ge
 80074e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074ea:	81a3      	strhlt	r3, [r4, #12]
 80074ec:	bd10      	pop	{r4, pc}

080074ee <__swrite>:
 80074ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f2:	461f      	mov	r7, r3
 80074f4:	898b      	ldrh	r3, [r1, #12]
 80074f6:	4605      	mov	r5, r0
 80074f8:	05db      	lsls	r3, r3, #23
 80074fa:	460c      	mov	r4, r1
 80074fc:	4616      	mov	r6, r2
 80074fe:	d505      	bpl.n	800750c <__swrite+0x1e>
 8007500:	2302      	movs	r3, #2
 8007502:	2200      	movs	r2, #0
 8007504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007508:	f000 f868 	bl	80075dc <_lseek_r>
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	4632      	mov	r2, r6
 8007510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007514:	81a3      	strh	r3, [r4, #12]
 8007516:	4628      	mov	r0, r5
 8007518:	463b      	mov	r3, r7
 800751a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800751e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007522:	f000 b817 	b.w	8007554 <_write_r>

08007526 <__sseek>:
 8007526:	b510      	push	{r4, lr}
 8007528:	460c      	mov	r4, r1
 800752a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752e:	f000 f855 	bl	80075dc <_lseek_r>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	bf15      	itete	ne
 8007538:	6560      	strne	r0, [r4, #84]	; 0x54
 800753a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800753e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007542:	81a3      	strheq	r3, [r4, #12]
 8007544:	bf18      	it	ne
 8007546:	81a3      	strhne	r3, [r4, #12]
 8007548:	bd10      	pop	{r4, pc}

0800754a <__sclose>:
 800754a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754e:	f000 b813 	b.w	8007578 <_close_r>
	...

08007554 <_write_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4604      	mov	r4, r0
 8007558:	4608      	mov	r0, r1
 800755a:	4611      	mov	r1, r2
 800755c:	2200      	movs	r2, #0
 800755e:	4d05      	ldr	r5, [pc, #20]	; (8007574 <_write_r+0x20>)
 8007560:	602a      	str	r2, [r5, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	f7fa f825 	bl	80015b2 <_write>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_write_r+0x1e>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_write_r+0x1e>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	20000344 	.word	0x20000344

08007578 <_close_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	2300      	movs	r3, #0
 800757c:	4d05      	ldr	r5, [pc, #20]	; (8007594 <_close_r+0x1c>)
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f7fa f822 	bl	80015cc <_close>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_close_r+0x1a>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_close_r+0x1a>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	20000344 	.word	0x20000344

08007598 <_fstat_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	2300      	movs	r3, #0
 800759c:	4d06      	ldr	r5, [pc, #24]	; (80075b8 <_fstat_r+0x20>)
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	4611      	mov	r1, r2
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	f7fa f814 	bl	80015d2 <_fstat>
 80075aa:	1c43      	adds	r3, r0, #1
 80075ac:	d102      	bne.n	80075b4 <_fstat_r+0x1c>
 80075ae:	682b      	ldr	r3, [r5, #0]
 80075b0:	b103      	cbz	r3, 80075b4 <_fstat_r+0x1c>
 80075b2:	6023      	str	r3, [r4, #0]
 80075b4:	bd38      	pop	{r3, r4, r5, pc}
 80075b6:	bf00      	nop
 80075b8:	20000344 	.word	0x20000344

080075bc <_isatty_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	2300      	movs	r3, #0
 80075c0:	4d05      	ldr	r5, [pc, #20]	; (80075d8 <_isatty_r+0x1c>)
 80075c2:	4604      	mov	r4, r0
 80075c4:	4608      	mov	r0, r1
 80075c6:	602b      	str	r3, [r5, #0]
 80075c8:	f7fa f808 	bl	80015dc <_isatty>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d102      	bne.n	80075d6 <_isatty_r+0x1a>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	b103      	cbz	r3, 80075d6 <_isatty_r+0x1a>
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	20000344 	.word	0x20000344

080075dc <_lseek_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4604      	mov	r4, r0
 80075e0:	4608      	mov	r0, r1
 80075e2:	4611      	mov	r1, r2
 80075e4:	2200      	movs	r2, #0
 80075e6:	4d05      	ldr	r5, [pc, #20]	; (80075fc <_lseek_r+0x20>)
 80075e8:	602a      	str	r2, [r5, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f7f9 fff8 	bl	80015e0 <_lseek>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_lseek_r+0x1e>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_lseek_r+0x1e>
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	20000344 	.word	0x20000344

08007600 <_read_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4604      	mov	r4, r0
 8007604:	4608      	mov	r0, r1
 8007606:	4611      	mov	r1, r2
 8007608:	2200      	movs	r2, #0
 800760a:	4d05      	ldr	r5, [pc, #20]	; (8007620 <_read_r+0x20>)
 800760c:	602a      	str	r2, [r5, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	f7f9 ffc2 	bl	8001598 <_read>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d102      	bne.n	800761e <_read_r+0x1e>
 8007618:	682b      	ldr	r3, [r5, #0]
 800761a:	b103      	cbz	r3, 800761e <_read_r+0x1e>
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	20000344 	.word	0x20000344

08007624 <_init>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr

08007630 <_fini>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr
